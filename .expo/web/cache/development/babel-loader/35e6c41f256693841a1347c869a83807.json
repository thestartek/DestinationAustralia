{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"accessibilityLabel\", \"accessibilityState\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"uppercase\", \"testID\", \"animateFrom\", \"extended\", \"iconMode\", \"variant\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { withInternalTheme } from \"../../core/theming\";\nimport Icon from \"../Icon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport AnimatedText from \"../Typography/AnimatedText\";\nimport { getCombinedStyles, getFABColors } from \"./utils\";\nvar SIZE = 56;\nvar SCALE = 0.9;\nvar AnimatedFAB = function AnimatedFAB(_ref) {\n  var icon = _ref.icon,\n    label = _ref.label,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    accessibilityState = _ref.accessibilityState,\n    customColor = _ref.color,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    theme = _ref.theme,\n    style = _ref.style,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? !theme.isV3 : _ref$uppercase,\n    testID = _ref.testID,\n    _ref$animateFrom = _ref.animateFrom,\n    animateFrom = _ref$animateFrom === void 0 ? 'right' : _ref$animateFrom,\n    _ref$extended = _ref.extended,\n    extended = _ref$extended === void 0 ? false : _ref$extended,\n    _ref$iconMode = _ref.iconMode,\n    iconMode = _ref$iconMode === void 0 ? 'dynamic' : _ref$iconMode,\n    _ref$variant = _ref.variant,\n    variant = _ref$variant === void 0 ? 'primary' : _ref$variant,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isIOS = Platform.OS === 'ios';\n  var isAnimatedFromRight = animateFrom === 'right';\n  var isIconStatic = iconMode === 'static';\n  var isRTL = I18nManager.isRTL;\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n    visibility = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(0)),\n    animFAB = _React$useRef2.current;\n  var isV3 = theme.isV3,\n    animation = theme.animation;\n  var scale = animation.scale;\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    textWidth = _React$useState2[0],\n    setTextWidth = _React$useState2[1];\n  var _React$useState3 = React.useState(0),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    textHeight = _React$useState4[0],\n    setTextHeight = _React$useState4[1];\n  var borderRadius = SIZE / (isV3 ? 3.5 : 2);\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  var _getFABColors = getFABColors({\n      theme: theme,\n      variant: variant,\n      disabled: disabled,\n      customColor: customColor,\n      style: style\n    }),\n    backgroundColor = _getFABColors.backgroundColor,\n    foregroundColor = _getFABColors.foregroundColor;\n  var rippleColor = color(foregroundColor).alpha(0.12).rgb().string();\n  var extendedWidth = textWidth + SIZE + borderRadius;\n  var distance = isAnimatedFromRight ? -textWidth - borderRadius : textWidth + borderRadius;\n  React.useEffect(function () {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n  var onTextLayout = function onTextLayout(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    var currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    var currentHeight = Math.ceil(nativeEvent.lines[0].height);\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n      setTextWidth(currentWidth);\n    }\n  };\n  var propForDirection = function propForDirection(right) {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n    return right.reverse();\n  };\n  var combinedStyles = getCombinedStyles({\n    isAnimatedFromRight: isAnimatedFromRight,\n    isIconStatic: isIconStatic,\n    distance: distance,\n    animFAB: animFAB\n  });\n  var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n  var textStyle = _objectSpread({\n    color: foregroundColor\n  }, font);\n  var md2Elevation = disabled || !isIOS ? 0 : 6;\n  var md3Elevation = disabled || !isIOS ? 0 : 3;\n  var newAccessibilityState = _objectSpread(_objectSpread({}, accessibilityState), {}, {\n    disabled: disabled\n  });\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [{\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }],\n      borderRadius: borderRadius\n    }, !isV3 && {\n      elevation: md2Elevation\n    }, styles.container, style]\n  }, isV3 && {\n    elevation: md3Elevation\n  }), React.createElement(Animated.View, {\n    style: [!isV3 && {\n      transform: [{\n        scaleY: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([SCALE, 1])\n        })\n      }]\n    }, styles.standard, {\n      borderRadius: borderRadius\n    }]\n  }, React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.shadowWrapper]\n  }, React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, disabled ? styles.disabled : styles.shadow, {\n      width: extendedWidth,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([1, 0.15, 0])\n      }),\n      borderRadius: borderRadius\n    }]\n  }), React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, disabled ? styles.disabled : styles.shadow, {\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([0, 0.85, 1])\n      }),\n      width: SIZE,\n      borderRadius: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0]),\n        outputRange: propForDirection([SIZE / (extendedWidth / SIZE), borderRadius])\n      })\n    }, combinedStyles.absoluteFill]\n  })), React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: [styles.innerWrapper, {\n      borderRadius: borderRadius\n    }]\n  }, React.createElement(Animated.View, {\n    style: [styles.standard, {\n      width: extendedWidth,\n      backgroundColor: backgroundColor,\n      borderRadius: borderRadius\n    }, combinedStyles.innerWrapper]\n  }, React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: newAccessibilityState,\n    testID: testID,\n    style: {\n      borderRadius: borderRadius\n    }\n  }, React.createElement(View, {\n    style: [styles.standard, {\n      width: extendedWidth,\n      borderRadius: borderRadius\n    }]\n  }))))), React.createElement(Animated.View, {\n    style: [styles.iconWrapper, combinedStyles.iconWrapper],\n    pointerEvents: \"none\"\n  }, React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  })), React.createElement(View, {\n    pointerEvents: \"none\"\n  }, React.createElement(AnimatedText, {\n    variant: \"labelLarge\",\n    numberOfLines: 1,\n    onTextLayout: isIOS ? onTextLayout : undefined,\n    ellipsizeMode: 'tail',\n    style: [_defineProperty({}, isAnimatedFromRight || isRTL ? 'right' : 'left', isIconStatic ? textWidth - SIZE + borderRadius / (isV3 ? 1 : 2) : borderRadius), {\n      minWidth: textWidth,\n      top: -SIZE / 2 - textHeight / 2,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.7 * distance, 0]),\n        outputRange: propForDirection([1, 0, 0])\n      }),\n      transform: [{\n        translateX: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([0, SIZE])\n        })\n      }]\n    }, styles.label, uppercase && styles.uppercaseLabel, textStyle]\n  }, label)), !isIOS && React.createElement(ScrollView, {\n    style: styles.textPlaceholderContainer\n  }, React.createElement(Text, {\n    onTextLayout: onTextLayout\n  }, label)));\n};\nvar styles = StyleSheet.create({\n  standard: {\n    height: SIZE\n  },\n  disabled: {\n    elevation: 0\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden'\n  },\n  shadowWrapper: {\n    elevation: 0\n  },\n  shadow: {\n    elevation: 6\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE\n  },\n  label: {\n    position: 'absolute'\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute'\n  }\n});\nexport default withInternalTheme(AnimatedFAB);","map":{"version":3,"mappings":"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","names":["React","color","withInternalTheme","Icon","Surface","TouchableRipple","AnimatedText","getCombinedStyles","getFABColors","SIZE","SCALE","AnimatedFAB","_ref","icon","label","accessibilityLabel","accessibilityState","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","isV3","testID","animateFrom","extended","iconMode","variant","rest","isIOS","Platform","OS","isAnimatedFromRight","isIconStatic","isRTL","I18nManager","useRef","Animated","Value","visibility","current","animFAB","animation","scale","useState","textWidth","setTextWidth","textHeight","setTextHeight","borderRadius","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","foregroundColor","rippleColor","alpha","rgb","string","extendedWidth","distance","easing","Easing","linear","onTextLayout","_ref2","nativeEvent","currentWidth","Math","ceil","lines","width","currentHeight","height","propForDirection","right","reverse","combinedStyles","font","fonts","labelLarge","medium","textStyle","md2Elevation","md3Elevation","newAccessibilityState","opacity","transform","elevation","styles","container","View","scaleY","interpolate","inputRange","outputRange","standard","StyleSheet","absoluteFill","shadowWrapper","pointerEvents","shadow","innerWrapper","borderless","accessibilityRole","iconWrapper","source","size","numberOfLines","undefined","ellipsizeMode","minWidth","top","translateX","uppercaseLabel","ScrollView","textPlaceholderContainer","Text","create","position","flexDirection","overflow","alignItems","justifyContent","textTransform"],"sources":["AnimatedFAB.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  AccessibilityState,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n} from 'react-native';\nimport {\n  Animated,\n  Easing,\n  GestureResponderEvent,\n  I18nManager,\n  Platform,\n  ScrollView,\n  StyleProp,\n  StyleSheet,\n  Text,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport AnimatedText from '../Typography/AnimatedText';\nimport { getCombinedStyles, getFABColors } from './utils';\n\nexport type AnimatedFABIconMode = 'static' | 'dynamic';\nexport type AnimatedFABAnimateFrom = 'left' | 'right';\n\nexport type Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Label for extended `FAB`.\n   */\n  label: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Whether icon should be translated to the end of extended `FAB` or be static and stay in the same place. The default value is `dynamic`.\n   */\n  iconMode?: AnimatedFABIconMode;\n  /**\n   * Indicates from which direction animation should be performed. The default value is `right`.\n   */\n  animateFrom?: AnimatedFABAnimateFrom;\n  /**\n   * Whether `FAB` should start animation to extend.\n   */\n  extended: boolean;\n  /**\n   * @supported Available in v3.x with theme version 3\n   *\n   * Color mappings variant for combinations of container and icon colors.\n   */\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'surface';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  testID?: string;\n};\n\nconst SIZE = 56;\nconst SCALE = 0.9;\n\n/**\n * An animated, extending horizontally floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/animated-fab.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import React from 'react';\n * import {\n *   StyleProp,\n *   ViewStyle,\n *   Animated,\n *   StyleSheet,\n *   Platform,\n *   ScrollView,\n *   Text,\n *   SafeAreaView,\n *   I18nManager,\n * } from 'react-native';\n * import { AnimatedFAB } from 'react-native-paper';\n *\n * const MyComponent = ({\n *   animatedValue,\n *   visible,\n *   extended,\n *   label,\n *   animateFrom,\n *   style,\n *   iconMode,\n * }) => {\n *   const [isExtended, setIsExtended] = React.useState(true);\n *\n *   const isIOS = Platform.OS === 'ios';\n *\n *   const onScroll = ({ nativeEvent }) => {\n *     const currentScrollPosition =\n *       Math.floor(nativeEvent?.contentOffset?.y) ?? 0;\n *\n *     setIsExtended(currentScrollPosition <= 0);\n *   };\n *\n *   const fabStyle = { [animateFrom]: 16 };\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <ScrollView onScroll={onScroll}>\n *         {[...new Array(100).keys()].map((_, i) => (\n *           <Text>{i}</Text>\n *         ))}\n *       </ScrollView>\n *       <AnimatedFAB\n *         icon={'plus'}\n *         label={'Label'}\n *         extended={isExtended}\n *         onPress={() => console.log('Pressed')}\n *         visible={visible}\n *         animateFrom={'right'}\n *         iconMode={'static'}\n *         style={[styles.fabStyle, style, fabStyle]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flexGrow: 1,\n *   },\n *   fabStyle: {\n *     bottom: 16,\n *     right: 16,\n *     position: 'absolute',\n *   },\n * });\n * ```\n */\nconst AnimatedFAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = !theme.isV3,\n  testID,\n  animateFrom = 'right',\n  extended = false,\n  iconMode = 'dynamic',\n  variant = 'primary',\n  ...rest\n}: Props) => {\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const { isRTL } = I18nManager;\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { current: animFAB } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { isV3, animation } = theme;\n  const { scale } = animation;\n\n  const [textWidth, setTextWidth] = React.useState<number>(0);\n  const [textHeight, setTextHeight] = React.useState<number>(0);\n\n  const borderRadius = SIZE / (isV3 ? 3.5 : 2);\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const { backgroundColor, foregroundColor } = getFABColors({\n    theme,\n    variant,\n    disabled,\n    customColor,\n    style,\n  });\n\n  const rippleColor = color(foregroundColor).alpha(0.12).rgb().string();\n\n  const extendedWidth = textWidth + SIZE + borderRadius;\n\n  const distance = isAnimatedFromRight\n    ? -textWidth - borderRadius\n    : textWidth + borderRadius;\n\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear,\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = <T,>(right: T[]): T[] => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB,\n  });\n\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n\n  const textStyle = {\n    color: foregroundColor,\n    ...font,\n  };\n\n  const md2Elevation = disabled || !isIOS ? 0 : 6;\n  const md3Elevation = disabled || !isIOS ? 0 : 3;\n\n  const newAccessibilityState = { ...accessibilityState, disabled };\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n            borderRadius,\n          },\n          !isV3 && {\n            elevation: md2Elevation,\n          },\n          styles.container,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(isV3 && { elevation: md3Elevation })}\n    >\n      <Animated.View\n        style={[\n          !isV3 && {\n            transform: [\n              {\n                scaleY: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([SCALE, 1]),\n                }),\n              },\n            ],\n          },\n          styles.standard,\n          { borderRadius },\n        ]}\n      >\n        <View style={[StyleSheet.absoluteFill, styles.shadowWrapper]}>\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              disabled ? styles.disabled : styles.shadow,\n              {\n                width: extendedWidth,\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([1, 0.15, 0]),\n                }),\n                borderRadius,\n              },\n            ]}\n          />\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              disabled ? styles.disabled : styles.shadow,\n              {\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([0, 0.85, 1]),\n                }),\n                width: SIZE,\n                borderRadius: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([\n                    SIZE / (extendedWidth / SIZE),\n                    borderRadius,\n                  ]),\n                }),\n              },\n              combinedStyles.absoluteFill,\n            ]}\n          />\n        </View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          style={[styles.innerWrapper, { borderRadius }]}\n        >\n          <Animated.View\n            style={[\n              styles.standard,\n              {\n                width: extendedWidth,\n                backgroundColor,\n                borderRadius,\n              },\n              combinedStyles.innerWrapper,\n            ]}\n          >\n            <TouchableRipple\n              borderless\n              onPress={onPress}\n              onLongPress={onLongPress}\n              rippleColor={rippleColor}\n              disabled={disabled}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityRole=\"button\"\n              accessibilityState={newAccessibilityState}\n              testID={testID}\n              style={{ borderRadius }}\n            >\n              <View\n                style={[\n                  styles.standard,\n                  {\n                    width: extendedWidth,\n                    borderRadius,\n                  },\n                ]}\n              />\n            </TouchableRipple>\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n\n      <Animated.View\n        style={[styles.iconWrapper, combinedStyles.iconWrapper]}\n        pointerEvents=\"none\"\n      >\n        <Icon source={icon} size={24} color={foregroundColor} />\n      </Animated.View>\n\n      <View pointerEvents=\"none\">\n        <AnimatedText\n          variant=\"labelLarge\"\n          numberOfLines={1}\n          onTextLayout={isIOS ? onTextLayout : undefined}\n          ellipsizeMode={'tail'}\n          style={[\n            {\n              [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic\n                ? textWidth - SIZE + borderRadius / (isV3 ? 1 : 2)\n                : borderRadius,\n            },\n            {\n              minWidth: textWidth,\n              top: -SIZE / 2 - textHeight / 2,\n              opacity: animFAB.interpolate({\n                inputRange: propForDirection([distance, 0.7 * distance, 0]),\n                outputRange: propForDirection([1, 0, 0]),\n              }),\n              transform: [\n                {\n                  translateX: animFAB.interpolate({\n                    inputRange: propForDirection([distance, 0]),\n                    outputRange: propForDirection([0, SIZE]),\n                  }),\n                },\n              ],\n            },\n            styles.label,\n            uppercase && styles.uppercaseLabel,\n            textStyle,\n          ]}\n        >\n          {label}\n        </AnimatedText>\n      </View>\n\n      {!isIOS && (\n        // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n        // however during render the text in `FAB` isn't fully visible. In order to get\n        // proper text measurements there is a need to additionaly render that text, but\n        // wrapped in absolutely positioned `ScrollView` which height is 0.\n        <ScrollView style={styles.textPlaceholderContainer}>\n          <Text onTextLayout={onTextLayout}>{label}</Text>\n        </ScrollView>\n      )}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n  },\n  disabled: {\n    elevation: 0,\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n  },\n  shadowWrapper: {\n    elevation: 0,\n  },\n  shadow: {\n    elevation: 6,\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE,\n  },\n  label: {\n    position: 'absolute',\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute',\n  },\n});\n\nexport default withInternalTheme(AnimatedFAB);\n"]},"metadata":{},"sourceType":"module"}