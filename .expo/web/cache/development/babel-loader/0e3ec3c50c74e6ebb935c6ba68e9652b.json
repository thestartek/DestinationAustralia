{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\nimport { DeviceType } from \"./Device.types\";\nvar result = null;\nif (Platform.isDOMAvailable) {\n  var parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\nfunction convertGiBtoBytes(gib) {\n  return Math.round(gib * Math.pow(1024, 3));\n}\nexport default {\n  get isDevice() {\n    return true;\n  },\n  get brand() {\n    return null;\n  },\n  get manufacturer() {\n    return result && result.device.vendor || null;\n  },\n  get modelName() {\n    return result && result.device.model || null;\n  },\n  get deviceYearClass() {\n    return null;\n  },\n  get totalMemory() {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      var _navigator = navigator,\n        deviceMemory = _navigator.deviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures() {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName() {\n    return result && result.os.name || '';\n  },\n  get osVersion() {\n    return result && result.os.version || '';\n  },\n  get osBuildId() {\n    return null;\n  },\n  get osInternalBuildId() {\n    return null;\n  },\n  get deviceName() {\n    return null;\n  },\n  getDeviceTypeAsync: function () {\n    var _getDeviceTypeAsync = _asyncToGenerator(function* () {\n      switch (result.device.type) {\n        case 'mobile':\n          return DeviceType.PHONE;\n        case 'tablet':\n          return DeviceType.TABLET;\n        case 'smarttv':\n          return DeviceType.TV;\n        case 'console':\n        case 'embedded':\n        case 'wearable':\n          return DeviceType.UNKNOWN;\n        default:\n          return DeviceType.DESKTOP;\n      }\n    });\n    function getDeviceTypeAsync() {\n      return _getDeviceTypeAsync.apply(this, arguments);\n    }\n    return getDeviceTypeAsync;\n  }(),\n  isRootedExperimentalAsync: function () {\n    var _isRootedExperimentalAsync = _asyncToGenerator(function* () {\n      return false;\n    });\n    function isRootedExperimentalAsync() {\n      return _isRootedExperimentalAsync.apply(this, arguments);\n    }\n    return isRootedExperimentalAsync;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoDevice.web.ts"],"names":[],"mappings":";AAAA,SAAS,QAAQ,QAAQ,mBAAmB;AAC5C,OAAO,QAAQ,MAAM,cAAc;AAEnC,SAAS,UAAU;AAInB,IAAI,MAAM,GAAQ,IAAI;AACtB,IAAI,QAAQ,CAAC,cAAc,EAAE;EAC3B,IAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;EACvD,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE;AAC5B;AAED,SAAS,iBAAiB,CAAC,GAAW,EAAA;EACpC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,YAAG,IAAI,EAAI,CAAC,EAAC;AACpC;AAEA,eAAe;EACb,IAAI,QAAQ,GAAA;IACV,OAAO,IAAI;EACb,CAAC;EACD,IAAI,KAAK,GAAA;IACP,OAAO,IAAI;EACb,CAAC;EACD,IAAI,YAAY,GAAA;IACd,OAAQ,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,IAAK,IAAI;EACjD,CAAC;EACD,IAAI,SAAS,GAAA;IACX,OAAQ,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,IAAK,IAAI;EAChD,CAAC;EACD,IAAI,eAAe,GAAA;IACjB,OAAO,IAAI;EACb,CAAC;EACD,IAAI,WAAW,GAAA;IACb,IAAI,QAAQ,CAAC,cAAc,IAAI,cAAc,IAAI,SAAS,EAAE;MAC1D,iBAAyB,SAAsC;QAAvD,YAAY,cAAZ,YAAY;MACpB,OAAO,iBAAiB,CAAC,YAAY,CAAC;IACvC;IACD,OAAO,IAAI;EACb,CAAC;EACD,IAAI,yBAAyB,GAAA;IAC3B,OAAO,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,YAAY,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,IAAI;EAC7E,CAAC;EACD,IAAI,MAAM,GAAA;IACR,OAAQ,MAAM,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,IAAK,EAAE;EACzC,CAAC;EACD,IAAI,SAAS,GAAA;IACX,OAAQ,MAAM,IAAI,MAAM,CAAC,EAAE,CAAC,OAAO,IAAK,EAAE;EAC5C,CAAC;EACD,IAAI,SAAS,GAAA;IACX,OAAO,IAAI;EACb,CAAC;EACD,IAAI,iBAAiB,GAAA;IACnB,OAAO,IAAI;EACb,CAAC;EACD,IAAI,UAAU,GAAA;IACZ,OAAO,IAAI;EACb,CAAC;EACK,kBAAkB;IAAA,yDAAA;MACtB,QAAQ,MAAM,CAAC,MAAM,CAAC,IAAI;QACxB,KAAK,QAAQ;UACX,OAAO,UAAU,CAAC,KAAK;QACzB,KAAK,QAAQ;UACX,OAAO,UAAU,CAAC,MAAM;QAC1B,KAAK,SAAS;UACZ,OAAO,UAAU,CAAC,EAAE;QACtB,KAAK,SAAS;QACd,KAAK,UAAU;QACf,KAAK,UAAU;UACb,OAAO,UAAU,CAAC,OAAO;QAC3B;UACE,OAAO,UAAU,CAAC,OAAO;MAAC;IAEhC,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EACK,yBAAyB;IAAA,gEAAA;MAC7B,OAAO,KAAK;IACd,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;CACF","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\n\nimport { DeviceType } from './Device.types';\n\ntype NavigatorWithDeviceMemory = Navigator & { deviceMemory: number };\n\nlet result: any = null;\nif (Platform.isDOMAvailable) {\n  const parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nfunction convertGiBtoBytes(gib: number): number {\n  return Math.round(gib * 1024 ** 3);\n}\n\nexport default {\n  get isDevice(): boolean {\n    return true;\n  },\n  get brand(): null {\n    return null;\n  },\n  get manufacturer(): null {\n    return (result && result.device.vendor) || null;\n  },\n  get modelName(): string | null {\n    return (result && result.device.model) || null;\n  },\n  get deviceYearClass(): null {\n    return null;\n  },\n  get totalMemory(): number | null {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      const { deviceMemory } = navigator as NavigatorWithDeviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures(): string[] | null {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName(): string {\n    return (result && result.os.name) || '';\n  },\n  get osVersion(): string {\n    return (result && result.os.version) || '';\n  },\n  get osBuildId(): null {\n    return null;\n  },\n  get osInternalBuildId(): null {\n    return null;\n  },\n  get deviceName(): null {\n    return null;\n  },\n  async getDeviceTypeAsync(): Promise<DeviceType> {\n    switch (result.device.type) {\n      case 'mobile':\n        return DeviceType.PHONE;\n      case 'tablet':\n        return DeviceType.TABLET;\n      case 'smarttv':\n        return DeviceType.TV;\n      case 'console':\n      case 'embedded':\n      case 'wearable':\n        return DeviceType.UNKNOWN;\n      default:\n        return DeviceType.DESKTOP;\n    }\n  },\n  async isRootedExperimentalAsync(): Promise<boolean> {\n    return false;\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}