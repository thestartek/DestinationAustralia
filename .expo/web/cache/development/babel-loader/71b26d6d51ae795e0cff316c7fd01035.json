{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { EventEmitter, CodedError, UnavailabilityError } from 'expo-modules-core';\nimport NotificationsHandlerModule from \"./NotificationsHandlerModule\";\nexport var NotificationTimeoutError = function (_CodedError) {\n  _inherits(NotificationTimeoutError, _CodedError);\n  var _super = _createSuper(NotificationTimeoutError);\n  function NotificationTimeoutError(notificationId, notification) {\n    var _this;\n    _classCallCheck(this, NotificationTimeoutError);\n    _this = _super.call(this, 'ERR_NOTIFICATION_TIMEOUT', \"Notification handling timed out for ID \" + notificationId + \".\");\n    _this.info = {\n      id: notificationId,\n      notification: notification\n    };\n    return _this;\n  }\n  return _createClass(NotificationTimeoutError);\n}(CodedError);\nvar notificationEmitter = new EventEmitter(NotificationsHandlerModule);\nvar handleNotificationEventName = 'onHandleNotification';\nvar handleNotificationTimeoutEventName = 'onHandleNotificationTimeout';\nvar handleSubscription = null;\nvar handleTimeoutSubscription = null;\nexport function setNotificationHandler(handler) {\n  if (handleSubscription) {\n    handleSubscription.remove();\n    handleSubscription = null;\n  }\n  if (handleTimeoutSubscription) {\n    handleTimeoutSubscription.remove();\n    handleTimeoutSubscription = null;\n  }\n  if (handler) {\n    handleSubscription = notificationEmitter.addListener(handleNotificationEventName, function () {\n      var _ref2 = _asyncToGenerator(function* (_ref) {\n        var id = _ref.id,\n          notification = _ref.notification;\n        if (!NotificationsHandlerModule.handleNotificationAsync) {\n          handler.handleError == null ? void 0 : handler.handleError(id, new UnavailabilityError('Notifications', 'handleNotificationAsync'));\n          return;\n        }\n        try {\n          var behavior = yield handler.handleNotification(notification);\n          yield NotificationsHandlerModule.handleNotificationAsync(id, behavior);\n          handler.handleSuccess == null ? void 0 : handler.handleSuccess(id);\n        } catch (error) {\n          handler.handleError == null ? void 0 : handler.handleError(id, error);\n        }\n      });\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    handleTimeoutSubscription = notificationEmitter.addListener(handleNotificationTimeoutEventName, function (_ref3) {\n      var id = _ref3.id,\n        notification = _ref3.notification;\n      return handler.handleError == null ? void 0 : handler.handleError(id, new NotificationTimeoutError(id, notification));\n    });\n  }\n}","map":{"version":3,"sources":["../src/NotificationsHandler.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,YAAY,EAAgB,UAAU,EAAE,mBAAmB,QAAQ,mBAAmB;AAG/F,OAAO,0BAA0B;AAEjC,WAAa,wBAAyB;EAAA;EAAA;EAEpC,kCAAY,cAAsB,EAAE,YAA0B,EAAA;IAAA;IAAA;IAC5D,0BAAM,0BAA0B,8CAA4C,cAAc;IAC1F,MAAK,IAAI,GAAG;MAAE,EAAE,EAAE,cAAc;MAAE,YAAY,EAAZ;IAAY,CAAE;IAAC;EACnD;EAAC;AAAA,EAL2C,UAAU;AAwBxD,IAAM,mBAAmB,GAAG,IAAI,YAAY,CAAC,0BAA0B,CAAC;AAExE,IAAM,2BAA2B,GAAG,sBAAsB;AAC1D,IAAM,kCAAkC,GAAG,6BAA6B;AAExE,IAAI,kBAAkB,GAAwB,IAAI;AAClD,IAAI,yBAAyB,GAAwB,IAAI;AAEzD,OAAM,SAAU,sBAAsB,CAAC,OAAmC,EAAA;EACxE,IAAI,kBAAkB,EAAE;IACtB,kBAAkB,CAAC,MAAM,EAAE;IAC3B,kBAAkB,GAAG,IAAI;EAC1B;EACD,IAAI,yBAAyB,EAAE;IAC7B,yBAAyB,CAAC,MAAM,EAAE;IAClC,yBAAyB,GAAG,IAAI;EACjC;EAED,IAAI,OAAO,EAAE;IACX,kBAAkB,GAAG,mBAAmB,CAAC,WAAW,CAClD,2BAA2B;MAAA,8BAC3B,iBAA+B;QAAA,IAAtB,EAAE,QAAF,EAAE;UAAE,YAAY,QAAZ,YAAY;QACvB,IAAI,CAAC,0BAA0B,CAAC,uBAAuB,EAAE;UACvD,OAAO,CAAC,WAAW,oBAAnB,OAAO,CAAC,WAAW,CACjB,EAAE,EACF,IAAI,mBAAmB,CAAC,eAAe,EAAE,yBAAyB,CAAC,CACpE;UACD;QACD;QAED,IAAI;UACF,IAAM,QAAQ,SAAS,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC;UAC/D,MAAM,0BAA0B,CAAC,uBAAuB,CAAC,EAAE,EAAE,QAAQ,CAAC;UACtE,OAAO,CAAC,aAAa,oBAArB,OAAO,CAAC,aAAa,CAAG,EAAE,CAAC;SAC5B,CAAC,OAAO,KAAK,EAAE;UACd,OAAO,CAAC,WAAW,oBAAnB,OAAO,CAAC,WAAW,CAAG,EAAE,EAAE,KAAK,CAAC;QACjC;MACH,CAAC;MAAA;QAAA;MAAA;IAAA,IACF;IAED,yBAAyB,GAAG,mBAAmB,CAAC,WAAW,CACzD,kCAAkC,EAClC;MAAA,IAAG,EAAE,SAAF,EAAE;QAAE,YAAY,SAAZ,YAAY;MAAA,OACjB,OAAO,CAAC,WAAW,oBAAnB,OAAO,CAAC,WAAW,CAAG,EAAE,EAAE,IAAI,wBAAwB,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;IAAA,EAC5E;EACF;AACH","sourcesContent":["import { EventEmitter, Subscription, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationBehavior } from './Notifications.types';\nimport NotificationsHandlerModule from './NotificationsHandlerModule';\n\nexport class NotificationTimeoutError extends CodedError {\n  info: { notification: Notification; id: string };\n  constructor(notificationId: string, notification: Notification) {\n    super('ERR_NOTIFICATION_TIMEOUT', `Notification handling timed out for ID ${notificationId}.`);\n    this.info = { id: notificationId, notification };\n  }\n}\n\nexport type NotificationHandlingError = NotificationTimeoutError | Error;\n\nexport interface NotificationHandler {\n  handleNotification: (notification: Notification) => Promise<NotificationBehavior>;\n  handleSuccess?: (notificationId: string) => void;\n  handleError?: (notificationId: string, error: NotificationHandlingError) => void;\n}\n\ntype HandleNotificationEvent = {\n  id: string;\n  notification: Notification;\n};\n\ntype HandleNotificationTimeoutEvent = HandleNotificationEvent;\n\n// Web uses SyntheticEventEmitter\nconst notificationEmitter = new EventEmitter(NotificationsHandlerModule);\n\nconst handleNotificationEventName = 'onHandleNotification';\nconst handleNotificationTimeoutEventName = 'onHandleNotificationTimeout';\n\nlet handleSubscription: Subscription | null = null;\nlet handleTimeoutSubscription: Subscription | null = null;\n\nexport function setNotificationHandler(handler: NotificationHandler | null): void {\n  if (handleSubscription) {\n    handleSubscription.remove();\n    handleSubscription = null;\n  }\n  if (handleTimeoutSubscription) {\n    handleTimeoutSubscription.remove();\n    handleTimeoutSubscription = null;\n  }\n\n  if (handler) {\n    handleSubscription = notificationEmitter.addListener<HandleNotificationEvent>(\n      handleNotificationEventName,\n      async ({ id, notification }) => {\n        if (!NotificationsHandlerModule.handleNotificationAsync) {\n          handler.handleError?.(\n            id,\n            new UnavailabilityError('Notifications', 'handleNotificationAsync')\n          );\n          return;\n        }\n\n        try {\n          const behavior = await handler.handleNotification(notification);\n          await NotificationsHandlerModule.handleNotificationAsync(id, behavior);\n          handler.handleSuccess?.(id);\n        } catch (error) {\n          handler.handleError?.(id, error);\n        }\n      }\n    );\n\n    handleTimeoutSubscription = notificationEmitter.addListener<HandleNotificationTimeoutEvent>(\n      handleNotificationTimeoutEventName,\n      ({ id, notification }) =>\n        handler.handleError?.(id, new NotificationTimeoutError(id, notification))\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}