{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport color from 'color';\nvar getBorderColor = function getBorderColor(_ref) {\n  var theme = _ref.theme,\n    disabled = _ref.disabled;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  return undefined;\n};\nvar getBackgroundColor = function getBackgroundColor(_ref2) {\n  var theme = _ref2.theme,\n    isMode = _ref2.isMode,\n    disabled = _ref2.disabled,\n    selected = _ref2.selected,\n    customContainerColor = _ref2.customContainerColor;\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n  return undefined;\n};\nvar getIconColor = function getIconColor(_ref3) {\n  var theme = _ref3.theme,\n    isMode = _ref3.isMode,\n    disabled = _ref3.disabled,\n    selected = _ref3.selected,\n    customIconColor = _ref3.customIconColor;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n  return theme.colors.text;\n};\nvar getRippleColor = function getRippleColor(_ref4) {\n  var theme = _ref4.theme,\n    iconColor = _ref4.iconColor;\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\nexport var getIconButtonColor = function getIconButtonColor(_ref5) {\n  var theme = _ref5.theme,\n    disabled = _ref5.disabled,\n    mode = _ref5.mode,\n    selected = _ref5.selected,\n    customIconColor = _ref5.customIconColor,\n    customContainerColor = _ref5.customContainerColor;\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n  var baseIconColorProps = {\n    theme: theme,\n    isMode: isMode,\n    disabled: disabled,\n    selected: selected\n  };\n  var iconColor = getIconColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n    customIconColor: customIconColor\n  }));\n  return {\n    iconColor: iconColor,\n    backgroundColor: getBackgroundColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n      customContainerColor: customContainerColor\n    })),\n    rippleColor: getRippleColor({\n      theme: theme,\n      iconColor: iconColor\n    }),\n    borderColor: getBorderColor({\n      theme: theme,\n      disabled: disabled\n    })\n  };\n};","map":{"version":3,"sources":["utils.ts"],"names":["color","getBorderColor","theme","disabled","isV3","colors","surfaceDisabled","outline","undefined","getBackgroundColor","isMode","selected","customContainerColor","primary","surfaceVariant","secondaryContainer","inverseSurface","getIconColor","customIconColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","onSurfaceVariant","inverseOnSurface","text","getRippleColor","iconColor","alpha","rgb","string","getIconButtonColor","mode","modeToCompare","baseIconColorProps","backgroundColor","rippleColor","borderColor"],"mappings":"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","sourcesContent":["import color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\ntype BaseProps = {\n  theme: InternalTheme;\n  isMode: (mode: IconButtonMode) => boolean;\n  disabled?: boolean;\n  selected?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  disabled,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n}) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customContainerColor,\n}: BaseProps & { customContainerColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nconst getIconColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customIconColor,\n}: BaseProps & { customIconColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nconst getRippleColor = ({\n  theme,\n  iconColor,\n}: {\n  theme: InternalTheme;\n  iconColor: string;\n}) => {\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport const getIconButtonColor = ({\n  theme,\n  disabled,\n  mode,\n  selected,\n  customIconColor,\n  customContainerColor,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n  selected?: boolean;\n  mode?: IconButtonMode;\n  customIconColor?: string;\n  customContainerColor?: string;\n}) => {\n  const isMode = (modeToCompare: IconButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected,\n  };\n\n  const iconColor = getIconColor({\n    ...baseIconColorProps,\n    customIconColor,\n  });\n\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor({\n      ...baseIconColorProps,\n      customContainerColor,\n    }),\n    rippleColor: getRippleColor({ theme, iconColor }),\n    borderColor: getBorderColor({ theme, disabled }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}