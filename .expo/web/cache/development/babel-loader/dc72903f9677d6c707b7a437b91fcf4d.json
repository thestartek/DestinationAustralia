{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar RNAppModule = NativeModules.RNAppModule;\nvar GANativeEventEmitter = function (_NativeEventEmitter) {\n  _inherits(GANativeEventEmitter, _NativeEventEmitter);\n  var _super = _createSuper(GANativeEventEmitter);\n  function GANativeEventEmitter() {\n    var _this;\n    _classCallCheck(this, GANativeEventEmitter);\n    _this = _super.call(this, RNAppModule);\n    _defineProperty(_assertThisInitialized(_this), \"ready\", void 0);\n    _this.ready = false;\n    return _this;\n  }\n  _createClass(GANativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var _this2 = this;\n      if (!this.ready) {\n        RNAppModule.eventsNotifyReady(true);\n        this.ready = true;\n      }\n      RNAppModule.eventsAddListener(eventType);\n      var subscription = _get(_getPrototypeOf(GANativeEventEmitter.prototype), \"addListener\", this).call(this, \"rnapp_\" + eventType, listener, context);\n      subscription.eventType = \"rnapp_\" + eventType;\n      var originalRemove = subscription.remove;\n      var newRemove = function newRemove() {\n        RNAppModule.eventsRemoveListener(eventType, false);\n        if (_get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeSubscription\", _this2) != null) {\n          _get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeSubscription\", _this2).call(_this2, subscription);\n        } else if (originalRemove != null) {\n          originalRemove();\n        }\n      };\n      subscription.remove = newRemove;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      RNAppModule.eventsRemoveListener(eventType, true);\n      _get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeAllListeners\", this).call(this, \"rnapp_\" + eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      RNAppModule.eventsRemoveListener(subscription.eventType.replace('rnapp_', ''), false);\n      if (_get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeSubscription\", this) != null) {\n        _get(_getPrototypeOf(GANativeEventEmitter.prototype), \"removeSubscription\", this).call(this, subscription);\n      }\n    }\n  }]);\n  return GANativeEventEmitter;\n}(NativeEventEmitter);\nexport var GoogleMobileAdsNativeEventEmitter = new GANativeEventEmitter();","map":{"version":3,"sources":["GoogleMobileAdsNativeEventEmitter.ts"],"names":["RNAppModule","NativeModules","GANativeEventEmitter","NativeEventEmitter","constructor","ready","addListener","eventType","listener","context","eventsNotifyReady","eventsAddListener","subscription","originalRemove","remove","newRemove","eventsRemoveListener","removeAllListeners","removeSubscription","replace","GoogleMobileAdsNativeEventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAQA,WAAAA,GAAgBC,aAAa,CAA7BD,WAAAA;AAA6B,IAE/BE,oBAAoB;EAAA;EAAA;EAGxBE,gCAAc;IAAA;IAAA;IACZ,0BAAMJ,WAAW;IAAE,eAAA,gCAAA,OAAA,EAAA,KAAA,CAAA,CAAA;IACnB,MAAKK,KAAK,GAAG,KAAK;IAAA;EACpB;EAAA;IAAA;IAAA,OAEAC,qBACEC,SAAiB,EACjBC,QAA+C,EAC/CC,OAAiC,EACjC;MAAA;MACA,IAAI,CAAC,IAAI,CAACJ,KAAK,EAAE;QACfL,WAAW,CAACU,iBAAiB,CAAC,IAAI,CAAC;QACnC,IAAI,CAACL,KAAK,GAAG,IAAI;MACnB;MACAL,WAAW,CAACW,iBAAiB,CAACJ,SAAS,CAAC;MAExC,IAAMK,YAAY,oGAA8BL,SAAU,EAAGC,QAAQ,EAAEC,OAAO,CAAC;MAO/EG,YAAY,CAACL,SAAS,cAAYA,SAAW;MAI7C,IAAMM,cAAc,GAAGD,YAAY,CAACE,MAAM;MAC1C,IAAMC,SAAS,GAAG,SAAZA,SAAS,GAAS;QACtBf,WAAW,CAACgB,oBAAoB,CAACT,SAAS,EAAE,KAAK,CAAC;QAClD,IAAI,uFAA4B,IAAI,EAAE;UAEpC,iGAAyBK,YAAY;QACvC,CAAC,MAAM,IAAIC,cAAc,IAAI,IAAI,EAAE;UAEjCA,cAAc,EAAE;QAClB;MACF,CAAC;MACDD,YAAY,CAACE,MAAM,GAAGC,SAAS;MAC/B,OAAOH,YAAY;IACrB;EAAA;IAAA;IAAA,OAEAK,4BAAmBV,SAAiB,EAAE;MACpCP,WAAW,CAACgB,oBAAoB,CAACT,SAAS,EAAE,IAAI,CAAC;MACjD,wGAAkCA,SAAU;IAC9C;EAAA;IAAA;IAAA,OAGAW,4BAAmBN,YAAiC,EAAE;MACpDZ,WAAW,CAACgB,oBAAoB,CAACJ,YAAY,CAACL,SAAS,CAACY,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC;MACrF,IAAI,qFAA4B,IAAI,EAAE;QACpC,6FAAyBP,YAAY;MACvC;IACF;EAAA;EAAA;AAAA,EAxDiCT,kBAAkB;AA2DrD,OAAO,IAAMiB,iCAAiC,GAAG,IAAIlB,oBAAoB,EAAE","sourceRoot":"../../src","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nconst {\n  RNAppModule\n} = NativeModules;\nclass GANativeEventEmitter extends NativeEventEmitter {\n  constructor() {\n    super(RNAppModule);\n    _defineProperty(this, \"ready\", void 0);\n    this.ready = false;\n  }\n  addListener(eventType, listener, context) {\n    if (!this.ready) {\n      RNAppModule.eventsNotifyReady(true);\n      this.ready = true;\n    }\n    RNAppModule.eventsAddListener(eventType);\n    const subscription = super.addListener(`rnapp_${eventType}`, listener, context);\n\n    // React Native 0.65+ altered EventEmitter:\n    // - removeSubscription is gone\n    // - addListener returns an unsubscriber instead of a more complex object with eventType etc\n\n    // make sure eventType for backwards compatibility just in case\n    subscription.eventType = `rnapp_${eventType}`;\n\n    // New style is to return a remove function on the object, just in csae people call that,\n    // we will modify it to do our native unsubscription then call the original\n    const originalRemove = subscription.remove;\n    const newRemove = () => {\n      RNAppModule.eventsRemoveListener(eventType, false);\n      if (super.removeSubscription != null) {\n        // This is for RN <= 0.64 - 65 and greater no longer have removeSubscription\n        super.removeSubscription(subscription);\n      } else if (originalRemove != null) {\n        // This is for RN >= 0.65\n        originalRemove();\n      }\n    };\n    subscription.remove = newRemove;\n    return subscription;\n  }\n  removeAllListeners(eventType) {\n    RNAppModule.eventsRemoveListener(eventType, true);\n    super.removeAllListeners(`rnapp_${eventType}`);\n  }\n\n  // This is likely no longer ever called, but it is here for backwards compatibility with RN <= 0.64\n  removeSubscription(subscription) {\n    RNAppModule.eventsRemoveListener(subscription.eventType.replace('rnapp_', ''), false);\n    if (super.removeSubscription != null) {\n      super.removeSubscription(subscription);\n    }\n  }\n}\nexport const GoogleMobileAdsNativeEventEmitter = new GANativeEventEmitter();\n//# sourceMappingURL=GoogleMobileAdsNativeEventEmitter.js.map"]},"metadata":{},"sourceType":"module"}