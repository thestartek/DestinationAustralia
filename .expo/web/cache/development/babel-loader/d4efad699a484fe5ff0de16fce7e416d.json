{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"statusBarHeight\", \"style\", \"dark\", \"mode\", \"elevated\"],\n  _excluded2 = [\"height\", \"elevation\", \"backgroundColor\", \"zIndex\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { withInternalTheme } from \"../../core/theming\";\nimport shadow from \"../../styles/shadow\";\nimport { Appbar } from \"./Appbar\";\nimport { DEFAULT_APPBAR_HEIGHT, getAppbarColor, modeAppbarHeight } from \"./utils\";\nvar AppbarHeader = function AppbarHeader(_ref) {\n  var statusBarHeight = _ref.statusBarHeight,\n    style = _ref.style,\n    dark = _ref.dark,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? Platform.OS === 'ios' ? 'center-aligned' : 'small' : _ref$mode,\n    _ref$elevated = _ref.elevated,\n    elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isV3 = rest.theme.isV3;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$height = _ref2.height,\n    height = _ref2$height === void 0 ? isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT : _ref2$height,\n    _ref2$elevation = _ref2.elevation,\n    elevation = _ref2$elevation === void 0 ? isV3 ? elevated ? 2 : 0 : 4 : _ref2$elevation,\n    customBackground = _ref2.backgroundColor,\n    _ref2$zIndex = _ref2.zIndex,\n    zIndex = _ref2$zIndex === void 0 ? isV3 && elevated ? 1 : 0 : _ref2$zIndex,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var backgroundColor = getAppbarColor(rest.theme, elevation, customBackground, elevated);\n  var _useSafeAreaInsets = useSafeAreaInsets(),\n    top = _useSafeAreaInsets.top,\n    left = _useSafeAreaInsets.left,\n    right = _useSafeAreaInsets.right;\n  return React.createElement(View, {\n    style: [{\n      backgroundColor: backgroundColor,\n      zIndex: zIndex,\n      elevation: elevation,\n      paddingTop: statusBarHeight !== null && statusBarHeight !== void 0 ? statusBarHeight : top,\n      paddingHorizontal: Math.max(left, right)\n    }, shadow(elevation)]\n  }, React.createElement(Appbar, _extends({\n    style: [{\n      height: height,\n      backgroundColor: backgroundColor\n    }, styles.appbar, restStyle],\n    dark: dark\n  }, isV3 && {\n    mode: mode\n  }, rest)));\n};\nAppbarHeader.displayName = 'Appbar.Header';\nvar styles = StyleSheet.create({\n  appbar: {\n    elevation: 0\n  }\n});\nexport default withInternalTheme(AppbarHeader);\nvar AppbarHeaderWithTheme = withInternalTheme(AppbarHeader);\nexport { AppbarHeaderWithTheme as AppbarHeader };","map":{"version":3,"sources":["AppbarHeader.tsx"],"names":["React","useSafeAreaInsets","withInternalTheme","shadow","Appbar","DEFAULT_APPBAR_HEIGHT","getAppbarColor","modeAppbarHeight","AppbarHeader","statusBarHeight","style","dark","mode","Platform","OS","elevated","rest","isV3","theme","height","elevation","backgroundColor","customBackground","zIndex","restStyle","StyleSheet","flatten","top","left","right","paddingTop","paddingHorizontal","Math","max","styles","appbar","displayName","create","AppbarHeaderWithTheme"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAAA;AAG9B,SAASC,iBAAiB,QAAQ,gCAAgC;AAElE,SAASC,iBAAiB;AAC1B,OAAOC,MAAM;AAEb,SAASC,MAAM;AACf,SACEC,qBAAqB,EACrBC,cAAc,EACdC,gBAAgB;AAyFlB,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAG,IAAA,EAQR;EARS,IAEpBC,eAAe,GAMT,IAAA,CANNA,eAAe;IACfC,KAAK,GAKC,IAAA,CALNA,KAAK;IACLC,IAAI,GAIE,IAAA,CAJNA,IAAI;IAAA,YAIE,IAAA,CAHNC,IAAI;IAAJA,IAAI,0BAAGC,QAAQ,CAACC,EAAE,KAAK,KAAK,GAAG,gBAAgB,GAAG,OAAO;IAAA,gBAGnD,IAAA,CAFNC,QAAQ;IAARA,QAAQ,8BAAG,KAAK;IACbC,IAAAA,4BACG,IAAA;EACN,IAAQC,IAAAA,GAASD,IAAI,CAACE,KAAK,CAAnBD,IAAAA;EAER,YAMeQ,UAAU,CAACC,OAAO,CAAChB,KAAK,CAAC,IAAI,CAAC,CAAC;IAAA,qBAL5CS,MAAM;IAANA,MAAM,6BAAGF,IAAI,GAAGV,gBAAgB,CAACK,IAAI,CAAC,GAAGP,qBAAqB;IAAA,wBAC9De,SAAS;IAATA,SAAS,gCAAGH,IAAI,GAAIF,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAI,CAAC;IACxBO,gBAAgB,SAAjCD,eAAe;IAAA,qBACfE,MAAM;IAANA,MAAM,6BAAGN,IAAI,IAAIF,QAAQ,GAAG,CAAC,GAAG,CAAC;IAC9BS,SAAAA;EAGL,IAAMH,eAAe,GAAGf,cAAc,CACpCU,IAAI,CAACE,KAAK,EACVE,SAAS,EACTE,gBAAgB,EAChBP,QAAQ,CACT;EAED,yBAA6Bd,iBAAiB,EAAE;IAAxC0B,GAAG,sBAAHA,GAAG;IAAEC,IAAI,sBAAJA,IAAI;IAAEC,KAAAA,sBAAAA,KAAAA;EAEnB,OACE,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;IACH,KAAK,EACH,CACE;MACER,eAAe,EAAfA,eAAe;MACfE,MAAM,EAANA,MAAM;MACNH,SAAS,EAATA,SAAS;MACTU,UAAU,EAAErB,eAAe,KAAA,IAAA,IAAfA,eAAe,KAAA,KAAA,CAAA,GAAfA,eAAe,GAAIkB,GAAG;MAClCI,iBAAiB,EAAEC,IAAI,CAACC,GAAG,CAACL,IAAI,EAAEC,KAAK;IACzC,CAAC,EACD1B,MAAM,CAACiB,SAAS,CAAC;EAEpB,CAAA,EAED,KAAA,CAAA,aAAA,CAAC,MAAM,EAAA,QAAA,CAAA;IACL,KAAK,EAAE,CAAC;MAAED,MAAM,EAANA,MAAM;MAAEE,eAAAA,EAAAA;IAAgB,CAAC,EAAEa,MAAM,CAACC,MAAM,EAAEX,SAAS,CAAE;IAC/D,IAAI,EAAEb;EAAK,CAAA,EACNM,IAAI,IAAI;IACXL,IAAAA,EAAAA;EACF,CAAC,EACGI,IAAI,CAAA,CACR,CACG;AAEX,CAAC;AAEDR,YAAY,CAAC4B,WAAW,GAAG,eAAe;AAE1C,IAAMF,MAAM,GAAGT,UAAU,CAACY,MAAM,CAAC;EAC/BF,MAAM,EAAE;IACNf,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAelB,iBAAiB,CAACM,YAAY,CAAC;AAG9C,IAAM8B,qBAAqB,GAAGpC,iBAAiB,CAACM,YAAY,CAAC;AAE7D,SAAS8B,qBAAqB,IAAI9B,YAAY","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport { withInternalTheme } from '../../core/theming';\nimport shadow from '../../styles/shadow';\nimport type { InternalTheme } from '../../types';\nimport { Appbar } from './Appbar';\nimport {\n  DEFAULT_APPBAR_HEIGHT,\n  getAppbarColor,\n  modeAppbarHeight,\n} from './utils';\n\nexport type Props = React.ComponentProps<typeof Appbar> & {\n  /**\n   * Whether the background color is a dark color. A dark header will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Extra padding to add at the top of header to account for translucent status bar.\n   * This is automatically handled on iOS >= 11 including iPhone X using `SafeAreaView`.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to disable the default behaviour, and customize the height.\n   */\n  statusBarHeight?: number;\n  /**\n   * Content of the header.\n   */\n  children: React.ReactNode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the Appbar.\n   * - `small` - Appbar with default height (56).\n   * - `medium` - Appbar with medium height (112).\n   * - `large` - Appbar with large height (152).\n   * - `center-aligned` - Appbar with default height and center-aligned title.\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether Appbar background should have the elevation along with primary color pigment.\n   */\n  elevated?: boolean;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to use as a header at the top of the screen.\n * It can contain the screen title, controls such as navigation buttons, menu button etc.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/appbar-small.png\" />\n *     <figcaption>small</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/appbar-medium.png\" />\n *     <figcaption>medium</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/appbar-large.png\" />\n *     <figcaption>large</figcaption>\n *   </figure>\n *  <figure>\n *     <img class=\"small\" src=\"screenshots/appbar-center-aligned.png\" />\n *     <figcaption>center-aligned</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const _goBack = () => console.log('Went back');\n *\n *   const _handleSearch = () => console.log('Searching');\n *\n *   const _handleMore = () => console.log('Shown more');\n *\n *   return (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={_goBack} />\n *       <Appbar.Content title=\"Title\" />\n *       <Appbar.Action icon=\"magnify\" onPress={_handleSearch} />\n *       <Appbar.Action icon=\"dots-vertical\" onPress={_handleMore} />\n *     </Appbar.Header>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarHeader = ({\n  // Don't use default props since we check it to know whether we should use SafeAreaView\n  statusBarHeight,\n  style,\n  dark,\n  mode = Platform.OS === 'ios' ? 'center-aligned' : 'small',\n  elevated = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = rest.theme;\n\n  const {\n    height = isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT,\n    elevation = isV3 ? (elevated ? 2 : 0) : 4,\n    backgroundColor: customBackground,\n    zIndex = isV3 && elevated ? 1 : 0,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  const backgroundColor = getAppbarColor(\n    rest.theme,\n    elevation,\n    customBackground,\n    elevated\n  );\n\n  const { top, left, right } = useSafeAreaInsets();\n\n  return (\n    <View\n      style={\n        [\n          {\n            backgroundColor,\n            zIndex,\n            elevation,\n            paddingTop: statusBarHeight ?? top,\n            paddingHorizontal: Math.max(left, right),\n          },\n          shadow(elevation),\n        ] as StyleProp<ViewStyle>\n      }\n    >\n      <Appbar\n        style={[{ height, backgroundColor }, styles.appbar, restStyle]}\n        dark={dark}\n        {...(isV3 && {\n          mode,\n        })}\n        {...rest}\n      />\n    </View>\n  );\n};\n\nAppbarHeader.displayName = 'Appbar.Header';\n\nconst styles = StyleSheet.create({\n  appbar: {\n    elevation: 0,\n  },\n});\n\nexport default withInternalTheme(AppbarHeader);\n\n// @component-docs ignore-next-line\nconst AppbarHeaderWithTheme = withInternalTheme(AppbarHeader);\n// @component-docs ignore-next-line\nexport { AppbarHeaderWithTheme as AppbarHeader };\n"]},"metadata":{},"sourceType":"module"}