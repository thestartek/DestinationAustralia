{"ast":null,"code":"import binaryToBase64 from 'react-native/Libraries/Utilities/binaryToBase64';\nimport { promiseDefer } from \"./promise\";\nvar CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nexport function btoa(input) {\n  var map;\n  var i = 0;\n  var block = 0;\n  var output = '';\n  for (block = 0, i = 0, map = CHARS; input.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n    var charCode = input.charCodeAt(i += 3 / 4);\n    if (charCode > 0xff) {\n      throw new Error(\"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\nexport function atob(input) {\n  var i = 0;\n  var bc = 0;\n  var bs = 0;\n  var buffer;\n  var output = '';\n  var str = input.replace(/[=]+$/, '');\n  if (str.length % 4 === 1) {\n    throw new Error(\"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (bc = 0, bs = 0, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    buffer = CHARS.indexOf(buffer);\n  }\n  return output;\n}\nexport function fromData(data) {\n  if (data instanceof Blob) {\n    var fileReader = new FileReader();\n    var _promiseDefer = promiseDefer(),\n      resolve = _promiseDefer.resolve,\n      reject = _promiseDefer.reject,\n      promise = _promiseDefer.promise;\n    fileReader.readAsDataURL(data);\n    fileReader.onloadend = function onloadend() {\n      resolve({\n        string: fileReader.result,\n        format: 'data_url'\n      });\n    };\n    fileReader.onerror = function onerror(event) {\n      fileReader.abort();\n      reject(event);\n    };\n    return promise;\n  }\n  if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n    return Promise.resolve({\n      string: binaryToBase64(data),\n      format: 'base64'\n    });\n  }\n  throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");\n}","map":{"version":3,"mappings":"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","names":["binaryToBase64","promiseDefer","CHARS","btoa","input","map","i","block","output","charAt","charCode","charCodeAt","Error","atob","bc","bs","buffer","str","replace","length","String","fromCharCode","indexOf","fromData","data","Blob","fileReader","FileReader","resolve","reject","promise","readAsDataURL","onloadend","string","result","format","onerror","event","abort","ArrayBuffer","Uint8Array","Promise"],"sources":["Base64.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}