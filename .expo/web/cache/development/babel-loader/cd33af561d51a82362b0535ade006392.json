{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"buttonColor\", \"textColor\", \"children\", \"accessibilityLabel\", \"accessibilityHint\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"style\", \"theme\", \"uppercase\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { withInternalTheme } from \"../../core/theming\";\nimport ActivityIndicator from \"../ActivityIndicator\";\nimport Icon from \"../Icon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { getButtonColors } from \"./utils\";\nvar Button = function Button(_ref) {\n  var _borderRadius, _StyleSheet$flatten;\n  var disabled = _ref.disabled,\n    compact = _ref.compact,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n    dark = _ref.dark,\n    loading = _ref.loading,\n    icon = _ref.icon,\n    customButtonColor = _ref.buttonColor,\n    customTextColor = _ref.textColor,\n    children = _ref.children,\n    accessibilityLabel = _ref.accessibilityLabel,\n    accessibilityHint = _ref.accessibilityHint,\n    onPress = _ref.onPress,\n    onPressIn = _ref.onPressIn,\n    onPressOut = _ref.onPressOut,\n    onLongPress = _ref.onLongPress,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? !theme.isV3 : _ref$uppercase,\n    contentStyle = _ref.contentStyle,\n    labelStyle = _ref.labelStyle,\n    testID = _ref.testID,\n    accessible = _ref.accessible,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isMode = React.useCallback(function (modeToCompare) {\n    return mode === modeToCompare;\n  }, [mode]);\n  var roundness = theme.roundness,\n    isV3 = theme.isV3,\n    animation = theme.animation;\n  var isElevationEntitled = !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  var initialElevation = isV3 ? 1 : 2;\n  var activeElevation = isV3 ? 2 : 8;\n  var _React$useRef = React.useRef(new Animated.Value(isElevationEntitled ? initialElevation : 0)),\n    elevation = _React$useRef.current;\n  React.useEffect(function () {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n  var handlePressIn = function handlePressIn(e) {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      var scale = animation.scale;\n      Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var handlePressOut = function handlePressOut(e) {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      var scale = animation.scale;\n      Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var borderRadius = (isV3 ? 5 : 1) * roundness;\n  var iconSize = isV3 ? 18 : 16;\n  var _getButtonColors = getButtonColors({\n      customButtonColor: customButtonColor,\n      customTextColor: customTextColor,\n      theme: theme,\n      mode: mode,\n      disabled: disabled,\n      dark: dark\n    }),\n    backgroundColor = _getButtonColors.backgroundColor,\n    borderColor = _getButtonColors.borderColor,\n    textColor = _getButtonColors.textColor,\n    borderWidth = _getButtonColors.borderWidth;\n  var rippleColor = color(textColor).alpha(0.12).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: borderRadius\n  };\n  var touchableStyle = {\n    borderRadius: style ? (_borderRadius = (StyleSheet.flatten(style) || {}).borderRadius) !== null && _borderRadius !== void 0 ? _borderRadius : borderRadius : borderRadius\n  };\n  var _ref2 = StyleSheet.flatten(labelStyle) || {},\n    customLabelColor = _ref2.color,\n    customLabelSize = _ref2.fontSize;\n  var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n  var textStyle = _objectSpread({\n    color: textColor\n  }, font);\n  var iconStyle = ((_StyleSheet$flatten = StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? [styles.iconReverse, isV3 && styles.md3IconReverse, isV3 && isMode('text') && styles.md3IconReverseTextMode] : [styles.icon, isV3 && styles.md3Icon, isV3 && isMode('text') && styles.md3IconTextMode];\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, buttonStyle, style, !isV3 && {\n      elevation: elevation\n    }]\n  }, isV3 && {\n    elevation: elevation\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(View, {\n    style: iconStyle\n  }, React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : iconSize,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(ActivityIndicator, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : iconSize,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, !isV3 && styles.md2Label, isV3 && (isMode('text') ? icon || loading ? styles.md3LabelTextAddons : styles.md3LabelText : styles.md3Label), compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, labelStyle]\n  }, children))));\n};\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12\n  },\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  md2Label: {\n    letterSpacing: 1\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24\n  },\n  md3LabelText: {\n    marginHorizontal: 12\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16\n  }\n});\nexport default withInternalTheme(Button);","map":{"version":3,"sources":["Button.tsx"],"names":["React","color","withInternalTheme","ActivityIndicator","Icon","Surface","TouchableRipple","Text","getButtonColors","Button","disabled","compact","mode","dark","loading","icon","buttonColor","customButtonColor","textColor","customTextColor","children","accessibilityLabel","accessibilityHint","onPress","onPressIn","onPressOut","onLongPress","style","theme","uppercase","isV3","contentStyle","labelStyle","testID","accessible","rest","isMode","useCallback","modeToCompare","roundness","animation","isElevationEntitled","initialElevation","activeElevation","current","elevation","useRef","Animated","Value","useEffect","setValue","handlePressIn","e","scale","timing","toValue","duration","useNativeDriver","start","handlePressOut","borderRadius","iconSize","backgroundColor","borderColor","borderWidth","rippleColor","alpha","rgb","string","buttonStyle","touchableStyle","StyleSheet","flatten","customLabelColor","fontSize","customLabelSize","font","fonts","labelLarge","medium","textStyle","iconStyle","flexDirection","styles","iconReverse","md3IconReverse","md3IconReverseTextMode","md3Icon","md3IconTextMode","button","content","label","md2Label","md3LabelTextAddons","md3LabelText","md3Label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","marginVertical","marginHorizontal","letterSpacing","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { ButtonMode, getButtonColors } from './utils';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline, used for the lowest priority actions, especially when presenting multiple options.\n   * - `outlined` - button with an outline without background, typically used for important, but not primary action – represents medium emphasis.\n   * - `contained` - button with a background color, used for important action, have the most visual impact and high emphasis.\n   * - `elevated` - button with a background color and elevation, used when absolutely necessary e.g. button requires visual separation from a patterned background. @supported Available in v5.x with theme version 3\n   * - `contained-tonal` - button with a secondary background color, an alternative middle ground between contained and outlined buttons. @supported Available in v5.x with theme version 3\n   */\n  mode?: 'text' | 'outlined' | 'contained' | 'elevated' | 'contained-tonal';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for:\n   *  * `contained` mode for theme version 2\n   *  * `contained`, `contained-tonal` and `elevated` modes for theme version 3.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * @deprecated Deprecated in v5.x - use `buttonColor` or `textColor` instead.\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * @supported Available in v5.x\n   * Custom button's background color.\n   */\n  buttonColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Custom button's text color.\n   */\n  textColor?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n\n  /**\n   * @supported Available in v5.x\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * @supported Available in v5.x\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-4.png\" />\n *     <figcaption>Elevated button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-5.png\" />\n *     <figcaption>Contained-tonal button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  buttonColor: customButtonColor,\n  textColor: customTextColor,\n  children,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  style,\n  theme,\n  uppercase = !theme.isV3,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const isMode = React.useCallback(\n    (modeToCompare: ButtonMode) => {\n      return mode === modeToCompare;\n    },\n    [mode]\n  );\n  const { roundness, isV3, animation } = theme;\n\n  const isElevationEntitled =\n    !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  const initialElevation = isV3 ? 1 : 2;\n  const activeElevation = isV3 ? 2 : 8;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isElevationEntitled ? initialElevation : 0)\n  );\n\n  React.useEffect(() => {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    onPressIn?.(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    onPressOut?.(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const iconSize = isV3 ? 18 : 16;\n\n  const { backgroundColor, borderColor, textColor, borderWidth } =\n    getButtonColors({\n      customButtonColor,\n      customTextColor,\n      theme,\n      mode,\n      disabled,\n      dark,\n    });\n\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ??\n        borderRadius\n      : borderRadius,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n\n  const textStyle = {\n    color: textColor,\n    ...font,\n  };\n\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? [\n          styles.iconReverse,\n          isV3 && styles.md3IconReverse,\n          isV3 && isMode('text') && styles.md3IconReverseTextMode,\n        ]\n      : [\n          styles.icon,\n          isV3 && styles.md3Icon,\n          isV3 && isMode('text') && styles.md3IconTextMode,\n        ];\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          styles.button,\n          compact && styles.compact,\n          buttonStyle,\n          style,\n          !isV3 && { elevation },\n        ] as ViewStyle\n      }\n      {...(isV3 && { elevation: elevation })}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? iconSize}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? iconSize}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              !isV3 && styles.md2Label,\n              isV3 &&\n                (isMode('text')\n                  ? icon || loading\n                    ? styles.md3LabelTextAddons\n                    : styles.md3LabelText\n                  : styles.md3Label),\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16,\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16,\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8,\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12,\n  },\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  md2Label: {\n    letterSpacing: 1,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24,\n  },\n  md3LabelText: {\n    marginHorizontal: 12,\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16,\n  },\n});\n\nexport default withInternalTheme(Button);\n"]},"metadata":{},"sourceType":"module"}