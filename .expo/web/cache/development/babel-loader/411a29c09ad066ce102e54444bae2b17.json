{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"dark\", \"style\", \"theme\", \"mode\", \"elevated\", \"safeAreaInsets\"],\n  _excluded2 = [\"backgroundColor\", \"elevation\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { withInternalTheme } from \"../../core/theming\";\nimport Surface from \"../Surface\";\nimport AppbarAction from \"./AppbarAction\";\nimport AppbarBackAction from \"./AppbarBackAction\";\nimport AppbarContent from \"./AppbarContent\";\nimport AppbarHeader from \"./AppbarHeader\";\nimport { DEFAULT_APPBAR_HEIGHT, getAppbarColor, modeAppbarHeight, renderAppbarContent } from \"./utils\";\nvar Appbar = function Appbar(_ref) {\n  var children = _ref.children,\n    dark = _ref.dark,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'small' : _ref$mode,\n    elevated = _ref.elevated,\n    safeAreaInsets = _ref.safeAreaInsets,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isV3 = theme.isV3;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    customBackground = _ref2.backgroundColor,\n    _ref2$elevation = _ref2.elevation,\n    elevation = _ref2$elevation === void 0 ? isV3 ? elevated ? 2 : 0 : 4 : _ref2$elevation,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var isDark;\n  var backgroundColor = getAppbarColor(theme, elevation, customBackground, elevated);\n  var isMode = function isMode(modeToCompare) {\n    return isV3 && mode === modeToCompare;\n  };\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !color(backgroundColor).isLight() : true;\n  }\n  var isV3CenterAlignedMode = isV3 && isMode('center-aligned');\n  var shouldCenterContent = false;\n  var shouldAddLeftSpacing = false;\n  var shouldAddRightSpacing = false;\n  if (!isV3 && Platform.OS === 'ios' || isV3CenterAlignedMode) {\n    var hasAppbarContent = false;\n    var leftItemsCount = 0;\n    var rightItemsCount = 0;\n    React.Children.forEach(children, function (child) {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < (isV3 ? 3 : 2);\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n  var filterAppbarActions = React.useCallback(function () {\n    var isLeading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return React.Children.toArray(children).filter(function (child) {\n      return isLeading ? child.props.isLeading : !child.props.isLeading;\n    });\n  }, [children]);\n  var spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;\n  var insets = {\n    paddingBottom: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom,\n    paddingTop: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top,\n    paddingLeft: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left,\n    paddingRight: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right\n  };\n  return React.createElement(Surface, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, styles.appbar, {\n      height: isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT\n    }, insets, restStyle, !theme.isV3 && {\n      elevation: elevation\n    }],\n    elevation: elevation\n  }, rest), shouldAddLeftSpacing ? React.createElement(View, {\n    style: spacingStyle\n  }) : null, (!isV3 || isMode('small') || isMode('center-aligned')) && renderAppbarContent({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent\n  }), (isMode('medium') || isMode('large')) && React.createElement(View, {\n    style: [styles.columnContainer, isMode('center-aligned') && styles.centerAlignedContainer]\n  }, React.createElement(View, {\n    style: styles.controlsRow\n  }, renderAppbarContent({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: [AppbarBackAction],\n    mode: mode\n  }), renderAppbarContent({\n    children: filterAppbarActions(true),\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: [AppbarAction],\n    mode: mode\n  }), React.createElement(View, {\n    style: styles.rightActionControls\n  }, renderAppbarContent({\n    children: filterAppbarActions(false),\n    isDark: isDark,\n    isV3: isV3,\n    renderExcept: [Appbar, AppbarBackAction, AppbarContent, AppbarHeader],\n    mode: mode\n  }))), renderAppbarContent({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: [AppbarContent],\n    mode: mode\n  })), shouldAddRightSpacing ? React.createElement(View, {\n    style: spacingStyle\n  }) : null);\n};\nvar styles = StyleSheet.create({\n  appbar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  spacing: {\n    width: 48\n  },\n  v3Spacing: {\n    width: 52\n  },\n  controlsRow: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  rightActionControls: {\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'flex-end'\n  },\n  columnContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingTop: 8\n  },\n  centerAlignedContainer: {\n    paddingTop: 0\n  }\n});\nexport default withInternalTheme(Appbar);\nvar AppbarWithTheme = withInternalTheme(Appbar);\nexport { AppbarWithTheme as Appbar };","map":{"version":3,"sources":["Appbar.tsx"],"names":["React","color","withInternalTheme","Surface","AppbarAction","AppbarBackAction","AppbarContent","AppbarHeader","DEFAULT_APPBAR_HEIGHT","getAppbarColor","modeAppbarHeight","renderAppbarContent","Appbar","children","dark","style","theme","mode","elevated","safeAreaInsets","rest","isV3","backgroundColor","customBackground","elevation","restStyle","StyleSheet","flatten","isDark","isMode","modeToCompare","isLight","isV3CenterAlignedMode","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","OS","hasAppbarContent","leftItemsCount","rightItemsCount","Children","forEach","child","isValidElement","type","filterAppbarActions","useCallback","isLeading","toArray","filter","props","spacingStyle","styles","v3Spacing","spacing","insets","paddingBottom","bottom","paddingTop","top","paddingLeft","left","paddingRight","right","appbar","height","columnContainer","centerAlignedContainer","controlsRow","renderOnly","rightActionControls","renderExcept","create","flexDirection","alignItems","paddingHorizontal","width","flex","justifyContent","AppbarWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme, MD3Elevation } from '../../types';\nimport Surface from '../Surface';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport AppbarContent from './AppbarContent';\nimport AppbarHeader from './AppbarHeader';\nimport {\n  AppbarModes,\n  DEFAULT_APPBAR_HEIGHT,\n  getAppbarColor,\n  modeAppbarHeight,\n  renderAppbarContent,\n} from './utils';\n\nexport type Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the Appbar.\n   * - `small` - Appbar with default height (64).\n   * - `medium` - Appbar with medium height (112).\n   * - `large` - Appbar with large height (152).\n   * - `center-aligned` - Appbar with default height and center-aligned title.\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether Appbar background should have the elevation along with primary color pigment.\n   */\n  elevated?: boolean;\n  /**\n   * @supported Available in v5.x\n   * Safe area insets for the Appbar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   */\n  safeAreaInsets?: {\n    bottom?: number;\n    top?: number;\n    left?: number;\n    right?: number;\n  };\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ### Top bar\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Appbar.Header>\n *     <Appbar.BackAction onPress={() => {}} />\n *     <Appbar.Content title=\"Title\" />\n *     <Appbar.Action icon=\"calendar\" onPress={() => {}} />\n *     <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *   </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * ### Bottom bar\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { Appbar, FAB, useTheme } from 'react-native-paper';\n * import { useSafeAreaInsets } from 'react-native-safe-area-context';\n *\n * const BOTTOM_APPBAR_HEIGHT = 80;\n * const MEDIUM_FAB_HEIGHT = 56;\n *\n * const MyComponent = () => {\n *   const { bottom } = useSafeAreaInsets();\n *   const theme = useTheme();\n *\n *   return (\n *     <Appbar\n *       style={[\n *         styles.bottom,\n *         {\n *           height: BOTTOM_APPBAR_HEIGHT + bottom,\n *           backgroundColor: theme.colors.elevation.level2,\n *         },\n *       ]}\n *       safeAreaInsets={{ bottom }}\n *     >\n *       <Appbar.Action icon=\"archive\" onPress={() => {}} />\n *       <Appbar.Action icon=\"email\" onPress={() => {}} />\n *       <Appbar.Action icon=\"label\" onPress={() => {}} />\n *       <Appbar.Action icon=\"delete\" onPress={() => {}} />\n *       <FAB\n *         mode=\"flat\"\n *         size=\"medium\"\n *         icon=\"plus\"\n *         onPress={() => {}}\n *         style={[\n *           styles.fab,\n *           { top: (BOTTOM_APPBAR_HEIGHT - MEDIUM_FAB_HEIGHT) / 2 },\n *         ]}\n *       />\n *     </Appbar>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     backgroundColor: 'aquamarine',\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n *   fab: {\n *     position: 'absolute',\n *     right: 16,\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\nconst Appbar = ({\n  children,\n  dark,\n  style,\n  theme,\n  mode = 'small',\n  elevated,\n  safeAreaInsets,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = isV3 ? (elevated ? 2 : 0) : 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = getAppbarColor(\n    theme,\n    elevation,\n    customBackground,\n    elevated\n  );\n\n  const isMode = (modeToCompare: AppbarModes) => {\n    return isV3 && mode === modeToCompare;\n  };\n\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : typeof backgroundColor === 'string'\n        ? !color(backgroundColor).isLight()\n        : true;\n  }\n\n  const isV3CenterAlignedMode = isV3 && isMode('center-aligned');\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n  if ((!isV3 && Platform.OS === 'ios') || isV3CenterAlignedMode) {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n\n    shouldCenterContent =\n      hasAppbarContent &&\n      leftItemsCount < 2 &&\n      rightItemsCount < (isV3 ? 3 : 2);\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n\n  const filterAppbarActions = React.useCallback(\n    (isLeading = false) =>\n      React.Children.toArray(children).filter((child) =>\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n        isLeading ? child.props.isLeading : !child.props.isLeading\n      ),\n    [children]\n  );\n\n  const spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;\n\n  const insets = {\n    paddingBottom: safeAreaInsets?.bottom,\n    paddingTop: safeAreaInsets?.top,\n    paddingLeft: safeAreaInsets?.left,\n    paddingRight: safeAreaInsets?.right,\n  };\n\n  return (\n    <Surface\n      style={[\n        { backgroundColor },\n        styles.appbar,\n        {\n          height: isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT,\n        },\n        insets,\n        restStyle,\n        !theme.isV3 && { elevation },\n      ]}\n      elevation={elevation as MD3Elevation}\n      {...rest}\n    >\n      {shouldAddLeftSpacing ? <View style={spacingStyle} /> : null}\n      {(!isV3 || isMode('small') || isMode('center-aligned')) &&\n        renderAppbarContent({\n          children,\n          isDark,\n          isV3,\n          shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent,\n        })}\n      {(isMode('medium') || isMode('large')) && (\n        <View\n          style={[\n            styles.columnContainer,\n            isMode('center-aligned') && styles.centerAlignedContainer,\n          ]}\n        >\n          {/* Appbar top row with controls */}\n          <View style={styles.controlsRow}>\n            {/* Left side of row container, can contain AppbarBackAction or AppbarAction if it's leading icon  */}\n            {renderAppbarContent({\n              children,\n              isDark,\n              isV3,\n              renderOnly: [AppbarBackAction],\n              mode,\n            })}\n            {renderAppbarContent({\n              children: filterAppbarActions(true),\n              isDark,\n              isV3,\n              renderOnly: [AppbarAction],\n              mode,\n            })}\n            {/* Right side of row container, can contain other AppbarAction if they are not leading icons */}\n            <View style={styles.rightActionControls}>\n              {renderAppbarContent({\n                children: filterAppbarActions(false),\n                isDark,\n                isV3,\n                renderExcept: [\n                  Appbar,\n                  AppbarBackAction,\n                  AppbarContent,\n                  AppbarHeader,\n                ],\n                mode,\n              })}\n            </View>\n          </View>\n          {/* Middle of the row, can contain only AppbarContent */}\n          {renderAppbarContent({\n            children,\n            isDark,\n            isV3,\n            renderOnly: [AppbarContent],\n            mode,\n          })}\n        </View>\n      )}\n      {shouldAddRightSpacing ? <View style={spacingStyle} /> : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n  v3Spacing: {\n    width: 52,\n  },\n  controlsRow: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  rightActionControls: {\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'flex-end',\n  },\n  columnContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingTop: 8,\n  },\n  centerAlignedContainer: {\n    paddingTop: 0,\n  },\n});\n\nexport default withInternalTheme(Appbar);\n\n// @component-docs ignore-next-line\nconst AppbarWithTheme = withInternalTheme(Appbar);\n// @component-docs ignore-next-line\nexport { AppbarWithTheme as Appbar };\n"]},"metadata":{},"sourceType":"module"}