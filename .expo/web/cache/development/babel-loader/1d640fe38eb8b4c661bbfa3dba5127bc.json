{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\", \"accessibilityLabel\", \"disabled\", \"labelVariant\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n    status = _ref.status,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    labelStyle = _ref.labelStyle,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    disabled = _ref.disabled,\n    _ref$labelVariant = _ref.labelVariant,\n    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme,\n    disabled: disabled\n  });\n  var isLeading = position === 'leading';\n  var checkbox;\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(TouchableRipple, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled: disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    variant: labelVariant,\n    style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n  }, label), !isLeading && checkbox));\n};\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withInternalTheme(CheckboxItem);\nvar CheckboxItemWithTheme = withInternalTheme(CheckboxItem);\nexport { CheckboxItemWithTheme as CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["React","withInternalTheme","TouchableRipple","Text","Checkbox","CheckboxAndroid","CheckboxIOS","CheckboxItem","style","status","label","onPress","labelStyle","theme","testID","mode","position","accessibilityLabel","disabled","labelVariant","props","checkboxProps","isLeading","checkbox","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","color","checked","styles","container","font","displayName","CheckboxItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  accessibilityLabel = label,\n  disabled,\n  labelVariant = 'bodyLarge',\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          variant={labelVariant}\n          style={[\n            styles.label,\n            !theme.isV3 && styles.font,\n            computedStyle,\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withInternalTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withInternalTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}