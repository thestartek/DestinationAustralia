{"ast":null,"code":"import color from 'color';\nvar getAndroidCheckedColor = function getAndroidCheckedColor(_ref) {\n  var theme = _ref.theme,\n    customColor = _ref.customColor;\n  if (customColor) {\n    return customColor;\n  }\n  if (theme.isV3) {\n    return theme.colors.primary;\n  }\n  return theme.colors.accent;\n};\nvar getAndroidUncheckedColor = function getAndroidUncheckedColor(_ref2) {\n  var theme = _ref2.theme,\n    customUncheckedColor = _ref2.customUncheckedColor;\n  if (customUncheckedColor) {\n    return customUncheckedColor;\n  }\n  if (theme.isV3) {\n    return theme.colors.onSurfaceVariant;\n  }\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.7).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.54).rgb().string();\n};\nvar getAndroidRippleColor = function getAndroidRippleColor(_ref3) {\n  var theme = _ref3.theme,\n    checkedColor = _ref3.checkedColor,\n    disabled = _ref3.disabled;\n  if (disabled) {\n    if (theme.isV3) {\n      return color(theme.colors.onSurface).alpha(0.16).rgb().string();\n    }\n    return color(theme.colors.text).alpha(0.16).rgb().string();\n  }\n  return color(checkedColor).fade(0.32).rgb().string();\n};\nvar getAndroidControlColor = function getAndroidControlColor(_ref4) {\n  var theme = _ref4.theme,\n    checked = _ref4.checked,\n    disabled = _ref4.disabled,\n    checkedColor = _ref4.checkedColor,\n    uncheckedColor = _ref4.uncheckedColor;\n  if (disabled) {\n    if (theme.isV3) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.text;\n  }\n  if (checked) {\n    return checkedColor;\n  }\n  return uncheckedColor;\n};\nexport var getAndroidSelectionControlColor = function getAndroidSelectionControlColor(_ref5) {\n  var theme = _ref5.theme,\n    disabled = _ref5.disabled,\n    checked = _ref5.checked,\n    customColor = _ref5.customColor,\n    customUncheckedColor = _ref5.customUncheckedColor;\n  var checkedColor = getAndroidCheckedColor({\n    theme: theme,\n    customColor: customColor\n  });\n  var uncheckedColor = getAndroidUncheckedColor({\n    theme: theme,\n    customUncheckedColor: customUncheckedColor\n  });\n  return {\n    rippleColor: getAndroidRippleColor({\n      theme: theme,\n      checkedColor: checkedColor,\n      disabled: disabled\n    }),\n    selectionControlColor: getAndroidControlColor({\n      theme: theme,\n      disabled: disabled,\n      checked: checked,\n      checkedColor: checkedColor,\n      uncheckedColor: uncheckedColor\n    })\n  };\n};\nvar getIOSCheckedColor = function getIOSCheckedColor(_ref6) {\n  var theme = _ref6.theme,\n    disabled = _ref6.disabled,\n    customColor = _ref6.customColor;\n  if (disabled) {\n    if (theme.isV3) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.disabled;\n  }\n  if (customColor) {\n    return customColor;\n  }\n  if (theme.isV3) {\n    return theme.colors.primary;\n  }\n  return theme.colors.accent;\n};\nvar getIOSRippleColor = function getIOSRippleColor(_ref7) {\n  var theme = _ref7.theme,\n    checkedColor = _ref7.checkedColor,\n    disabled = _ref7.disabled;\n  if (disabled) {\n    if (theme.isV3) {\n      return color(theme.colors.onSurface).alpha(0.16).rgb().string();\n    }\n    return color(theme.colors.text).alpha(0.16).rgb().string();\n  }\n  return color(checkedColor).fade(0.32).rgb().string();\n};\nexport var getSelectionControlIOSColor = function getSelectionControlIOSColor(_ref8) {\n  var theme = _ref8.theme,\n    disabled = _ref8.disabled,\n    customColor = _ref8.customColor;\n  var checkedColor = getIOSCheckedColor({\n    theme: theme,\n    disabled: disabled,\n    customColor: customColor\n  });\n  return {\n    checkedColor: checkedColor,\n    rippleColor: getIOSRippleColor({\n      theme: theme,\n      checkedColor: checkedColor,\n      disabled: disabled\n    })\n  };\n};","map":{"version":3,"sources":["utils.ts"],"names":["color","getAndroidCheckedColor","theme","customColor","isV3","colors","primary","accent","getAndroidUncheckedColor","customUncheckedColor","onSurfaceVariant","dark","text","alpha","rgb","string","getAndroidRippleColor","checkedColor","disabled","onSurface","fade","getAndroidControlColor","checked","uncheckedColor","onSurfaceDisabled","getAndroidSelectionControlColor","rippleColor","selectionControlColor","getIOSCheckedColor","getIOSRippleColor","getSelectionControlIOSColor"],"mappings":"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","sourcesContent":["import color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\nconst getAndroidCheckedColor = ({\n  theme,\n  customColor,\n}: {\n  theme: InternalTheme;\n  customColor?: string;\n}) => {\n  if (customColor) {\n    return customColor;\n  }\n\n  if (theme.isV3) {\n    return theme.colors.primary;\n  }\n\n  return theme.colors.accent;\n};\n\nconst getAndroidUncheckedColor = ({\n  theme,\n  customUncheckedColor,\n}: {\n  theme: InternalTheme;\n  customUncheckedColor?: string;\n}) => {\n  if (customUncheckedColor) {\n    return customUncheckedColor;\n  }\n\n  if (theme.isV3) {\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.7).rgb().string();\n  }\n\n  return color(theme.colors.text).alpha(0.54).rgb().string();\n};\n\nconst getAndroidRippleColor = ({\n  theme,\n  checkedColor,\n  disabled,\n}: {\n  theme: InternalTheme;\n  checkedColor: string;\n  disabled?: boolean;\n}) => {\n  if (disabled) {\n    if (theme.isV3) {\n      return color(theme.colors.onSurface).alpha(0.16).rgb().string();\n    }\n    return color(theme.colors.text).alpha(0.16).rgb().string();\n  }\n\n  return color(checkedColor).fade(0.32).rgb().string();\n};\n\nconst getAndroidControlColor = ({\n  theme,\n  checked,\n  disabled,\n  checkedColor,\n  uncheckedColor,\n}: {\n  theme: InternalTheme;\n  checked: boolean;\n  checkedColor: string;\n  uncheckedColor: string;\n  disabled?: boolean;\n}) => {\n  if (disabled) {\n    if (theme.isV3) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.text;\n  }\n\n  if (checked) {\n    return checkedColor;\n  }\n  return uncheckedColor;\n};\n\nexport const getAndroidSelectionControlColor = ({\n  theme,\n  disabled,\n  checked,\n  customColor,\n  customUncheckedColor,\n}: {\n  theme: InternalTheme;\n  checked: boolean;\n  disabled?: boolean;\n  customColor?: string;\n  customUncheckedColor?: string;\n}) => {\n  const checkedColor = getAndroidCheckedColor({ theme, customColor });\n  const uncheckedColor = getAndroidUncheckedColor({\n    theme,\n    customUncheckedColor,\n  });\n  return {\n    rippleColor: getAndroidRippleColor({ theme, checkedColor, disabled }),\n    selectionControlColor: getAndroidControlColor({\n      theme,\n      disabled,\n      checked,\n      checkedColor,\n      uncheckedColor,\n    }),\n  };\n};\n\nconst getIOSCheckedColor = ({\n  theme,\n  disabled,\n  customColor,\n}: {\n  theme: InternalTheme;\n  customColor?: string;\n  disabled?: boolean;\n}) => {\n  if (disabled) {\n    if (theme.isV3) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.disabled;\n  }\n\n  if (customColor) {\n    return customColor;\n  }\n\n  if (theme.isV3) {\n    return theme.colors.primary;\n  }\n\n  return theme.colors.accent;\n};\n\nconst getIOSRippleColor = ({\n  theme,\n  checkedColor,\n  disabled,\n}: {\n  theme: InternalTheme;\n  checkedColor: string;\n  disabled?: boolean;\n}) => {\n  if (disabled) {\n    if (theme.isV3) {\n      return color(theme.colors.onSurface).alpha(0.16).rgb().string();\n    }\n    return color(theme.colors.text).alpha(0.16).rgb().string();\n  }\n  return color(checkedColor).fade(0.32).rgb().string();\n};\n\nexport const getSelectionControlIOSColor = ({\n  theme,\n  disabled,\n  customColor,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n  customColor?: string;\n}) => {\n  const checkedColor = getIOSCheckedColor({ theme, disabled, customColor });\n  return {\n    checkedColor,\n    rippleColor: getIOSRippleColor({\n      theme,\n      checkedColor,\n      disabled,\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}