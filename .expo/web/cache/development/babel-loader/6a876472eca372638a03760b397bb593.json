{"ast":null,"code":"import color from 'color';\nimport { black, white } from \"../../styles/themes/v2/colors\";\nexport var getCardCoverStyle = function getCardCoverStyle(_ref) {\n  var theme = _ref.theme,\n    index = _ref.index,\n    total = _ref.total;\n  var isV3 = theme.isV3,\n    roundness = theme.roundness;\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness\n    };\n  }\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness\n      };\n    }\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness\n    };\n  }\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness\n    };\n  }\n  return undefined;\n};\nvar getBorderColor = function getBorderColor(_ref2) {\n  var theme = _ref2.theme;\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\nvar getBackgroundColor = function getBackgroundColor(_ref3) {\n  var theme = _ref3.theme,\n    isMode = _ref3.isMode;\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n  return undefined;\n};\nexport var getCardColors = function getCardColors(_ref4) {\n  var theme = _ref4.theme,\n    mode = _ref4.mode;\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n  return {\n    backgroundColor: getBackgroundColor({\n      theme: theme,\n      isMode: isMode\n    }),\n    borderColor: getBorderColor({\n      theme: theme\n    })\n  };\n};","map":{"version":3,"sources":["utils.tsx"],"names":["color","black","white","getCardCoverStyle","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","colors","outline","dark","alpha","rgb","string","getBackgroundColor","isMode","surfaceVariant","surface","getCardColors","mode","modeToCompare","backgroundColor","borderColor"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,KAAK,EAAEC,KAAK;AAKrB,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAG,IAAA,EAQ3B;EAR4B,IAChCC,KAAK,GAON,IAAA,CAPCA,KAAK;IACLC,KAAK,GAMN,IAAA,CANCA,KAAK;IACLC,KAAAA,GAKD,IAAA,CALCA,KAAAA;EAMA,IAAQC,IAAI,GAAgBH,KAAK,CAAzBG,IAAI;IAAEC,SAAAA,GAAcJ,KAAK,CAAnBI,SAAAA;EAEd,IAAID,IAAI,EAAE;IACR,OAAO;MACLE,YAAY,EAAE,CAAC,GAAGD;IACpB,CAAC;EACH;EAEA,IAAIH,KAAK,KAAK,CAAC,EAAE;IACf,IAAIC,KAAK,KAAK,CAAC,EAAE;MACf,OAAO;QACLG,YAAY,EAAED;MAChB,CAAC;IACH;IAEA,OAAO;MACLE,mBAAmB,EAAEF,SAAS;MAC9BG,oBAAoB,EAAEH;IACxB,CAAC;EACH;EAEA,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAID,KAAK,KAAKC,KAAK,GAAG,CAAC,EAAE;IACpD,OAAO;MACLM,sBAAsB,EAAEJ;IAC1B,CAAC;EACH;EAEA,OAAOK,SAAS;AAClB,CAAC;AAED,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAG,KAAA,EAAyC;EAAxC,IAAEV,KAAAA,GAAiC,KAAA,CAAjCA,KAAAA;EACxB,IAAIA,KAAK,CAACG,IAAI,EAAE;IACd,OAAOH,KAAK,CAACW,MAAM,CAACC,OAAO;EAC7B;EAEA,IAAIZ,KAAK,CAACa,IAAI,EAAE;IACd,OAAOjB,KAAK,CAACE,KAAK,CAAC,CAACgB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;EAChD;EACA,OAAOpB,KAAK,CAACC,KAAK,CAAC,CAACiB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;AAChD,CAAC;AAED,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAG,KAAA,EAMrB;EANsB,IAC1BjB,KAAK,GAKN,KAAA,CALCA,KAAK;IACLkB,MAAAA,GAID,KAAA,CAJCA,MAAAA;EAKA,IAAIlB,KAAK,CAACG,IAAI,EAAE;IACd,IAAIe,MAAM,CAAC,WAAW,CAAC,EAAE;MACvB,OAAOlB,KAAK,CAACW,MAAM,CAACQ,cAAc;IACpC;IACA,IAAID,MAAM,CAAC,UAAU,CAAC,EAAE;MACtB,OAAOlB,KAAK,CAACW,MAAM,CAACS,OAAO;IAC7B;EACF;EACA,OAAOX,SAAS;AAClB,CAAC;AAED,OAAO,IAAMY,aAAa,GAAG,SAAhBA,aAAa,CAAG,KAAA,EAMvB;EANwB,IAC5BrB,KAAK,GAKN,KAAA,CALCA,KAAK;IACLsB,IAAAA,GAID,KAAA,CAJCA,IAAAA;EAKA,IAAMJ,MAAM,GAAIK,SAAVL,MAAM,CAAIK,aAAuB,EAAK;IAC1C,OAAOD,IAAI,KAAKC,aAAa;EAC/B,CAAC;EAED,OAAO;IACLC,eAAe,EAAEP,kBAAkB,CAAC;MAClCjB,KAAK,EAALA,KAAK;MACLkB,MAAAA,EAAAA;IACF,CAAC,CAAC;IACFO,WAAW,EAAEf,cAAc,CAAC;MAAEV,KAAAA,EAAAA;IAAM,CAAC;EACvC,CAAC;AACH,CAAC","sourcesContent":["import color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: InternalTheme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness,\n    };\n  }\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: InternalTheme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: InternalTheme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}