{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"unitId\", \"sizes\", \"requestOptions\", \"manualImpressionsEnabled\"];\nimport React, { useState, useEffect } from 'react';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { isFunction } from \"../common\";\nimport { NativeError } from \"../internal/NativeError\";\nimport { BannerAdSize, GAMBannerAdSize } from \"../BannerAdSize\";\nimport { validateAdRequestOptions } from \"../validateAdRequestOptions\";\nvar sizeRegex = /([0-9]+)x([0-9]+)/;\nexport var BaseAd = React.forwardRef(function (_ref, ref) {\n  var unitId = _ref.unitId,\n    sizes = _ref.sizes,\n    requestOptions = _ref.requestOptions,\n    manualImpressionsEnabled = _ref.manualImpressionsEnabled,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useState = useState([0, 0]),\n    _useState2 = _slicedToArray(_useState, 2),\n    dimensions = _useState2[0],\n    setDimensions = _useState2[1];\n  useEffect(function () {\n    if (!unitId) {\n      throw new Error(\"BannerAd: 'unitId' expected a valid string unit ID.\");\n    }\n  }, [unitId]);\n  useEffect(function () {\n    if (sizes.length === 0 || !sizes.every(function (size) {\n      return size in BannerAdSize || size in GAMBannerAdSize || sizeRegex.test(size);\n    })) {\n      throw new Error(\"BannerAd: 'size(s)' expected a valid BannerAdSize or custom size string.\");\n    }\n  }, [sizes]);\n  var parsedRequestOptions = JSON.stringify(requestOptions);\n  useEffect(function () {\n    if (requestOptions) {\n      try {\n        validateAdRequestOptions(requestOptions);\n      } catch (e) {\n        if (e instanceof Error) {\n          throw new Error(\"BannerAd: \" + e.message);\n        }\n      }\n    }\n  }, [parsedRequestOptions]);\n  function onNativeEvent(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    var type = nativeEvent.type;\n    if (type !== 'onSizeChange' && isFunction(props[type])) {\n      var eventHandler, eventPayload;\n      switch (type) {\n        case 'onAdLoaded':\n          eventPayload = {\n            width: nativeEvent.width,\n            height: nativeEvent.height\n          };\n          if (eventHandler = props[type]) eventHandler(eventPayload);\n          break;\n        case 'onAdFailedToLoad':\n          eventPayload = NativeError.fromEvent(nativeEvent, 'googleMobileAds');\n          if (eventHandler = props[type]) eventHandler(eventPayload);\n          break;\n        case 'onAppEvent':\n          eventPayload = {\n            name: nativeEvent.name,\n            data: nativeEvent.data\n          };\n          if (eventHandler = props[type]) eventHandler(eventPayload);\n          break;\n        default:\n          if (eventHandler = props[type]) eventHandler();\n      }\n    }\n    if (type === 'onAdLoaded' || type === 'onSizeChange') {\n      var width = nativeEvent.width,\n        height = nativeEvent.height;\n      if (width && height) setDimensions([width, height]);\n    }\n  }\n  var style = sizes.includes(GAMBannerAdSize.FLUID) ? {\n    width: '100%',\n    height: dimensions[1]\n  } : {\n    width: dimensions[0],\n    height: dimensions[1]\n  };\n  return React.createElement(GoogleMobileAdsBannerView, {\n    ref: ref,\n    sizes: sizes,\n    style: style,\n    unitId: unitId,\n    request: validateAdRequestOptions(requestOptions),\n    manualImpressionsEnabled: !!manualImpressionsEnabled,\n    onNativeEvent: onNativeEvent\n  });\n});\nBaseAd.displayName = 'BaseAd';\nvar GoogleMobileAdsBannerView = requireNativeComponent('RNGoogleMobileAdsBannerView');","map":{"version":3,"sources":["BaseAd.tsx"],"names":["React","useState","useEffect","requireNativeComponent","isFunction","NativeError","BannerAdSize","GAMBannerAdSize","validateAdRequestOptions","sizeRegex","BaseAd","forwardRef","unitId","sizes","requestOptions","manualImpressionsEnabled","props","ref","dimensions","setDimensions","Error","length","every","size","test","parsedRequestOptions","JSON","stringify","e","message","onNativeEvent","nativeEvent","type","eventHandler","eventPayload","width","height","fromEvent","name","data","style","includes","FLUID","displayName","GoogleMobileAdsBannerView"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { requireNativeComponent } from 'react-native';\nimport { isFunction } from '../common';\nimport { NativeError } from '../internal/NativeError';\nimport { BannerAdSize, GAMBannerAdSize } from '../BannerAdSize';\nimport { validateAdRequestOptions } from '../validateAdRequestOptions';\nconst sizeRegex = /([0-9]+)x([0-9]+)/;\nexport const BaseAd = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    unitId,\n    sizes,\n    requestOptions,\n    manualImpressionsEnabled,\n    ...props\n  } = _ref;\n  const [dimensions, setDimensions] = useState([0, 0]);\n  useEffect(() => {\n    if (!unitId) {\n      throw new Error(\"BannerAd: 'unitId' expected a valid string unit ID.\");\n    }\n  }, [unitId]);\n  useEffect(() => {\n    if (sizes.length === 0 || !sizes.every(size => size in BannerAdSize || size in GAMBannerAdSize || sizeRegex.test(size))) {\n      throw new Error(\"BannerAd: 'size(s)' expected a valid BannerAdSize or custom size string.\");\n    }\n  }, [sizes]);\n  const parsedRequestOptions = JSON.stringify(requestOptions);\n  useEffect(() => {\n    if (requestOptions) {\n      try {\n        validateAdRequestOptions(requestOptions);\n      } catch (e) {\n        if (e instanceof Error) {\n          throw new Error(`BannerAd: ${e.message}`);\n        }\n      }\n    }\n  }, [parsedRequestOptions]);\n  function onNativeEvent(_ref2) {\n    let {\n      nativeEvent\n    } = _ref2;\n    const {\n      type\n    } = nativeEvent;\n    if (type !== 'onSizeChange' && isFunction(props[type])) {\n      let eventHandler, eventPayload;\n      switch (type) {\n        case 'onAdLoaded':\n          eventPayload = {\n            width: nativeEvent.width,\n            height: nativeEvent.height\n          };\n          if (eventHandler = props[type]) eventHandler(eventPayload);\n          break;\n        case 'onAdFailedToLoad':\n          eventPayload = NativeError.fromEvent(nativeEvent, 'googleMobileAds');\n          if (eventHandler = props[type]) eventHandler(eventPayload);\n          break;\n        case 'onAppEvent':\n          eventPayload = {\n            name: nativeEvent.name,\n            data: nativeEvent.data\n          };\n          if (eventHandler = props[type]) eventHandler(eventPayload);\n          break;\n        default:\n          if (eventHandler = props[type]) eventHandler();\n      }\n    }\n    if (type === 'onAdLoaded' || type === 'onSizeChange') {\n      const {\n        width,\n        height\n      } = nativeEvent;\n      if (width && height) setDimensions([width, height]);\n    }\n  }\n  const style = sizes.includes(GAMBannerAdSize.FLUID) ? {\n    width: '100%',\n    height: dimensions[1]\n  } : {\n    width: dimensions[0],\n    height: dimensions[1]\n  };\n  return /*#__PURE__*/React.createElement(GoogleMobileAdsBannerView, {\n    ref: ref,\n    sizes: sizes,\n    style: style,\n    unitId: unitId,\n    request: validateAdRequestOptions(requestOptions),\n    manualImpressionsEnabled: !!manualImpressionsEnabled,\n    onNativeEvent: onNativeEvent\n  });\n});\nBaseAd.displayName = 'BaseAd';\nconst GoogleMobileAdsBannerView = requireNativeComponent('RNGoogleMobileAdsBannerView');\n//# sourceMappingURL=BaseAd.js.map"]},"metadata":{},"sourceType":"module"}