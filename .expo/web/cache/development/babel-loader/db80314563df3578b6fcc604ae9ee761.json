{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Consumer as SettingsConsumer, Provider as SettingsProvider } from \"../../core/settings\";\nimport { ThemeProvider, withInternalTheme } from \"../../core/theming\";\nimport PortalConsumer from \"./PortalConsumer\";\nimport PortalHost, { PortalContext } from \"./PortalHost\";\nvar Portal = function (_React$Component) {\n  _inherits(Portal, _React$Component);\n  var _super = _createSuper(Portal);\n  function Portal() {\n    _classCallCheck(this, Portal);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Portal, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        children = _this$props.children,\n        theme = _this$props.theme;\n      return React.createElement(SettingsConsumer, null, function (settings) {\n        return React.createElement(PortalContext.Consumer, null, function (manager) {\n          return React.createElement(PortalConsumer, {\n            manager: manager\n          }, React.createElement(SettingsProvider, {\n            value: settings\n          }, React.createElement(ThemeProvider, {\n            theme: theme\n          }, children)));\n        });\n      });\n    }\n  }]);\n  return Portal;\n}(React.Component);\n_defineProperty(Portal, \"Host\", PortalHost);\nexport default withInternalTheme(Portal);","map":{"version":3,"sources":["Portal.tsx"],"names":["React","Consumer","SettingsConsumer","Provider","SettingsProvider","ThemeProvider","withInternalTheme","PortalConsumer","PortalHost","PortalContext","Portal","Component","render","children","theme","props","settings","manager"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAI9B,SACEC,QAAQ,IAAIC,gBAAgB,EAC5BC,QAAQ,IAAIC,gBAAgB;AAE9B,SAASC,aAAa,EAAEC,iBAAiB;AACzC,OAAOC,cAAc;AACrB,OAAOC,UAAU,IAAIC,aAAa;AAAqC,IAiCjEC,MAAM;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAIVE,kBAAS;MACP,kBAA4B,IAAI,CAACG,KAAK;QAA9BF,QAAQ,eAARA,QAAQ;QAAEC,KAAAA,eAAAA,KAAAA;MAElB,OACE,KAAA,CAAA,aAAA,CAAC,gBAAgB,EAAA,IAAA,EACbE,UAAAA,QAAQ;QAAA,OACR,KAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAQ,EAAA,IAAA,EACnBC,UAAAA,OAAO;UAAA,OACP,KAAA,CAAA,aAAA,CAAC,cAAc,EAAA;YAAC,OAAO,EAAEA;UAAyB,CAAA,EAChD,KAAA,CAAA,aAAA,CAAC,gBAAgB,EAAA;YAAC,KAAK,EAAED;UAAS,CAAA,EAEhC,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA;YAAC,KAAK,EAAEF;UAAM,CAAA,EAAED,QAAQ,CAAiB,CACtC,CAEtB;QAAA,EAEJ;MAAA,EACgB;IAEvB;EAAA;EAAA;AAAA,EAvBmBb,KAAK,CAACW,SAAS;AAwBnC,eAAA,CAxBKD,MAAM,EAAA,MAAA,EAEIF,UAAU,CAAA;AAwB1B,eAAeF,iBAAiB,CAACI,MAAM,CAAC","sourcesContent":["import * as React from 'react';\n\nimport type { InternalTheme } from 'src/types';\n\nimport {\n  Consumer as SettingsConsumer,\n  Provider as SettingsProvider,\n} from '../../core/settings';\nimport { ThemeProvider, withInternalTheme } from '../../core/theming';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\n\nexport type Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * Portal allows rendering a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n * Note that if you're using the `Provider` component, this already includes a `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  {/* @ts-expect-error check @callstack/react-theme-provider's children prop */}\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withInternalTheme(Portal);\n"]},"metadata":{},"sourceType":"module"}