{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport { getSelectionControlIOSColor } from \"../Checkbox/utils\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nvar RadioButtonIOS = function RadioButtonIOS(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    theme = _ref.theme,\n    status = _ref.status,\n    value = _ref.value,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    var _getSelectionControlI = getSelectionControlIOSColor({\n        theme: theme,\n        disabled: disabled,\n        customColor: rest.color\n      }),\n      checkedColor = _getSelectionControlI.checkedColor,\n      rippleColor = _getSelectionControlI.rippleColor;\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function (event) {\n        handlePress({\n          onPress: onPress,\n          value: value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          event: event\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(View, {\n      style: {\n        opacity: checked ? 1 : 0\n      }\n    }, React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withInternalTheme(RadioButtonIOS);\nvar RadioButtonIOSWithTheme = withInternalTheme(RadioButtonIOS);\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };","map":{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["React","withInternalTheme","getSelectionControlIOSColor","MaterialCommunityIcon","TouchableRipple","RadioButtonContext","handlePress","isChecked","RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","context","checked","contextValue","checkedColor","rippleColor","customColor","color","undefined","event","onValueChange","styles","container","opacity","displayName","StyleSheet","create","borderRadius","padding","RadioButtonIOSWithTheme"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAG9B,SAASC,iBAAiB;AAE1B,SAASC,2BAA2B;AACpC,OAAOC,qBAAqB;AAC5B,OAAOC,eAAe;AACtB,SAASC,kBAAkB;AAC3B,SAASC,WAAW,EAAEC,SAAS;AAiD/B,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAG,IAAA,EAQV;EARW,IACtBC,QAAQ,GAOF,IAAA,CAPNA,QAAQ;IACRC,OAAO,GAMD,IAAA,CANNA,OAAO;IACPC,KAAK,GAKC,IAAA,CALNA,KAAK;IACLC,MAAM,GAIA,IAAA,CAJNA,MAAM;IACNC,KAAK,GAGC,IAAA,CAHNA,KAAK;IACLC,MAAM,GAEA,IAAA,CAFNA,MAAM;IACHC,IAAAA,4BACG,IAAA;EACN,OACE,KAAA,CAAA,aAAA,CAAC,kBAAkB,CAAC,QAAQ,EAAA,IAAA,EACxBC,UAAAA,OAAgC,EAAK;IACrC,IAAMC,OAAO,GACXV,SAAS,CAAC;MACRW,YAAY,EAAEF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEH,KAAK;MAC5BD,MAAM,EAANA,MAAM;MACNC,KAAAA,EAAAA;IACF,CAAC,CAAC,KAAK,SAAS;IAElB,4BAAsCX,2BAA2B,CAAC;QAChES,KAAK,EAALA,KAAK;QACLF,QAAQ,EAARA,QAAQ;QACRY,WAAW,EAAEN,IAAI,CAACO;MACpB,CAAC,CAAC;MAJMH,YAAY,yBAAZA,YAAY;MAAEC,WAAAA,yBAAAA,WAAAA;IAMtB,OACE,KAAA,CAAA,aAAA,CAAC,eAAe,EAAA,QAAA,CAAA,CAAA,CAAA,EACVL,IAAI,EAAA;MACR,UAAU,EAAA,IAAA;MACV,WAAW,EAAEK,WAAY;MACzB,OAAO,EACLX,QAAQ,GACJc,SAAS,GACRC,UAAAA,KAAK,EAAK;QACTlB,WAAW,CAAC;UACVI,OAAO,EAAPA,OAAO;UACPG,KAAK,EAALA,KAAK;UACLY,aAAa,EAAET,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAES,aAAa;UACrCD,KAAAA,EAAAA;QACF,CAAC,CAAC;MACJ,CACL;MACD,iBAAiB,EAAC,OAAO;MACzB,kBAAkB,EAAE;QAAEf,QAAQ,EAARA,QAAQ;QAAEQ,OAAAA,EAAAA;MAAQ,CAAE;MAC1C,uBAAuB,EAAC,QAAQ;MAChC,KAAK,EAAES,MAAM,CAACC,SAAU;MACxB,MAAM,EAAEb;IAAO,CAAA,CAAA,EAEf,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;MAAC,KAAK,EAAE;QAAEc,OAAO,EAAEX,OAAO,GAAG,CAAC,GAAG;MAAE;IAAE,CAAA,EACxC,KAAA,CAAA,aAAA,CAAC,qBAAqB,EAAA;MACpB,gBAAgB,EAAE,KAAM;MACxB,IAAI,EAAC,OAAO;MACZ,IAAI,EAAE,EAAG;MACT,KAAK,EAAEE,YAAa;MACpB,SAAS,EAAC;IAAK,CAAA,CACf,CACG,CACS;EAEtB,CAAC,CAC2B;AAElC,CAAC;AAEDX,cAAc,CAACqB,WAAW,GAAG,iBAAiB;AAE9C,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAM,CAAC;EAC/BJ,SAAS,EAAE;IACTK,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE;EACX;AACF,CAAC,CAAC;AAEF,eAAehC,iBAAiB,CAACO,cAAc,CAAC;AAGhD,IAAM0B,uBAAuB,GAAGjC,iBAAiB,CAACO,cAAc,CAAC;AAEjE,SAAS0B,uBAAuB,IAAI1B,cAAc","sourcesContent":["import * as React from 'react';\nimport { GestureResponderEvent, StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n          theme,\n          disabled,\n          customColor: rest.color,\n        });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : (event) => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                      event,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withInternalTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withInternalTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}