{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { computeNextBackoffInterval } from '@ide/backoff';\nimport * as Application from 'expo-application';\nimport { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\nimport ServerRegistrationModule from \"../ServerRegistrationModule\";\nvar updateDevicePushTokenUrl = 'https://exp.host/--/api/v2/push/updateDeviceToken';\nexport function updateDevicePushTokenAsync(_x, _x2) {\n  return _updateDevicePushTokenAsync.apply(this, arguments);\n}\nfunction _updateDevicePushTokenAsync() {\n  _updateDevicePushTokenAsync = _asyncToGenerator(function* (signal, token) {\n    var doUpdateDevicePushTokenAsync = function () {\n      var _ref = _asyncToGenerator(function* (retry) {\n        var _yield$Promise$all = yield Promise.all([shouldUseDevelopmentNotificationService(), getDeviceIdAsync()]),\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n          development = _yield$Promise$all2[0],\n          deviceId = _yield$Promise$all2[1];\n        var body = {\n          deviceId: deviceId.toLowerCase(),\n          development: development,\n          deviceToken: token.data,\n          appId: Application.applicationId,\n          type: getTypeOfToken(token)\n        };\n        try {\n          var response = yield fetch(updateDevicePushTokenUrl, {\n            method: 'POST',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify(body),\n            signal: signal\n          });\n          if (!response.ok) {\n            console.debug('[expo-notifications] Error encountered while updating the device push token with the server:', yield response.text());\n          }\n          if (!response.ok) {\n            retry();\n          }\n        } catch (e) {\n          if (e.name === 'AbortError') {\n            return;\n          }\n          console.warn('[expo-notifications] Error thrown while updating the device push token with the server:', e);\n          retry();\n        }\n      });\n      return function doUpdateDevicePushTokenAsync(_x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    var shouldTry = true;\n    var retry = function retry() {\n      shouldTry = true;\n    };\n    var retriesCount = 0;\n    var initialBackoff = 500;\n    var backoffOptions = {\n      maxBackoff: 2 * 60 * 1000\n    };\n    var nextBackoffInterval = computeNextBackoffInterval(initialBackoff, retriesCount, backoffOptions);\n    while (shouldTry && !signal.aborted) {\n      shouldTry = false;\n      yield doUpdateDevicePushTokenAsync(retry);\n      if (shouldTry && !signal.aborted) {\n        nextBackoffInterval = computeNextBackoffInterval(initialBackoff, retriesCount, backoffOptions);\n        retriesCount += 1;\n        yield new Promise(function (resolve) {\n          return setTimeout(resolve, nextBackoffInterval);\n        });\n      }\n    }\n  });\n  return _updateDevicePushTokenAsync.apply(this, arguments);\n}\nfunction getDeviceIdAsync() {\n  return _getDeviceIdAsync.apply(this, arguments);\n}\nfunction _getDeviceIdAsync() {\n  _getDeviceIdAsync = _asyncToGenerator(function* () {\n    try {\n      if (!ServerRegistrationModule.getInstallationIdAsync) {\n        throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n      }\n      return yield ServerRegistrationModule.getInstallationIdAsync();\n    } catch (e) {\n      throw new CodedError('ERR_NOTIFICATIONS_DEVICE_ID', \"Could not fetch the installation ID of the application: \" + e + \".\");\n    }\n  });\n  return _getDeviceIdAsync.apply(this, arguments);\n}\nfunction getTypeOfToken(devicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    default:\n      return devicePushToken.type;\n  }\n}\nfunction shouldUseDevelopmentNotificationService() {\n  return _shouldUseDevelopmentNotificationService.apply(this, arguments);\n}\nfunction _shouldUseDevelopmentNotificationService() {\n  _shouldUseDevelopmentNotificationService = _asyncToGenerator(function* () {\n    if (Platform.OS === 'ios') {\n      try {\n        var notificationServiceEnvironment = yield Application.getIosPushNotificationServiceEnvironmentAsync();\n        if (notificationServiceEnvironment === 'development') {\n          return true;\n        }\n      } catch (_unused) {}\n    }\n    return false;\n  });\n  return _shouldUseDevelopmentNotificationService.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/utils/updateDevicePushTokenAsync.ts"],"names":[],"mappings":";;AAAA,SAAS,0BAA0B,QAAQ,cAAc;AACzD,OAAO,KAAK,WAAW,MAAM,kBAAkB;AAC/C,SAAS,UAAU,EAAE,QAAQ,EAAE,mBAAmB,QAAQ,mBAAmB;AAE7E,OAAO,wBAAwB;AAG/B,IAAM,wBAAwB,GAAG,mDAAmD;AAEpF,gBAAsB,0BAA0B;EAAA;AAAA;AA2F/C;EAAA,gDA3FM,WAA0C,MAAmB,EAAE,KAAsB,EAAA;IAC1F,IAAM,4BAA4B;MAAA,6BAAG,WAAO,KAAiB,EAAI;QAC/D,+BAAsC,OAAO,CAAC,GAAG,CAAC,CAChD,uCAAuC,EAAE,EACzC,gBAAgB,EAAE,CACnB,CAAC;UAAA;UAHK,WAAW;UAAE,QAAQ;QAI5B,IAAM,IAAI,GAAG;UACX,QAAQ,EAAE,QAAQ,CAAC,WAAW,EAAE;UAChC,WAAW,EAAX,WAAW;UACX,WAAW,EAAE,KAAK,CAAC,IAAI;UACvB,KAAK,EAAE,WAAW,CAAC,aAAa;UAChC,IAAI,EAAE,cAAc,CAAC,KAAK;SAC3B;QAED,IAAI;UACF,IAAM,QAAQ,SAAS,KAAK,CAAC,wBAAwB,EAAE;YACrD,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;cACP,cAAc,EAAE;aACjB;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAC1B,MAAM,EAAN;WACD,CAAC;UAGF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,OAAO,CAAC,KAAK,CACX,8FAA8F,QACxF,QAAQ,CAAC,IAAI,EAAE,CACtB;UACF;UAGD,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,KAAK,EAAE;UACR;SACF,CAAC,OAAO,CAAC,EAAE;UAOV,IAAI,CAAC,CAAC,IAAI,KAAK,YAAY,EAAE;YAI3B;UACD;UAED,OAAO,CAAC,IAAI,CACV,yFAAyF,EACzF,CAAC,CACF;UAED,KAAK,EAAE;QACR;MACH,CAAC;MAAA,gBAxDK,4BAA4B;QAAA;MAAA;IAAA,GAwDjC;IAED,IAAI,SAAS,GAAG,IAAI;IACpB,IAAM,KAAK,GAAG,SAAR,KAAK,GAAQ;MACjB,SAAS,GAAG,IAAI;IAClB,CAAC;IAED,IAAI,YAAY,GAAG,CAAC;IACpB,IAAM,cAAc,GAAG,GAAG;IAC1B,IAAM,cAAc,GAAG;MACrB,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG;KACtB;IACD,IAAI,mBAAmB,GAAG,0BAA0B,CAClD,cAAc,EACd,YAAY,EACZ,cAAc,CACf;IAED,OAAO,SAAS,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;MAEnC,SAAS,GAAG,KAAK;MACjB,MAAM,4BAA4B,CAAC,KAAK,CAAC;MAGzC,IAAI,SAAS,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;QAChC,mBAAmB,GAAG,0BAA0B,CAC9C,cAAc,EACd,YAAY,EACZ,cAAc,CACf;QACD,YAAY,IAAI,CAAC;QACjB,MAAM,IAAI,OAAO,CAAC,UAAC,OAAO;UAAA,OAAK,UAAU,CAAC,OAAO,EAAE,mBAAmB,CAAC;QAAA,EAAC;MACzE;IACF;EACH,CAAC;EAAA;AAAA;AAAA,SAGc,gBAAgB;EAAA;AAAA;AAAA;EAAA,sCAA/B,aAA+B;IAC7B,IAAI;MACF,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,EAAE;QACpD,MAAM,IAAI,mBAAmB,CAAC,8BAA8B,EAAE,wBAAwB,CAAC;MACxF;MAED,aAAa,wBAAwB,CAAC,sBAAsB,EAAE;KAC/D,CAAC,OAAO,CAAC,EAAE;MACV,MAAM,IAAI,UAAU,CAClB,6BAA6B,+DAC8B,CAAC,OAC7D;IACF;EACH,CAAC;EAAA;AAAA;AAGD,SAAS,cAAc,CAAC,eAAgC,EAAA;EACtD,QAAQ,eAAe,CAAC,IAAI;IAC1B,KAAK,KAAK;MACR,OAAO,MAAM;IACf,KAAK,SAAS;MACZ,OAAO,KAAK;IAEd;MACE,OAAO,eAAe,CAAC,IAAI;EAAC;AAElC;AAAC,SAGc,uCAAuC;EAAA;AAAA;AAAA;EAAA,6DAAtD,aAAsD;IACpD,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;MACzB,IAAI;QACF,IAAM,8BAA8B,SAC5B,WAAW,CAAC,6CAA6C,EAAE;QACnE,IAAI,8BAA8B,KAAK,aAAa,EAAE;UACpD,OAAO,IAAI;QACZ;OACF,CAAC,gBAAM,CAEP;IACF;IAED,OAAO,KAAK;EACd,CAAC;EAAA;AAAA","sourcesContent":["import { computeNextBackoffInterval } from '@ide/backoff';\nimport * as Application from 'expo-application';\nimport { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ServerRegistrationModule from '../ServerRegistrationModule';\nimport { DevicePushToken } from '../Tokens.types';\n\nconst updateDevicePushTokenUrl = 'https://exp.host/--/api/v2/push/updateDeviceToken';\n\nexport async function updateDevicePushTokenAsync(signal: AbortSignal, token: DevicePushToken) {\n  const doUpdateDevicePushTokenAsync = async (retry: () => void) => {\n    const [development, deviceId] = await Promise.all([\n      shouldUseDevelopmentNotificationService(),\n      getDeviceIdAsync(),\n    ]);\n    const body = {\n      deviceId: deviceId.toLowerCase(),\n      development,\n      deviceToken: token.data,\n      appId: Application.applicationId,\n      type: getTypeOfToken(token),\n    };\n\n    try {\n      const response = await fetch(updateDevicePushTokenUrl, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(body),\n        signal,\n      });\n\n      // Help debug erroring servers\n      if (!response.ok) {\n        console.debug(\n          '[expo-notifications] Error encountered while updating the device push token with the server:',\n          await response.text()\n        );\n      }\n\n      // Retry if request failed\n      if (!response.ok) {\n        retry();\n      }\n    } catch (e) {\n      // Error returned if the request is aborted should be an 'AbortError'. In\n      // React Native fetch is polyfilled using `whatwg-fetch` which:\n      // - creates `AbortError`s like this\n      //   https://github.com/github/fetch/blob/75d9455d380f365701151f3ac85c5bda4bbbde76/fetch.js#L505\n      // - which creates exceptions like\n      //   https://github.com/github/fetch/blob/75d9455d380f365701151f3ac85c5bda4bbbde76/fetch.js#L490-L494\n      if (e.name === 'AbortError') {\n        // We don't consider AbortError a failure, it's a sign somewhere else the\n        // request is expected to succeed and we don't need this one, so let's\n        // just return.\n        return;\n      }\n\n      console.warn(\n        '[expo-notifications] Error thrown while updating the device push token with the server:',\n        e\n      );\n\n      retry();\n    }\n  };\n\n  let shouldTry = true;\n  const retry = () => {\n    shouldTry = true;\n  };\n\n  let retriesCount = 0;\n  const initialBackoff = 500; // 0.5 s\n  const backoffOptions = {\n    maxBackoff: 2 * 60 * 1000, // 2 minutes\n  };\n  let nextBackoffInterval = computeNextBackoffInterval(\n    initialBackoff,\n    retriesCount,\n    backoffOptions\n  );\n\n  while (shouldTry && !signal.aborted) {\n    // Will be set to true by `retry` if it's called\n    shouldTry = false;\n    await doUpdateDevicePushTokenAsync(retry);\n\n    // Do not wait if we won't retry\n    if (shouldTry && !signal.aborted) {\n      nextBackoffInterval = computeNextBackoffInterval(\n        initialBackoff,\n        retriesCount,\n        backoffOptions\n      );\n      retriesCount += 1;\n      await new Promise((resolve) => setTimeout(resolve, nextBackoffInterval));\n    }\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_DEVICE_ID',\n      `Could not fetch the installation ID of the application: ${e}.`\n    );\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment =\n        await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}