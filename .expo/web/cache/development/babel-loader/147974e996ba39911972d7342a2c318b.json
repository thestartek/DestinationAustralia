{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar NativeGraphRequestManager = NativeModules.FBGraphRequest;\nfunction _verifyParameters(request) {\n  var _request$config;\n  if ((_request$config = request.config) !== null && _request$config !== void 0 && _request$config.parameters) {\n    for (var key in request.config.parameters) {\n      var param = request.config.parameters[key];\n      if (typeof param === 'object' && param !== null && param !== void 0 && param.string) {\n        continue;\n      }\n      throw new Error(\"Unexpected value for parameter '\" + key + \"'. Request parameters \" + \"need to be objects with a 'string' field.\");\n    }\n  }\n}\nvar FBGraphRequestManager = function () {\n  function FBGraphRequestManager() {\n    _classCallCheck(this, FBGraphRequestManager);\n    _defineProperty(this, \"requestBatch\", []);\n    _defineProperty(this, \"requestCallbacks\", []);\n    _defineProperty(this, \"batchCallback\", null);\n  }\n  _createClass(FBGraphRequestManager, [{\n    key: \"addRequest\",\n    value: function addRequest(request) {\n      _verifyParameters(request);\n      this.requestBatch.push(request);\n      this.requestCallbacks.push(request.callback);\n      return this;\n    }\n  }, {\n    key: \"addBatchCallback\",\n    value: function addBatchCallback(callback) {\n      this.batchCallback = callback;\n      return this;\n    }\n  }, {\n    key: \"start\",\n    value: function start(timeout) {\n      var that = this;\n      var callback = function callback(error, result, response) {\n        if (response) {\n          that.requestCallbacks.forEach(function (innerCallback, index) {\n            if (innerCallback) {\n              innerCallback(response[index][0], response[index][1]);\n            }\n          });\n        }\n        if (that.batchCallback) {\n          that.batchCallback(error, result);\n        }\n      };\n      NativeGraphRequestManager.start(this.requestBatch, timeout || 0, callback);\n    }\n  }]);\n  return FBGraphRequestManager;\n}();\nexport default FBGraphRequestManager;","map":{"version":3,"sources":["FBGraphRequestManager.ts"],"names":["NativeGraphRequestManager","NativeModules","FBGraphRequest","_verifyParameters","request","config","parameters","key","param","string","Error","FBGraphRequestManager","addRequest","requestBatch","push","requestCallbacks","callback","addBatchCallback","batchCallback","start","timeout","that","error","result","response","forEach","innerCallback","index"],"mappings":";;;;;;;;;;;;;;;;AAwBA,IAAMA,yBAAyB,GAAGC,aAAa,CAACC,cAAhD;AAOA,SAASC,iBAAT,CAA2BC,OAA3B,EAAkD;EAAA,IAAA,eAAA;EAChD,IAAA,CAAA,eAAA,GAAIA,OAAO,CAACC,MAAZ,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,IAAID,eAAAA,CAAgBE,UAApB,EAAgC;IAC9B,KAAK,IAAMC,GAAX,IAAkBH,OAAO,CAACC,MAARD,CAAeE,UAAjC,EAA6C;MAC3C,IAAME,KAAK,GAAGJ,OAAO,CAACC,MAARD,CAAeE,UAAfF,CAA0BG,GAA1BH,CAAd;MAEA,IACE,OAAOI,KAAP,KAAiB,QAAjB,IACCA,KADD,KAAA,IAAA,IACCA,KADD,KAAA,KAAA,CAAA,IACCA,KAAD,CAAmCC,MAFrC,EAGE;QACA;MACD;MACD,MAAM,IAAIC,KAAJ,CACJ,kCAAA,GACEH,GADF,GAEE,wBAFF,GAGE,2CAJE,CAAN;IAMD;EACF;AACF;AAAA,IAEKI,qBAAN;EAA4B,iCAAA;IAAA;IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EACU,EADV,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAEsB,EAFtB,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAGO,IAHP,CAAA;EAAA;EAAA;IAAA;IAAA,OAQ1BC,oBAAWR,OAAD,EAA+C;MACvDD,iBAAiB,CAACC,OAAD,CAAjBD;MACA,IAAA,CAAKU,YAAL,CAAkBC,IAAlB,CAAuBV,OAAvB,CAAA;MACA,IAAA,CAAKW,gBAAL,CAAsBD,IAAtB,CAA2BV,OAAO,CAACY,QAAnC,CAAA;MACA,OAAO,IAAP;IACD;EAAA;IAAA;IAAA,OAODC,0BACED,QADc,EAKS;MACvB,IAAA,CAAKE,aAAL,GAAqBF,QAArB;MACA,OAAO,IAAP;IACD;EAAA;IAAA;IAAA,OAYDG,eAAMC,OAAD,EAAmB;MAEtB,IAAMC,IAAI,GAAG,IAAb;MACA,IAAML,QAAQ,GAAG,SAAXA,QAAQ,CACZM,KADe,EAEfC,MAFe,EAGfC,QAHe,EAIZ;QACH,IAAIA,QAAJ,EAAc;UACZH,IAAI,CAACN,gBAALM,CAAsBI,OAAtBJ,CAA8B,UAACK,aAAD,EAAgBC,KAAhB,EAA0B;YACtD,IAAID,aAAJ,EAAmB;cACjBA,aAAa,CAACF,QAAQ,CAACG,KAAD,CAARH,CAAgB,CAAhBA,CAAD,EAAqBA,QAAQ,CAACG,KAAD,CAARH,CAAgB,CAAhBA,CAArB,CAAbE;YACD;UACF,CAJDL,CAAAA;QAKD;QACD,IAAIA,IAAI,CAACH,aAAT,EAAwB;UACtBG,IAAI,CAACH,aAALG,CAAmBC,KAAnBD,EAA0BE,MAA1BF,CAAAA;QACD;MACF,CAfD;MAiBArB,yBAAyB,CAACmB,KAA1BnB,CAAgC,IAAA,CAAKa,YAArCb,EAAmDoB,OAAO,IAAI,CAA9DpB,EAAiEgB,QAAjEhB,CAAAA;IACD;EAAA;EAAA;AAAA;AAGH,eAAeW,qBAAf","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @format\n */\nimport GraphRequest, {GraphRequestParameters} from './FBGraphRequest';\nimport {NativeModules} from 'react-native';\n\nconst NativeGraphRequestManager = NativeModules.FBGraphRequest;\n\nexport type Callback = (\n  error?: Record<string, unknown>,\n  result?: Record<string, unknown>,\n) => void;\n\nfunction _verifyParameters(request: GraphRequest) {\n  if (request.config?.parameters) {\n    for (const key in request.config.parameters) {\n      const param = request.config.parameters[key];\n\n      if (\n        typeof param === 'object' &&\n        (param as GraphRequestParameters)?.string\n      ) {\n        continue;\n      }\n      throw new Error(\n        \"Unexpected value for parameter '\" +\n          key +\n          \"'. Request parameters \" +\n          \"need to be objects with a 'string' field.\",\n      );\n    }\n  }\n}\n\nclass FBGraphRequestManager {\n  requestBatch: Array<GraphRequest> = [];\n  requestCallbacks: Array<Callback | undefined> = [];\n  batchCallback: Callback | null = null;\n\n  /**\n   * Add a graph request.\n   */\n  addRequest(request: GraphRequest): FBGraphRequestManager {\n    _verifyParameters(request);\n    this.requestBatch.push(request);\n    this.requestCallbacks.push(request.callback);\n    return this;\n  }\n\n  /**\n   * Add call back to the GraphRequestManager. Only one callback can be added.\n   * Note that invocation of the batch callback does not indicate success of every\n   * graph request made, only that the entire batch has finished executing.\n   */\n  addBatchCallback(\n    callback: (\n      error?: Record<string, unknown>,\n      result?: Record<string, unknown>,\n    ) => void,\n  ): FBGraphRequestManager {\n    this.batchCallback = callback;\n    return this;\n  }\n\n  /**\n   * Executes requests in a batch.\n   * Note that when there's an issue with network connection the batch callback\n   * behavior differs in Android and iOS.\n   * On iOS, the batch callback returns an error if the batch fails with a network error.\n   * On Android, the batch callback always returns {\"result\": \"batch finished executing\"}\n   * after the batch time out. This is because detecting network status requires\n   * extra permission and it's unncessary for the sdk. Instead, you can use the NetInfo module\n   * in react-native to get the network status.\n   */\n  start(timeout?: number) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n    const callback = (\n      error: Record<string, unknown>,\n      result: Record<string, unknown>,\n      response: Array<Array<Record<string, unknown>>>,\n    ) => {\n      if (response) {\n        that.requestCallbacks.forEach((innerCallback, index) => {\n          if (innerCallback) {\n            innerCallback(response[index][0], response[index][1]);\n          }\n        });\n      }\n      if (that.batchCallback) {\n        that.batchCallback(error, result);\n      }\n    };\n\n    NativeGraphRequestManager.start(this.requestBatch, timeout || 0, callback);\n  }\n}\n\nexport default FBGraphRequestManager;\n"]},"metadata":{},"sourceType":"module"}