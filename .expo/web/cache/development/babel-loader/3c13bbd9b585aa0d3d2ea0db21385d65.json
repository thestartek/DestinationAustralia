{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNGoogleSignin = NativeModules.RNGoogleSignin;\nvar IS_IOS = Platform.OS === 'ios';\nvar GoogleSignin = function () {\n  function GoogleSignin() {\n    _classCallCheck(this, GoogleSignin);\n    _defineProperty(this, \"configPromise\", void 0);\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\"RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking.\");\n    }\n  }\n  _createClass(GoogleSignin, [{\n    key: \"signIn\",\n    value: function () {\n      var _signIn = _asyncToGenerator(function* () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        yield this.configPromise;\n        return yield RNGoogleSignin.signIn(options);\n      });\n      function signIn() {\n        return _signIn.apply(this, arguments);\n      }\n      return signIn;\n    }()\n  }, {\n    key: \"hasPlayServices\",\n    value: function () {\n      var _hasPlayServices = _asyncToGenerator(function* () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n          showPlayServicesUpdateDialog: true\n        };\n        if (IS_IOS) {\n          return true;\n        } else {\n          if (options && options.showPlayServicesUpdateDialog === undefined) {\n            throw new Error('RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`');\n          }\n          return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);\n        }\n      });\n      function hasPlayServices() {\n        return _hasPlayServices.apply(this, arguments);\n      }\n      return hasPlayServices;\n    }()\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (options.offlineAccess && !options.webClientId) {\n        throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n      }\n      this.configPromise = RNGoogleSignin.configure(options);\n    }\n  }, {\n    key: \"addScopes\",\n    value: function () {\n      var _addScopes = _asyncToGenerator(function* (options) {\n        var isSignedIn = yield this.isSignedIn();\n        if (!isSignedIn) {\n          return null;\n        }\n        return IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser();\n      });\n      function addScopes(_x) {\n        return _addScopes.apply(this, arguments);\n      }\n      return addScopes;\n    }()\n  }, {\n    key: \"signInSilently\",\n    value: function () {\n      var _signInSilently = _asyncToGenerator(function* () {\n        yield this.configPromise;\n        return RNGoogleSignin.signInSilently();\n      });\n      function signInSilently() {\n        return _signInSilently.apply(this, arguments);\n      }\n      return signInSilently;\n    }()\n  }, {\n    key: \"signOut\",\n    value: function () {\n      var _signOut = _asyncToGenerator(function* () {\n        return RNGoogleSignin.signOut();\n      });\n      function signOut() {\n        return _signOut.apply(this, arguments);\n      }\n      return signOut;\n    }()\n  }, {\n    key: \"revokeAccess\",\n    value: function () {\n      var _revokeAccess = _asyncToGenerator(function* () {\n        return RNGoogleSignin.revokeAccess();\n      });\n      function revokeAccess() {\n        return _revokeAccess.apply(this, arguments);\n      }\n      return revokeAccess;\n    }()\n  }, {\n    key: \"isSignedIn\",\n    value: function () {\n      var _isSignedIn = _asyncToGenerator(function* () {\n        return RNGoogleSignin.isSignedIn();\n      });\n      function isSignedIn() {\n        return _isSignedIn.apply(this, arguments);\n      }\n      return isSignedIn;\n    }()\n  }, {\n    key: \"getCurrentUser\",\n    value: function () {\n      var _getCurrentUser = _asyncToGenerator(function* () {\n        return RNGoogleSignin.getCurrentUser();\n      });\n      function getCurrentUser() {\n        return _getCurrentUser.apply(this, arguments);\n      }\n      return getCurrentUser;\n    }()\n  }, {\n    key: \"clearCachedAccessToken\",\n    value: function () {\n      var _clearCachedAccessToken = _asyncToGenerator(function* (tokenString) {\n        if (!tokenString || typeof tokenString !== 'string') {\n          return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');\n        }\n        return IS_IOS ? null : yield RNGoogleSignin.clearCachedAccessToken(tokenString);\n      });\n      function clearCachedAccessToken(_x2) {\n        return _clearCachedAccessToken.apply(this, arguments);\n      }\n      return clearCachedAccessToken;\n    }()\n  }, {\n    key: \"getTokens\",\n    value: function () {\n      var _getTokens = _asyncToGenerator(function* () {\n        if (IS_IOS) {\n          var tokens = yield RNGoogleSignin.getTokens();\n          return tokens;\n        } else {\n          var userObject = yield RNGoogleSignin.getTokens();\n          return {\n            idToken: userObject.idToken,\n            accessToken: userObject.accessToken\n          };\n        }\n      });\n      function getTokens() {\n        return _getTokens.apply(this, arguments);\n      }\n      return getTokens;\n    }()\n  }]);\n  return GoogleSignin;\n}();\nexport var GoogleSigninSingleton = new GoogleSignin();\nexport var statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED\n};","map":{"version":3,"sources":["GoogleSignin.ts"],"names":["RNGoogleSignin","NativeModules","IS_IOS","Platform","OS","GoogleSignin","constructor","__DEV__","console","error","signIn","options","configPromise","hasPlayServices","showPlayServicesUpdateDialog","undefined","Error","playServicesAvailable","configure","offlineAccess","webClientId","addScopes","isSignedIn","getCurrentUser","signInSilently","signOut","revokeAccess","clearCachedAccessToken","tokenString","Promise","reject","getTokens","tokens","userObject","idToken","accessToken","GoogleSigninSingleton","statusCodes","SIGN_IN_CANCELLED","IN_PROGRESS","PLAY_SERVICES_NOT_AVAILABLE","SIGN_IN_REQUIRED"],"mappings":";;;;;;;;;;;;;;;;;;AASA,IAAQA,cAAAA,GAAmBC,aAA3B,CAAQD,cAAAA;AAER,IAAME,MAAM,GAAGC,QAAQ,CAACC,EAATD,KAAgB,KAA/B;AAAA,IAEME,YAAN;EAGEC,wBAAc;IAAA;IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA;IACZ,IAAIC,OAAO,IAAI,CAACP,cAAhB,EAAgC;MAC9BQ,OAAO,CAACC,KAARD,0JAAAA;IAGD;EACF;EAAA;IAAA;IAAA;MAAA,gCAEKE,aAAkD;QAAA,IAA3CC,OAAqB,uEAAG,CAAA,CAAzB;QACV,MAAM,IAAA,CAAKC,aAAX;QACA,aAAaZ,cAAc,CAACU,MAAfV,CAAsBW,OAAtBX,CAAb;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yCAEKa,aAEc;QAAA,IADlBF,OAA8B,uEAAG;UAAEG,4BAA4B,EAAE;QAAhC,CADd;QAGnB,IAAIZ,MAAJ,EAAY;UACV,OAAO,IAAP;QACD,CAFD,MAEO;UACL,IAAIS,OAAO,IAAIA,OAAO,CAACG,4BAARH,KAAyCI,SAAxD,EAAmE;YACjE,MAAM,IAAIC,KAAJ,CACJ,yGADI,CAAN;UAGD;UACD,OAAOhB,cAAc,CAACiB,qBAAfjB,CAAqCW,OAAO,CAACG,4BAA7Cd,CAAP;QACD;MACF,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAEDkB,qBAA+C;MAAA,IAArCP,OAAwB,uEAAG,CAAA,CAA5B;MACP,IAAIA,OAAO,CAACQ,aAARR,IAAyB,CAACA,OAAO,CAACS,WAAtC,EAAmD;QACjD,MAAM,IAAIJ,KAAJ,CAAU,0DAAV,CAAN;MACD;MAED,IAAA,CAAKJ,aAAL,GAAqBZ,cAAc,CAACkB,SAAflB,CAAyBW,OAAzBX,CAArB;IACD;EAAA;IAAA;IAAA;MAAA,mCAEKqB,WAAUV,OAAD,EAAiD;QAC9D,IAAMW,UAAU,SAAS,IAAA,CAAKA,UAAL,EAAzB;QACA,IAAI,CAACA,UAAL,EAAiB;UACf,OAAO,IAAP;QACD;QACD,OAAOpB,MAAM,GAAGF,cAAc,CAACqB,SAAfrB,CAAyBW,OAAzBX,CAAH,GAAuCA,cAAc,CAACuB,cAAfvB,EAApD;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,wCAEKwB,aAAgC;QACpC,MAAM,IAAA,CAAKZ,aAAX;QACA,OAAOZ,cAAc,CAACwB,cAAfxB,EAAP;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,iCAEKyB,aAAyB;QAC7B,OAAOzB,cAAc,CAACyB,OAAfzB,EAAP;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,sCAEK0B,aAA8B;QAClC,OAAO1B,cAAc,CAAC0B,YAAf1B,EAAP;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,oCAEKsB,aAA+B;QACnC,OAAOtB,cAAc,CAACsB,UAAftB,EAAP;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,wCAEKuB,aAAuC;QAC3C,OAAOvB,cAAc,CAACuB,cAAfvB,EAAP;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,gDAEK2B,WAAuBC,WAAD,EAAqC;QAC/D,IAAI,CAACA,WAAD,IAAgB,OAAOA,WAAP,KAAuB,QAA3C,EAAqD;UACnD,OAAOC,OAAO,CAACC,MAARD,CAAe,gEAAfA,CAAP;QACD;QACD,OAAO3B,MAAM,GAAG,IAAH,SAAgBF,cAAc,CAAC2B,sBAAf3B,CAAsC4B,WAAtC5B,CAA7B;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,mCAEK+B,aAA+D;QACnE,IAAI7B,MAAJ,EAAY;UACV,IAAM8B,MAAM,SAAShC,cAAc,CAAC+B,SAAf/B,EAArB;UACA,OAAOgC,MAAP;QACD,CAHD,MAGO;UACL,IAAMC,UAAU,SAASjC,cAAc,CAAC+B,SAAf/B,EAAzB;UACA,OAAO;YACLkC,OAAO,EAAED,UAAU,CAACC,OADf;YAELC,WAAW,EAAEF,UAAU,CAACE;UAFnB,CAAP;QAID;MACF,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAGH,OAAO,IAAMC,qBAAqB,GAAG,IAAI/B,YAAJ,EAA9B;AAEP,OAAO,IAAMgC,WAAW,GAAG;EACzBC,iBAAiB,EAAEtC,cAAc,CAACsC,iBADT;EAEzBC,WAAW,EAAEvC,cAAc,CAACuC,WAFH;EAGzBC,2BAA2B,EAAExC,cAAc,CAACwC,2BAHnB;EAIzBC,gBAAgB,EAAEzC,cAAc,CAACyC;AAJR,CAApB","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport type {\n  AddScopesParams,\n  SignInParams,\n  ConfigureParams,\n  HasPlayServicesParams,\n  User,\n} from './types';\n\nconst { RNGoogleSignin } = NativeModules;\n\nconst IS_IOS = Platform.OS === 'ios';\n\nclass GoogleSignin {\n  configPromise?: Promise<void>;\n\n  constructor() {\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\n        `RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking.`,\n      );\n    }\n  }\n\n  async signIn(options: SignInParams = {}): Promise<User> {\n    await this.configPromise;\n    return await RNGoogleSignin.signIn(options);\n  }\n\n  async hasPlayServices(\n    options: HasPlayServicesParams = { showPlayServicesUpdateDialog: true },\n  ): Promise<boolean> {\n    if (IS_IOS) {\n      return true;\n    } else {\n      if (options && options.showPlayServicesUpdateDialog === undefined) {\n        throw new Error(\n          'RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`',\n        );\n      }\n      return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);\n    }\n  }\n\n  configure(options: ConfigureParams = {}): void {\n    if (options.offlineAccess && !options.webClientId) {\n      throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n    }\n\n    this.configPromise = RNGoogleSignin.configure(options);\n  }\n\n  async addScopes(options: AddScopesParams): Promise<User | null> {\n    const isSignedIn = await this.isSignedIn();\n    if (!isSignedIn) {\n      return null;\n    }\n    return IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser();\n  }\n\n  async signInSilently(): Promise<User> {\n    await this.configPromise;\n    return RNGoogleSignin.signInSilently();\n  }\n\n  async signOut(): Promise<null> {\n    return RNGoogleSignin.signOut();\n  }\n\n  async revokeAccess(): Promise<null> {\n    return RNGoogleSignin.revokeAccess();\n  }\n\n  async isSignedIn(): Promise<boolean> {\n    return RNGoogleSignin.isSignedIn();\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    return RNGoogleSignin.getCurrentUser();\n  }\n\n  async clearCachedAccessToken(tokenString: string): Promise<null> {\n    if (!tokenString || typeof tokenString !== 'string') {\n      return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');\n    }\n    return IS_IOS ? null : await RNGoogleSignin.clearCachedAccessToken(tokenString);\n  }\n\n  async getTokens(): Promise<{ idToken: string; accessToken: string }> {\n    if (IS_IOS) {\n      const tokens = await RNGoogleSignin.getTokens();\n      return tokens;\n    } else {\n      const userObject = await RNGoogleSignin.getTokens();\n      return {\n        idToken: userObject.idToken,\n        accessToken: userObject.accessToken,\n      };\n    }\n  }\n}\n\nexport const GoogleSigninSingleton = new GoogleSignin();\n\nexport const statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED as string,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS as string,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE as string,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED as string,\n} as const;\n"]},"metadata":{},"sourceType":"module"}