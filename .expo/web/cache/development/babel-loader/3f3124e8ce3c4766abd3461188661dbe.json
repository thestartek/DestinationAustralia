{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { PermissionStatus, Platform } from 'expo-modules-core';\nfunction convertPermissionStatus(status) {\n  switch (status) {\n    case 'granted':\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true\n      };\n    case 'denied':\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false\n      };\n    default:\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false\n      };\n  }\n}\nfunction resolvePermissionAsync(_x) {\n  return _resolvePermissionAsync.apply(this, arguments);\n}\nfunction _resolvePermissionAsync() {\n  _resolvePermissionAsync = _asyncToGenerator(function* (_ref) {\n    var _navigator, _navigator$permission;\n    var shouldAsk = _ref.shouldAsk;\n    if (!Platform.isDOMAvailable) {\n      return convertPermissionStatus('denied');\n    }\n    var _window = window,\n      _window$Notification = _window.Notification,\n      Notification = _window$Notification === void 0 ? {} : _window$Notification;\n    if (typeof Notification.requestPermission !== 'undefined') {\n      var status = Notification.permission;\n      if (shouldAsk) {\n        status = yield new Promise(function (resolve, reject) {\n          var _Notification$request, _Notification$request2;\n          var resolved = false;\n          function resolveOnce(status) {\n            if (!resolved) {\n              resolved = true;\n              resolve(status);\n            }\n          }\n          (_Notification$request = Notification.requestPermission(resolveOnce)) == null ? void 0 : (_Notification$request2 = _Notification$request.then(resolveOnce)) == null ? void 0 : _Notification$request2.catch(reject);\n        });\n      }\n      return convertPermissionStatus(status);\n    } else if (typeof navigator !== 'undefined' && (_navigator = navigator) != null && (_navigator$permission = _navigator.permissions) != null && _navigator$permission.query) {\n      var query = yield navigator.permissions.query({\n        name: 'notifications'\n      });\n      return convertPermissionStatus(query.state);\n    }\n    return convertPermissionStatus('denied');\n  });\n  return _resolvePermissionAsync.apply(this, arguments);\n}\nexport default {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getPermissionsAsync: function () {\n    var _getPermissionsAsync = _asyncToGenerator(function* () {\n      return resolvePermissionAsync({\n        shouldAsk: false\n      });\n    });\n    function getPermissionsAsync() {\n      return _getPermissionsAsync.apply(this, arguments);\n    }\n    return getPermissionsAsync;\n  }(),\n  requestPermissionsAsync: function () {\n    var _requestPermissionsAsync = _asyncToGenerator(function* (request) {\n      return resolvePermissionAsync({\n        shouldAsk: true\n      });\n    });\n    function requestPermissionsAsync(_x2) {\n      return _requestPermissionsAsync.apply(this, arguments);\n    }\n    return requestPermissionsAsync;\n  }()\n};","map":{"version":3,"sources":["../src/NotificationPermissionsModule.ts"],"names":[],"mappings":";AAAA,SAAS,gBAAgB,EAAE,QAAQ,QAAQ,mBAAmB;AAQ9D,SAAS,uBAAuB,CAC9B,MAA0C,EAAA;EAE1C,QAAQ,MAAM;IACZ,KAAK,SAAS;MACZ,OAAO;QACL,MAAM,EAAE,gBAAgB,CAAC,OAAO;QAChC,OAAO,EAAE,OAAO;QAChB,WAAW,EAAE,KAAK;QAClB,OAAO,EAAE;OACV;IACH,KAAK,QAAQ;MACX,OAAO;QACL,MAAM,EAAE,gBAAgB,CAAC,MAAM;QAC/B,OAAO,EAAE,OAAO;QAChB,WAAW,EAAE,KAAK;QAClB,OAAO,EAAE;OACV;IACH;MACE,OAAO;QACL,MAAM,EAAE,gBAAgB,CAAC,YAAY;QACrC,OAAO,EAAE,OAAO;QAChB,WAAW,EAAE,IAAI;QACjB,OAAO,EAAE;OACV;EAAC;AAER;AAAC,SAEc,sBAAsB;EAAA;AAAA;AAAA;EAAA,4CAArC,iBAIC;IAAA;IAAA,IAHC,SAAS,QAAT,SAAS;IAIT,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;MAC5B,OAAO,uBAAuB,CAAC,QAAQ,CAAC;IACzC;IAED,cAA8B,MAAa;MAAA,+BAAnC,YAAY;MAAZ,YAAY,qCAAG,CAAA,CAAE;IACzB,IAAI,OAAO,YAAY,CAAC,iBAAiB,KAAK,WAAW,EAAE;MACzD,IAAI,MAAM,GAAG,YAAY,CAAC,UAAU;MACpC,IAAI,SAAS,EAAE;QACb,MAAM,SAAS,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAI;UAAA;UAC7C,IAAI,QAAQ,GAAG,KAAK;UACpB,SAAS,WAAW,CAAC,MAAc,EAAA;YACjC,IAAI,CAAC,QAAQ,EAAE;cACb,QAAQ,GAAG,IAAI;cACf,OAAO,CAAC,MAAM,CAAC;YAChB;UACH;UAEA,yBAAA,YAAY,CAAC,iBAAiB,CAAC,WAAW,CAAC,+CAA3C,sBAA6C,IAAI,CAAC,WAAW,CAAC,qBAA9D,uBAAgE,KAAK,CAAC,MAAM,CAAC;QAC/E,CAAC,CAAC;MACH;MACD,OAAO,uBAAuB,CAAC,MAAM,CAAC;KACvC,MAAM,IAAI,OAAO,SAAS,KAAK,WAAW,kBAAI,SAAS,sCAAT,WAAW,WAAW,aAAtB,sBAAwB,KAAK,EAAE;MAE5E,IAAM,KAAK,SAAS,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC;QAAE,IAAI,EAAE;MAAe,CAAE,CAAC;MAC1E,OAAO,uBAAuB,CAAC,KAAK,CAAC,KAAK,CAAC;IAC5C;IAED,OAAO,uBAAuB,CAAC,QAAQ,CAAC;EAC1C,CAAC;EAAA;AAAA;AAED,eAAe;EACb,WAAW,EAAE,uBAAK,CAAE,CAAC;EACrB,eAAe,EAAE,2BAAK,CAAE,CAAC;EACnB,mBAAmB;IAAA,0DAAA;MACvB,OAAO,sBAAsB,CAAC;QAAE,SAAS,EAAE;MAAK,CAAE,CAAC;IACrD,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EACK,uBAAuB;IAAA,4DAC3B,OAA6C,EAAA;MAE7C,OAAO,sBAAsB,CAAC;QAAE,SAAS,EAAE;MAAI,CAAE,CAAC;IACpD,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;CAC+B","sourcesContent":["import { PermissionStatus, Platform } from 'expo-modules-core';\n\nimport {\n  NativeNotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport { NotificationPermissionsModule } from './NotificationPermissionsModule.types';\n\nfunction convertPermissionStatus(\n  status?: NotificationPermission | 'prompt'\n): NotificationPermissionsStatus {\n  switch (status) {\n    case 'granted':\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true,\n      };\n    case 'denied':\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false,\n      };\n    default:\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n  }\n}\n\nasync function resolvePermissionAsync({\n  shouldAsk,\n}: {\n  shouldAsk: boolean;\n}): Promise<NotificationPermissionsStatus> {\n  if (!Platform.isDOMAvailable) {\n    return convertPermissionStatus('denied');\n  }\n\n  const { Notification = {} } = window as any;\n  if (typeof Notification.requestPermission !== 'undefined') {\n    let status = Notification.permission;\n    if (shouldAsk) {\n      status = await new Promise((resolve, reject) => {\n        let resolved = false;\n        function resolveOnce(status: string) {\n          if (!resolved) {\n            resolved = true;\n            resolve(status);\n          }\n        }\n        // Some browsers require a callback argument and some return a Promise\n        Notification.requestPermission(resolveOnce)?.then(resolveOnce)?.catch(reject);\n      });\n    }\n    return convertPermissionStatus(status);\n  } else if (typeof navigator !== 'undefined' && navigator?.permissions?.query) {\n    // TODO(Bacon): Support `push` in the future when it's stable.\n    const query = await navigator.permissions.query({ name: 'notifications' });\n    return convertPermissionStatus(query.state);\n  }\n  // Platforms like iOS Safari don't support Notifications so return denied.\n  return convertPermissionStatus('denied');\n}\n\nexport default {\n  addListener: () => {},\n  removeListeners: () => {},\n  async getPermissionsAsync(): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: false });\n  },\n  async requestPermissionsAsync(\n    request: NativeNotificationPermissionsRequest\n  ): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: true });\n  },\n} as NotificationPermissionsModule;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}