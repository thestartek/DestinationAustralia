{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar Profile = NativeModules.FBProfile;\nvar FBProfile = function () {\n  function FBProfile(profileMap) {\n    _classCallCheck(this, FBProfile);\n    _defineProperty(this, \"userID\", void 0);\n    _defineProperty(this, \"email\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"firstName\", void 0);\n    _defineProperty(this, \"lastName\", void 0);\n    _defineProperty(this, \"middleName\", void 0);\n    _defineProperty(this, \"linkURL\", void 0);\n    _defineProperty(this, \"imageURL\", void 0);\n    this.firstName = profileMap.firstName;\n    this.lastName = profileMap.lastName;\n    this.middleName = profileMap.middleName;\n    this.linkURL = profileMap.linkURL;\n    this.imageURL = profileMap.imageURL;\n    this.userID = profileMap.userID;\n    if (Platform.OS !== 'android') {\n      this.email = profileMap.email;\n    }\n    this.name = profileMap.name;\n    Object.freeze(this);\n  }\n  _createClass(FBProfile, null, [{\n    key: \"getCurrentProfile\",\n    value: function getCurrentProfile() {\n      return new Promise(function (resolve) {\n        Profile.getCurrentProfile(function (profileMap) {\n          if (profileMap) {\n            resolve(new FBProfile(profileMap));\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    }\n  }]);\n  return FBProfile;\n}();\nexport default FBProfile;","map":{"version":3,"sources":["FBProfile.ts"],"names":["Profile","NativeModules","FBProfile","constructor","profileMap","firstName","lastName","middleName","linkURL","imageURL","userID","Platform","OS","email","name","Object","freeze","getCurrentProfile","Promise","resolve"],"mappings":";;;;;;;;;;;;;;;;;AAKA,IAAMA,OAAO,GAAGC,aAAa,CAACC,SAA9B;AAAA,IAiBMA,SAAN;EA2CEC,mBAAYC,UAAD,EAAyB;IAAA;IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;IAClC,IAAA,CAAKC,SAAL,GAAiBD,UAAU,CAACC,SAA5B;IACA,IAAA,CAAKC,QAAL,GAAgBF,UAAU,CAACE,QAA3B;IACA,IAAA,CAAKC,UAAL,GAAkBH,UAAU,CAACG,UAA7B;IACA,IAAA,CAAKC,OAAL,GAAeJ,UAAU,CAACI,OAA1B;IACA,IAAA,CAAKC,QAAL,GAAgBL,UAAU,CAACK,QAA3B;IACA,IAAA,CAAKC,MAAL,GAAcN,UAAU,CAACM,MAAzB;IACA,IAAIC,QAAQ,CAACC,EAATD,KAAgB,SAApB,EAA+B;MAC7B,IAAA,CAAKE,KAAL,GAAaT,UAAU,CAACS,KAAxB;IACD;IACD,IAAA,CAAKC,IAAL,GAAYV,UAAU,CAACU,IAAvB;IACAC,MAAM,CAACC,MAAPD,CAAc,IAAdA,CAAAA;EACD;EAAA;IAAA;IAAA,OAKME,6BAA+C;MACpD,OAAO,IAAIC,OAAJ,CAAaC,UAAAA,OAAD,EAAa;QAC9BnB,OAAO,CAACiB,iBAARjB,CAA2BI,UAAAA,UAAD,EAA4B;UACpD,IAAIA,UAAJ,EAAgB;YACde,OAAO,CAAC,IAAIjB,SAAJ,CAAcE,UAAd,CAAD,CAAPe;UACD,CAFD,MAEO;YACLA,OAAO,CAAC,IAAD,CAAPA;UACD;QACF,CANDnB,CAAAA;MAOD,CARM,CAAP;IASD;EAAA;EAAA;AAAA;AAGH,eAAeE,SAAf","sourcesContent":["/**\n * @format\n */\nimport {Platform, NativeModules} from 'react-native';\n\nconst Profile = NativeModules.FBProfile;\n\nexport type ProfileMap = {\n  firstName?: string | null;\n  lastName?: string | null;\n  middleName?: string | null;\n  imageURL?: string | null;\n  linkURL?: string | null;\n  userID?: string | null;\n  email?: string | null;\n  name?: string | null;\n};\n\n/**\n * Represents an immutable Facebook profile\n * This class provides a global \"currentProfile\" instance to more easily add social context to your application.\n */\nclass FBProfile {\n  /**\n   * The user id\n   */\n  userID?: string | null;\n\n  /**\n   * The user's email.\n   * IMPORTANT: This field will only be populated if your user has granted your application the 'email' permission.\n   */\n  email?: string | null;\n\n  /**\n   * The user's complete name\n   */\n  name?: string | null;\n\n  /**\n   * The user's first name\n   */\n  firstName?: string | null;\n\n  /**\n   * The user's last name\n   */\n  lastName?: string | null;\n\n  /**\n   * The user's middle name\n   */\n  middleName?: string | null;\n\n  /**\n   * A URL to the user's profile.\n   * IMPORTANT: This field will only be populated if your user has granted your application the 'user_link' permission\n   */\n  linkURL?: string | null;\n\n  /**\n   * A URL to use for fetching a user's profile image.\n   */\n  imageURL?: string | null;\n\n  constructor(profileMap: ProfileMap) {\n    this.firstName = profileMap.firstName;\n    this.lastName = profileMap.lastName;\n    this.middleName = profileMap.middleName;\n    this.linkURL = profileMap.linkURL;\n    this.imageURL = profileMap.imageURL;\n    this.userID = profileMap.userID;\n    if (Platform.OS !== 'android') {\n      this.email = profileMap.email;\n    }\n    this.name = profileMap.name;\n    Object.freeze(this);\n  }\n\n  /**\n   * Getter the current logged profile\n   */\n  static getCurrentProfile(): Promise<FBProfile | null> {\n    return new Promise((resolve) => {\n      Profile.getCurrentProfile((profileMap: ProfileMap) => {\n        if (profileMap) {\n          resolve(new FBProfile(profileMap));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n}\n\nexport default FBProfile;\n"]},"metadata":{},"sourceType":"module"}