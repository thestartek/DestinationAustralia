{"ast":null,"code":"import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\nexport default function useScrollToTop(ref) {\n  var navigation = useNavigation();\n  var route = useRoute();\n  React.useEffect(function () {\n    var tabNavigations = [];\n    var currentNavigation = navigation;\n    while (currentNavigation) {\n      if (currentNavigation.getState().type === 'tab') {\n        tabNavigations.push(currentNavigation);\n      }\n      currentNavigation = currentNavigation.getParent();\n    }\n    if (tabNavigations.length === 0) {\n      return;\n    }\n    var unsubscribers = tabNavigations.map(function (tab) {\n      return tab.addListener('tabPress', function (e) {\n        var isFocused = navigation.isFocused();\n        var isFirst = tabNavigations.includes(navigation) || navigation.getState().routes[0].key === route.key;\n        requestAnimationFrame(function () {\n          var scrollable = getScrollableNode(ref);\n          if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n            if ('scrollToTop' in scrollable) {\n              scrollable.scrollToTop();\n            } else if ('scrollTo' in scrollable) {\n              scrollable.scrollTo({\n                y: 0,\n                animated: true\n              });\n            } else if ('scrollToOffset' in scrollable) {\n              scrollable.scrollToOffset({\n                offset: 0,\n                animated: true\n              });\n            } else if ('scrollResponderScrollTo' in scrollable) {\n              scrollable.scrollResponderScrollTo({\n                y: 0,\n                animated: true\n              });\n            }\n          }\n        });\n      });\n    });\n    return function () {\n      unsubscribers.forEach(function (unsubscribe) {\n        return unsubscribe();\n      });\n    };\n  }, [navigation, ref, route.key]);\n}","map":{"version":3,"sources":["useScrollToTop.tsx"],"names":["useNavigation","useRoute","React","getScrollableNode","ref","current","getScrollResponder","getNode","useScrollToTop","navigation","route","useEffect","tabNavigations","currentNavigation","getState","type","push","getParent","length","unsubscribers","map","tab","addListener","e","isFocused","isFirst","includes","routes","key","requestAnimationFrame","scrollable","defaultPrevented","scrollToTop","scrollTo","y","animated","scrollToOffset","offset","scrollResponderScrollTo","forEach","unsubscribe"],"mappings":"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","sourcesContent":["import { EventArg, NavigationProp, useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\ntype ScrollOptions = { x?: number; y?: number; animated?: boolean };\n\ntype ScrollableView =\n  | { scrollToTop(): void }\n  | { scrollTo(options: ScrollOptions): void }\n  | { scrollToOffset(options: { offset?: number; animated?: boolean }): void }\n  | { scrollResponderScrollTo(options: ScrollOptions): void };\n\ntype ScrollableWrapper =\n  | { getScrollResponder(): React.ReactNode }\n  | { getNode(): ScrollableView }\n  | ScrollableView;\n\nfunction getScrollableNode(ref: React.RefObject<ScrollableWrapper>) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if (\n    'scrollToTop' in ref.current ||\n    'scrollTo' in ref.current ||\n    'scrollToOffset' in ref.current ||\n    'scrollResponderScrollTo' in ref.current\n  ) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(\n  ref: React.RefObject<ScrollableWrapper>\n) {\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  React.useEffect(() => {\n    let tabNavigations: NavigationProp<ReactNavigation.RootParamList>[] = [];\n    let currentNavigation = navigation;\n\n    // If the screen is nested inside multiple tab navigators, we should scroll to top for any of them\n    // So we need to find all the parent tab navigators and add the listeners there\n    while (currentNavigation) {\n      if (currentNavigation.getState().type === 'tab') {\n        tabNavigations.push(currentNavigation);\n      }\n\n      currentNavigation = currentNavigation.getParent();\n    }\n\n    if (tabNavigations.length === 0) {\n      return;\n    }\n\n    const unsubscribers = tabNavigations.map((tab) => {\n      return tab.addListener(\n        // We don't wanna import tab types here to avoid extra deps\n        // in addition, there are multiple tab implementations\n        // @ts-expect-error\n        'tabPress',\n        (e: EventArg<'tabPress', true>) => {\n          // We should scroll to top only when the screen is focused\n          const isFocused = navigation.isFocused();\n\n          // In a nested stack navigator, tab press resets the stack to first screen\n          // So we should scroll to top only when we are on first screen\n          const isFirst =\n            tabNavigations.includes(navigation) ||\n            navigation.getState().routes[0].key === route.key;\n\n          // Run the operation in the next frame so we're sure all listeners have been run\n          // This is necessary to know if preventDefault() has been called\n          requestAnimationFrame(() => {\n            const scrollable = getScrollableNode(ref) as ScrollableWrapper;\n\n            if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n              if ('scrollToTop' in scrollable) {\n                scrollable.scrollToTop();\n              } else if ('scrollTo' in scrollable) {\n                scrollable.scrollTo({ y: 0, animated: true });\n              } else if ('scrollToOffset' in scrollable) {\n                scrollable.scrollToOffset({ offset: 0, animated: true });\n              } else if ('scrollResponderScrollTo' in scrollable) {\n                scrollable.scrollResponderScrollTo({ y: 0, animated: true });\n              }\n            }\n          });\n        }\n      );\n    });\n\n    return () => {\n      unsubscribers.forEach((unsubscribe) => unsubscribe());\n    };\n  }, [navigation, ref, route.key]);\n}\n"]},"metadata":{},"sourceType":"module"}