{"ast":null,"code":"import color from 'color';\nvar getUnderlayColor = function getUnderlayColor(_ref) {\n  var theme = _ref.theme,\n    calculatedRippleColor = _ref.calculatedRippleColor,\n    underlayColor = _ref.underlayColor;\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\nvar getRippleColor = function getRippleColor(_ref2) {\n  var theme = _ref2.theme,\n    rippleColor = _ref2.rippleColor;\n  if (rippleColor) {\n    return rippleColor;\n  }\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\nexport var getTouchableRippleColors = function getTouchableRippleColors(_ref3) {\n  var theme = _ref3.theme,\n    rippleColor = _ref3.rippleColor,\n    underlayColor = _ref3.underlayColor;\n  var calculatedRippleColor = getRippleColor({\n    theme: theme,\n    rippleColor: rippleColor\n  });\n  return {\n    calculatedRippleColor: calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme: theme,\n      calculatedRippleColor: calculatedRippleColor,\n      underlayColor: underlayColor\n    })\n  };\n};","map":{"version":3,"sources":["utils.ts"],"names":["color","getUnderlayColor","theme","calculatedRippleColor","underlayColor","isV3","rgb","string","fade","getRippleColor","rippleColor","colors","onSurface","alpha","dark","text","getTouchableRippleColors","calculatedUnderlayColor"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAG,IAAA,EAQnB;EARoB,IACxBC,KAAK,GAON,IAAA,CAPCA,KAAK;IACLC,qBAAqB,GAMtB,IAAA,CANCA,qBAAqB;IACrBC,aAAAA,GAKD,IAAA,CALCA,aAAAA;EAMA,IAAIA,aAAa,IAAI,IAAI,EAAE;IACzB,OAAOA,aAAa;EACtB;EAEA,IAAIF,KAAK,CAACG,IAAI,EAAE;IACd,OAAOL,KAAK,CAACG,qBAAqB,CAAC,CAACG,GAAG,EAAE,CAACC,MAAM,EAAE;EACpD;EAEA,OAAOP,KAAK,CAACG,qBAAqB,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC,CAACF,GAAG,EAAE,CAACC,MAAM,EAAE;AAC9D,CAAC;AAED,IAAME,cAAc,GAAG,SAAjBA,cAAc,CAAG,KAAA,EAMjB;EANkB,IACtBP,KAAK,GAKN,KAAA,CALCA,KAAK;IACLQ,WAAAA,GAID,KAAA,CAJCA,WAAAA;EAKA,IAAIA,WAAW,EAAE;IACf,OAAOA,WAAW;EACpB;EAEA,IAAIR,KAAK,CAACG,IAAI,EAAE;IACd,OAAOL,KAAK,CAACE,KAAK,CAACS,MAAM,CAACC,SAAS,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACP,GAAG,EAAE,CAACC,MAAM,EAAE;EACjE;EAEA,IAAIL,KAAK,CAACY,IAAI,EAAE;IACd,OAAOd,KAAK,CAACE,KAAK,CAACS,MAAM,CAACI,IAAI,CAAC,CAACF,KAAK,CAAC,IAAI,CAAC,CAACP,GAAG,EAAE,CAACC,MAAM,EAAE;EAC5D;EACA,OAAOP,KAAK,CAACE,KAAK,CAACS,MAAM,CAACI,IAAI,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC,CAACP,GAAG,EAAE,CAACC,MAAM,EAAE;AAC3D,CAAC;AAED,OAAO,IAAMS,wBAAwB,GAAG,SAA3BA,wBAAwB,CAAG,KAAA,EAQlC;EARmC,IACvCd,KAAK,GAON,KAAA,CAPCA,KAAK;IACLQ,WAAW,GAMZ,KAAA,CANCA,WAAW;IACXN,aAAAA,GAKD,KAAA,CALCA,aAAAA;EAMA,IAAMD,qBAAqB,GAAGM,cAAc,CAAC;IAAEP,KAAK,EAALA,KAAK;IAAEQ,WAAAA,EAAAA;EAAY,CAAC,CAAC;EACpE,OAAO;IACLP,qBAAqB,EAArBA,qBAAqB;IACrBc,uBAAuB,EAAEhB,gBAAgB,CAAC;MACxCC,KAAK,EAALA,KAAK;MACLC,qBAAqB,EAArBA,qBAAqB;MACrBC,aAAAA,EAAAA;IACF,CAAC;EACH,CAAC;AACH,CAAC","sourcesContent":["import color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\nconst getUnderlayColor = ({\n  theme,\n  calculatedRippleColor,\n  underlayColor,\n}: {\n  theme: InternalTheme;\n  calculatedRippleColor: string;\n  underlayColor?: string;\n}) => {\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nconst getRippleColor = ({\n  theme,\n  rippleColor,\n}: {\n  theme: InternalTheme;\n  rippleColor?: string;\n}) => {\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nexport const getTouchableRippleColors = ({\n  theme,\n  rippleColor,\n  underlayColor,\n}: {\n  theme: InternalTheme;\n  rippleColor?: string;\n  underlayColor?: string;\n}) => {\n  const calculatedRippleColor = getRippleColor({ theme, rippleColor });\n  return {\n    calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme,\n      calculatedRippleColor,\n      underlayColor,\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}