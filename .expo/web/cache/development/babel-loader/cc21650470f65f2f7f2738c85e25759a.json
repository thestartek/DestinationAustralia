{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"iconColor\", \"containerColor\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"selected\", \"animated\", \"mode\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport Icon from \"../Icon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { getIconButtonColor } from \"./utils\";\nvar PADDING = 8;\nvar IconButton = React.forwardRef(function (_ref, ref) {\n  var icon = _ref.icon,\n    customIconColor = _ref.iconColor,\n    customContainerColor = _ref.containerColor,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 24 : _ref$size,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$animated = _ref.animated,\n    animated = _ref$animated === void 0 ? false : _ref$animated,\n    mode = _ref.mode,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme();\n  var isV3 = theme.isV3;\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var _getIconButtonColor = getIconButtonColor({\n      theme: theme,\n      disabled: disabled,\n      selected: selected,\n      mode: mode,\n      customIconColor: customIconColor,\n      customContainerColor: customContainerColor\n    }),\n    iconColor = _getIconButtonColor.iconColor,\n    rippleColor = _getIconButtonColor.rippleColor,\n    backgroundColor = _getIconButtonColor.backgroundColor,\n    borderColor = _getIconButtonColor.borderColor;\n  var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n  var borderStyles = {\n    borderWidth: isV3 && mode === 'outlined' && !selected ? 1 : 0,\n    borderRadius: buttonSize / 2,\n    borderColor: borderColor\n  };\n  return React.createElement(Surface, _extends({\n    ref: ref,\n    style: [{\n      backgroundColor: backgroundColor,\n      width: buttonSize,\n      height: buttonSize\n    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]\n  }, isV3 && {\n    elevation: 0\n  }), React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    accessibilityLabel: accessibilityLabel,\n    style: styles.touchable,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n});\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default IconButton;","map":{"version":3,"sources":["IconButton.tsx"],"names":["React","useInternalTheme","CrossFadeIcon","Icon","Surface","TouchableRipple","getIconButtonColor","PADDING","IconButton","forwardRef","icon","iconColor","customIconColor","containerColor","customContainerColor","size","accessibilityLabel","disabled","onPress","selected","animated","mode","style","rest","ref","theme","isV3","IconComponent","rippleColor","backgroundColor","borderColor","buttonSize","borderStyles","borderWidth","borderRadius","width","height","styles","container","elevation","touchable","supported","top","left","bottom","right","StyleSheet","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, ThemeProp } from '../../types';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { getIconButtonColor } from './utils';\n\nconst PADDING = 8;\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * @supported Available in v5.x\n   * Mode of the icon button. By default there is no specified mode - only pressable icon will be rendered.\n   */\n  mode?: IconButtonMode;\n  /**\n   * @renamed Renamed from 'color' to 'iconColor' in v5.x\n   * Color of the icon.\n   */\n  iconColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Background color of the icon container.\n   */\n  containerColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Whether icon button is selected. A selected button receives alternative combination of icon and container colors.\n   */\n  selected?: boolean;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Default icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Contained icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-3.png\" />\n *     <figcaption>Contained-tonal icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-4.png\" />\n *     <figcaption>Outlined icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     iconColor={MD3Colors.error50}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = React.forwardRef<View, Props>(\n  (\n    {\n      icon,\n      iconColor: customIconColor,\n      containerColor: customContainerColor,\n      size = 24,\n      accessibilityLabel,\n      disabled,\n      onPress,\n      selected = false,\n      animated = false,\n      mode,\n      style,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme();\n    const { isV3 } = theme;\n\n    const IconComponent = animated ? CrossFadeIcon : Icon;\n\n    const { iconColor, rippleColor, backgroundColor, borderColor } =\n      getIconButtonColor({\n        theme,\n        disabled,\n        selected,\n        mode,\n        customIconColor,\n        customContainerColor,\n      });\n\n    const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n\n    const borderStyles = {\n      borderWidth: isV3 && mode === 'outlined' && !selected ? 1 : 0,\n      borderRadius: buttonSize / 2,\n      borderColor,\n    };\n\n    return (\n      <Surface\n        ref={ref}\n        style={\n          [\n            {\n              backgroundColor,\n              width: buttonSize,\n              height: buttonSize,\n            },\n            styles.container,\n            borderStyles,\n            !isV3 && disabled && styles.disabled,\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...(isV3 && { elevation: 0 })}\n      >\n        <TouchableRipple\n          borderless\n          centered\n          onPress={onPress}\n          rippleColor={rippleColor}\n          accessibilityLabel={accessibilityLabel}\n          style={styles.touchable}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ disabled }}\n          disabled={disabled}\n          hitSlop={\n            TouchableRipple.supported\n              ? { top: 10, left: 10, bottom: 10, right: 10 }\n              : { top: 6, left: 6, bottom: 6, right: 6 }\n          }\n          {...rest}\n        >\n          <IconComponent color={iconColor} source={icon} size={size} />\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0,\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default IconButton;\n"]},"metadata":{},"sourceType":"module"}