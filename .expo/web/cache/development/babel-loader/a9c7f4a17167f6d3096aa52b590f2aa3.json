{"ast":null,"code":"import Animated, { interpolateNode, Extrapolate } from \"react-native-reanimated\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport { mix } from \"./Animations\";\nimport { clamp, fract } from \"./Math\";\nvar add = Animated.add,\n    multiply = Animated.multiply,\n    abs = Animated.abs,\n    round = Animated.round,\n    sub = Animated.sub,\n    proc = Animated.proc,\n    color = Animated.color,\n    greaterThan = Animated.greaterThan,\n    cond = Animated.cond;\nexport var opacity = function opacity(c) {\n  return (c >> 24 & 255) / 255;\n};\nexport var red = function red(c) {\n  return c >> 16 & 255;\n};\nexport var green = function green(c) {\n  return c >> 8 & 255;\n};\nexport var blue = function blue(c) {\n  return c & 255;\n};\nexport var hsv2rgb = function hsv2rgb(h, s, v) {\n  var K = {\n    x: 1,\n    y: 2 / 3,\n    z: 1 / 3,\n    w: 3\n  };\n  var p = {\n    x: abs(sub(multiply(fract(add(h, K.x)), 6), K.w)),\n    y: abs(sub(multiply(fract(add(h, K.y)), 6), K.w)),\n    z: abs(sub(multiply(fract(add(h, K.z)), 6), K.w))\n  };\n  var rgb = {\n    x: multiply(v, mix(s, K.x, clamp(sub(p.x, K.x), 0, 1))),\n    y: multiply(v, mix(s, K.x, clamp(sub(p.y, K.x), 0, 1))),\n    z: multiply(v, mix(s, K.x, clamp(sub(p.z, K.x), 0, 1)))\n  };\n  return {\n    r: round(multiply(rgb.x, 255)),\n    g: round(multiply(rgb.y, 255)),\n    b: round(multiply(rgb.z, 255))\n  };\n};\nexport var hsv2color = proc(function (h, s, v) {\n  var _hsv2rgb = hsv2rgb(h, s, v),\n      r = _hsv2rgb.r,\n      g = _hsv2rgb.g,\n      b = _hsv2rgb.b;\n\n  return color(r, g, b);\n});\nexport var colorForBackground = proc(function (r, g, b) {\n  var L = add(multiply(0.299, r), multiply(0.587, g), multiply(0.114, b));\n  return cond(greaterThan(L, 186), color(0, 0, 0), color(255, 255, 255));\n});\n\nvar rgbToHsv = function rgbToHsv(c) {\n  var r = red(c) / 255;\n  var g = green(c) / 255;\n  var b = blue(c) / 255;\n  var ma = Math.max(r, g, b);\n  var mi = Math.min(r, g, b);\n  var h = 0;\n  var v = ma;\n  var d = ma - mi;\n  var s = ma === 0 ? 0 : d / ma;\n\n  if (ma === mi) {\n    h = 0;\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / d + 2;\n        break;\n\n      case b:\n        h = (r - g) / d + 4;\n        break;\n\n      default:\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\n\nvar interpolateColorsHSV = function interpolateColorsHSV(animationValue, inputRange, colors) {\n  var colorsAsHSV = colors.map(function (c) {\n    return rgbToHsv(c);\n  });\n  var h = interpolateNode(animationValue, {\n    inputRange: inputRange,\n    outputRange: colorsAsHSV.map(function (c) {\n      return c.h;\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  var s = interpolateNode(animationValue, {\n    inputRange: inputRange,\n    outputRange: colorsAsHSV.map(function (c) {\n      return c.s;\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  var v = interpolateNode(animationValue, {\n    inputRange: inputRange,\n    outputRange: colorsAsHSV.map(function (c) {\n      return c.v;\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return hsv2color(h, s, v);\n};\n\nvar interpolateColorsRGB = function interpolateColorsRGB(animationValue, inputRange, colors) {\n  var r = round(interpolateNode(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return red(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var g = round(interpolateNode(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return green(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var b = round(interpolateNode(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return blue(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var a = interpolateNode(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return opacity(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return color(r, g, b, a);\n};\n\nexport var interpolateColor = function interpolateColor(value, config) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"rgb\";\n  var inputRange = config.inputRange;\n  var outputRange = config.outputRange.map(function (c) {\n    return typeof c === \"number\" ? c : processColor(c);\n  });\n\n  if (colorSpace === \"hsv\") {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\nexport var mixColor = function mixColor(value, color1, color2) {\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"rgb\";\n  return interpolateColor(value, {\n    inputRange: [0, 1],\n    outputRange: [color1, color2]\n  }, colorSpace);\n};","map":{"version":3,"sources":["Colors.ts"],"names":["add","multiply","abs","round","sub","proc","color","greaterThan","cond","Animated","opacity","c","red","green","blue","hsv2rgb","K","x","y","z","w","p","fract","rgb","mix","clamp","r","g","b","hsv2color","colorForBackground","L","rgbToHsv","ma","Math","mi","h","v","d","s","interpolateColorsHSV","colorsAsHSV","colors","interpolateNode","inputRange","outputRange","extrapolate","Extrapolate","interpolateColorsRGB","a","interpolateColor","colorSpace","config","processColor","mixColor"],"mappings":"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","sourcesContent":["import Animated, {\n  interpolateNode,\n  Extrapolate,\n} from \"react-native-reanimated\";\nimport { processColor } from \"react-native\";\n\nimport { mix } from \"./Animations\";\nimport { clamp, fract } from \"./Math\";\n\nconst {\n  add,\n  multiply,\n  abs,\n  round,\n  sub,\n  proc,\n  color,\n  greaterThan,\n  cond,\n} = Animated;\n\n// type Color = Animated.Adaptable<string> | Animated.Adaptable<number>;\ntype StaticColor = string | number;\n\nexport const opacity = (c: number) => ((c >> 24) & 255) / 255;\nexport const red = (c: number) => (c >> 16) & 255;\nexport const green = (c: number) => (c >> 8) & 255;\nexport const blue = (c: number) => c & 255;\n\nexport const hsv2rgb = (\n  h: Animated.Adaptable<number>,\n  s: Animated.Adaptable<number>,\n  v: Animated.Adaptable<number>\n) => {\n  // vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  const K = {\n    x: 1,\n    y: 2 / 3,\n    z: 1 / 3,\n    w: 3,\n  };\n  // vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  const p = {\n    x: abs(sub(multiply(fract(add(h, K.x)), 6), K.w)),\n    y: abs(sub(multiply(fract(add(h, K.y)), 6), K.w)),\n    z: abs(sub(multiply(fract(add(h, K.z)), 6), K.w)),\n  };\n  // return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  const rgb = {\n    x: multiply(v, mix(s, K.x, clamp(sub(p.x, K.x), 0, 1))),\n    y: multiply(v, mix(s, K.x, clamp(sub(p.y, K.x), 0, 1))),\n    z: multiply(v, mix(s, K.x, clamp(sub(p.z, K.x), 0, 1))),\n  };\n  return {\n    r: round(multiply(rgb.x, 255)),\n    g: round(multiply(rgb.y, 255)),\n    b: round(multiply(rgb.z, 255)),\n  };\n};\n\nexport const hsv2color = proc(\n  (\n    h: Animated.Adaptable<number>,\n    s: Animated.Adaptable<number>,\n    v: Animated.Adaptable<number>\n  ) => {\n    const { r, g, b } = hsv2rgb(h, s, v);\n    return color(r, g, b) as Animated.Node<number>;\n  }\n);\n\nexport const colorForBackground = proc(\n  (\n    r: Animated.Adaptable<number>,\n    g: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>\n  ) => {\n    const L = add(multiply(0.299, r), multiply(0.587, g), multiply(0.114, b));\n    return cond(\n      greaterThan(L, 186),\n      color(0, 0, 0) as Animated.Node<number>,\n      color(255, 255, 255) as Animated.Node<number>\n    );\n  }\n);\n\nconst rgbToHsv = (c: number) => {\n  const r = red(c) / 255;\n  const g = green(c) / 255;\n  const b = blue(c) / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h, s, v };\n};\n\nconst interpolateColorsHSV = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: readonly Animated.Adaptable<number>[],\n  colors: number[]\n): Animated.Node<number> => {\n  const colorsAsHSV = colors.map((c) => rgbToHsv(c));\n  const h = interpolateNode(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.h),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const s = interpolateNode(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.s),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const v = interpolateNode(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.v),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  return hsv2color(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: readonly Animated.Adaptable<number>[],\n  colors: number[]\n) => {\n  const r = round(\n    interpolateNode(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => red(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolateNode(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => green(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolateNode(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => blue(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolateNode(animationValue, {\n    inputRange,\n    outputRange: colors.map((c) => opacity(c)),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a) as Animated.Node<number>;\n};\n\ninterface ColorInterpolationConfig {\n  inputRange: readonly Animated.Adaptable<number>[];\n  outputRange: StaticColor[];\n}\n\nexport const interpolateColor = (\n  value: Animated.Adaptable<number>,\n  config: ColorInterpolationConfig,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n): Animated.Node<number> => {\n  const { inputRange } = config;\n  const outputRange = config.outputRange.map((c) =>\n    typeof c === \"number\" ? c : (processColor(c) as number)\n  );\n  if (colorSpace === \"hsv\") {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\n\nexport const mixColor = (\n  value: Animated.Adaptable<number>,\n  color1: StaticColor,\n  color2: StaticColor,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n) =>\n  interpolateColor(\n    value,\n    {\n      inputRange: [0, 1],\n      outputRange: [color1, color2],\n    },\n    colorSpace\n  );\n"]},"metadata":{},"sourceType":"module"}