{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"dense\", \"disabled\", \"error\", \"multiline\", \"editable\", \"render\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport TextInputAffix from \"./Adornment/TextInputAffix\";\nimport TextInputIcon from \"./Adornment/TextInputIcon\";\nimport TextInputFlat from \"./TextInputFlat\";\nimport TextInputOutlined from \"./TextInputOutlined\";\nvar BLUR_ANIMATION_DURATION = 180;\nvar FOCUS_ANIMATION_DURATION = 150;\nvar TextInput = React.forwardRef(function (_ref, ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    _ref$dense = _ref.dense,\n    dense = _ref$dense === void 0 ? false : _ref$dense,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$error = _ref.error,\n    errorProp = _ref$error === void 0 ? false : _ref$error,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(NativeTextInput, props);\n    } : _ref$render,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isControlled = rest.value !== undefined;\n  var validInputValue = isControlled ? rest.value : rest.defaultValue;\n  var _React$useRef = React.useRef(new Animated.Value(validInputValue ? 0 : 1)),\n    labeled = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(errorProp ? 1 : 0)),\n    error = _React$useRef2.current;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focused = _React$useState2[0],\n    setFocused = _React$useState2[1];\n  var _React$useState3 = React.useState(' '),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    placeholder = _React$useState4[0],\n    setPlaceholder = _React$useState4[1];\n  var _React$useState5 = React.useState(validInputValue),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    uncontrolledValue = _React$useState6[0],\n    setUncontrolledValue = _React$useState6[1];\n  var value = isControlled ? rest.value : uncontrolledValue;\n  var _React$useState7 = React.useState({\n      measured: false,\n      width: 0,\n      height: 0\n    }),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    labelLayout = _React$useState8[0],\n    setLabelLayout = _React$useState8[1];\n  var _React$useState9 = React.useState({\n      width: null,\n      height: null\n    }),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    leftLayout = _React$useState10[0],\n    setLeftLayout = _React$useState10[1];\n  var _React$useState11 = React.useState({\n      width: null,\n      height: null\n    }),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    rightLayout = _React$useState12[0],\n    setRightLayout = _React$useState12[1];\n  var timer = React.useRef();\n  var root = React.useRef();\n  var scale = rest.theme.animation.scale;\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        var _root$current;\n        return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();\n      },\n      clear: function clear() {\n        var _root$current2;\n        return (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear();\n      },\n      setNativeProps: function setNativeProps(args) {\n        var _root$current3;\n        return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n      },\n      isFocused: function isFocused() {\n        var _root$current4;\n        return ((_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused()) || false;\n      },\n      blur: function blur() {\n        var _root$current5;\n        return (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur();\n      },\n      forceFocus: function forceFocus() {\n        var _root$current6;\n        return (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.focus();\n      }\n    };\n  });\n  React.useEffect(function () {\n    if (errorProp) {\n      Animated.timing(error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      {\n        Animated.timing(error, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [errorProp, scale, error]);\n  React.useEffect(function () {\n    if (focused || !rest.label) {\n      if (rest.placeholder) {\n        timer.current = setTimeout(function () {\n          return setPlaceholder(rest.placeholder);\n        }, 50);\n      }\n    } else {\n      setPlaceholder(' ');\n    }\n    return function () {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [focused, rest.label, rest.placeholder]);\n  React.useEffect(function () {\n    if (value || focused) {\n      Animated.timing(labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      {\n        Animated.timing(labeled, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [focused, value, labeled, scale]);\n  var onLeftAffixLayoutChange = function onLeftAffixLayoutChange(event) {\n    setLeftLayout({\n      height: event.nativeEvent.layout.height,\n      width: event.nativeEvent.layout.width\n    });\n  };\n  var onRightAffixLayoutChange = function onRightAffixLayoutChange(event) {\n    setRightLayout({\n      width: event.nativeEvent.layout.width,\n      height: event.nativeEvent.layout.height\n    });\n  };\n  var handleFocus = function handleFocus(args) {\n    var _rest$onFocus;\n    if (disabled || !editable) {\n      return;\n    }\n    setFocused(true);\n    (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest, args);\n  };\n  var handleBlur = function handleBlur(args) {\n    var _rest$onBlur;\n    if (!editable) {\n      return;\n    }\n    setFocused(false);\n    (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 ? void 0 : _rest$onBlur.call(rest, args);\n  };\n  var handleChangeText = function handleChangeText(value) {\n    var _rest$onChangeText;\n    if (!editable || disabled) {\n      return;\n    }\n    if (!isControlled) {\n      setUncontrolledValue(value);\n    }\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, value);\n  };\n  var handleLayoutAnimatedText = function handleLayoutAnimatedText(e) {\n    setLabelLayout({\n      width: e.nativeEvent.layout.width,\n      height: e.nativeEvent.layout.height,\n      measured: true\n    });\n  };\n  var forceFocus = function forceFocus() {\n    var _root$current7;\n    return (_root$current7 = root.current) === null || _root$current7 === void 0 ? void 0 : _root$current7.focus();\n  };\n  var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,\n    maxFontSizeMultiplier = _rest$maxFontSizeMult === void 0 ? 1.5 : _rest$maxFontSizeMult;\n  if (mode === 'outlined') {\n    return React.createElement(TextInputOutlined, _extends({\n      dense: dense,\n      disabled: disabled,\n      error: errorProp,\n      multiline: multiline,\n      editable: editable,\n      render: render\n    }, rest, {\n      value: value,\n      parentState: {\n        labeled: labeled,\n        error: error,\n        focused: focused,\n        placeholder: placeholder,\n        value: value,\n        labelLayout: labelLayout,\n        leftLayout: leftLayout,\n        rightLayout: rightLayout\n      },\n      innerRef: function innerRef(ref) {\n        root.current = ref;\n      },\n      onFocus: handleFocus,\n      forceFocus: forceFocus,\n      onBlur: handleBlur,\n      onChangeText: handleChangeText,\n      onLayoutAnimatedText: handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: onRightAffixLayoutChange,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }));\n  }\n  return React.createElement(TextInputFlat, _extends({\n    dense: dense,\n    disabled: disabled,\n    error: errorProp,\n    multiline: multiline,\n    editable: editable,\n    render: render\n  }, rest, {\n    value: value,\n    parentState: {\n      labeled: labeled,\n      error: error,\n      focused: focused,\n      placeholder: placeholder,\n      value: value,\n      labelLayout: labelLayout,\n      leftLayout: leftLayout,\n      rightLayout: rightLayout\n    },\n    innerRef: function innerRef(ref) {\n      root.current = ref;\n    },\n    onFocus: handleFocus,\n    forceFocus: forceFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChangeText,\n    onLayoutAnimatedText: handleLayoutAnimatedText,\n    onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n    onRightAffixLayoutChange: onRightAffixLayoutChange,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }));\n});\nTextInput.Icon = TextInputIcon;\nTextInput.Affix = TextInputAffix;\nexport default withInternalTheme(TextInput);","map":{"version":3,"sources":["TextInput.tsx"],"names":["React","withInternalTheme","TextInputAffix","TextInputIcon","TextInputFlat","TextInputOutlined","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","forwardRef","mode","dense","disabled","error","errorProp","multiline","editable","render","props","rest","ref","isControlled","value","undefined","validInputValue","defaultValue","current","labeled","useRef","Animated","Value","focused","setFocused","useState","placeholder","setPlaceholder","uncontrolledValue","setUncontrolledValue","labelLayout","setLabelLayout","measured","width","height","leftLayout","setLeftLayout","rightLayout","setRightLayout","timer","root","scale","theme","animation","useImperativeHandle","focus","clear","setNativeProps","args","isFocused","blur","forceFocus","useEffect","timing","toValue","duration","useNativeDriver","start","label","setTimeout","clearTimeout","onLeftAffixLayoutChange","event","nativeEvent","layout","onRightAffixLayoutChange","handleFocus","onFocus","handleBlur","onBlur","handleChangeText","onChangeText","handleLayoutAnimatedText","e","maxFontSizeMultiplier","Icon","Affix"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAU9B,SAASC,iBAAiB;AAE1B,OAAOC,cAAc;AAGrB,OAAOC,aAAa;AAGpB,OAAOC,aAAa;AACpB,OAAOC,iBAAiB;AAGxB,IAAMC,uBAAuB,GAAG,GAAG;AACnC,IAAMC,wBAAwB,GAAG,GAAG;AAoMpC,IAAMC,SAAS,GAAGR,KAAK,CAACS,UAAU,CAChC,UAAA,IAAA,EAWEW,GAAG,EACA;EAXH,gBASQ,IAAA,CARNV,IAAI;IAAJA,IAAI,0BAAG,MAAM;IAAA,aAQP,IAAA,CAPNC,KAAK;IAALA,KAAK,2BAAG,KAAK;IAAA,gBAOP,IAAA,CANNC,QAAQ;IAARA,QAAQ,8BAAG,KAAK;IAAA,aAMV,IAAA,CALNC,KAAK;IAAEC,SAAS,2BAAG,KAAK;IAAA,iBAKlB,IAAA,CAJNC,SAAS;IAATA,SAAS,+BAAG,KAAK;IAAA,gBAIX,IAAA,CAHNC,QAAQ;IAARA,QAAQ,8BAAG,IAAI;IAAA,cAGT,IAAA,CAFNC,MAAM;IAANA,MAAM,4BAAIC,UAAAA,KAAkB;MAAA,OAAK,KAAA,CAAA,aAAA,CAAC,eAAe,EAAKA,KAAK,CAAI;IAAA;IAC5DC,IAAAA,4BACG,IAAA;EAGR,IAAME,YAAY,GAAGF,IAAI,CAACG,KAAK,KAAKC,SAAS;EAC7C,IAAMC,eAAe,GAAGH,YAAY,GAAGF,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACM,YAAY;EAErE,oBAA6BzB,KAAK,CAAC4B,MAAM,CACvC,IAAIC,QAAQ,CAACC,KAAK,CAACN,eAAe,GAAG,CAAC,GAAG,CAAC,CAAC,CAC5C;IAFgBG,OAAAA,iBAATD,OAAO;EAGf,qBAA2B1B,KAAK,CAAC4B,MAAM,CACrC,IAAIC,QAAQ,CAACC,KAAK,CAAChB,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CACtC;IAFgBD,KAAAA,kBAATa,OAAO;EAGf,sBAA8B1B,KAAK,CAACiC,QAAQ,CAAU,KAAK,CAAC;IAAA;IAArDF,OAAO;IAAEC,UAAU;EAC1B,uBAAsChC,KAAK,CAACiC,QAAQ,CAClD,GAAG,CACJ;IAAA;IAFMC,WAAW;IAAEC,cAAc;EAGlC,uBAAkDnC,KAAK,CAACiC,QAAQ,CAE9DT,eAAe,CAAC;IAAA;IAFXY,iBAAiB;IAAEC,oBAAoB;EAI9C,IAAMf,KAAK,GAAGD,YAAY,GAAGF,IAAI,CAACG,KAAK,GAAGc,iBAAiB;EAE3D,uBAAsCpC,KAAK,CAACiC,QAAQ,CAIjD;MACDO,QAAQ,EAAE,KAAK;MACfC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE;IACV,CAAC,CAAC;IAAA;IARKJ,WAAW;IAAEC,cAAc;EASlC,uBAAoCvC,KAAK,CAACiC,QAAQ,CAG/C;MACDQ,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE;IACV,CAAC,CAAC;IAAA;IANKC,UAAU;IAAEC,aAAa;EAOhC,wBAAsC5C,KAAK,CAACiC,QAAQ,CAGjD;MACDQ,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE;IACV,CAAC,CAAC;IAAA;IANKG,WAAW;IAAEC,cAAc;EAQlC,IAAMC,KAAK,GAAG/C,KAAK,CAAC4B,MAAM,EAA8B;EAExD,IAAMoB,IAAI,GAAGhD,KAAK,CAAC4B,MAAM,EAAsC;EAE/D,IAAQqB,KAAAA,GAAU9B,IAAI,CAAC+B,KAAK,CAACC,SAAS,CAA9BF,KAAAA;EAERjD,KAAK,CAACoD,mBAAmB,CAAChC,GAAG,EAAE;IAAA,OAAO;MACpCiC,KAAK,EAAE,iBAAA;QAAA,IAAA,aAAA;QAAA,OAAA,CAAA,aAAA,GAAML,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,aAAAA,CAAcK,KAAK,EAAE;MAAA,CAAA;MAClCC,KAAK,EAAE,iBAAA;QAAA,IAAA,cAAA;QAAA,OAAA,CAAA,cAAA,GAAMN,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcM,KAAK,EAAE;MAAA,CAAA;MAClCC,cAAc,EAAGC,wBAAAA,IAAY,EAAA;QAAA,IAAA,cAAA;QAAA,OAAA,CAAA,cAAA,GAAKR,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcO,cAAc,CAACC,IAAI,CAAC;MAAA,CAAA;MACpEC,SAAS,EAAE,qBAAA;QAAA,IAAA,cAAA;QAAA,OAAM,CAAA,CAAA,cAAA,GAAA,IAAI,CAAC/B,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,cAAA,CAAc+B,SAAS,EAAE,KAAI,KAAK;MAAA,CAAA;MACnDC,IAAI,EAAE,gBAAA;QAAA,IAAA,cAAA;QAAA,OAAA,CAAA,cAAA,GAAMV,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcU,IAAI,EAAE;MAAA,CAAA;MAChCC,UAAU,EAAE,sBAAA;QAAA,IAAA,cAAA;QAAA,OAAA,CAAA,cAAA,GAAMX,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcK,KAAK,EAAE;MAAA;IACzC,CAAC;EAAA,CAAC,CAAC;EAEHrD,KAAK,CAAC4D,SAAS,CAAC,YAAM;IAEpB,IAAI9C,SAAS,EAAE;MAEbe,QAAQ,CAACgC,MAAM,CAAChD,KAAK,EAAE;QACrBiD,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAExD,wBAAwB,GAAG0C,KAAK;QAE1Ce,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ,CAAC,MAAM;MAEL;QACEpC,QAAQ,CAACgC,MAAM,CAAChD,KAAK,EAAE;UACrBiD,OAAO,EAAE,CAAC;UACVC,QAAQ,EAAEzD,uBAAuB,GAAG2C,KAAK;UAEzCe,eAAe,EAAE;QACnB,CAAC,CAAC,CAACC,KAAK,EAAE;MACZ;IACF;EACF,CAAC,EAAE,CAACnD,SAAS,EAAEmC,KAAK,EAAEpC,KAAK,CAAC,CAAC;EAE7Bb,KAAK,CAAC4D,SAAS,CAAC,YAAM;IAIpB,IAAI7B,OAAO,IAAI,CAACZ,IAAI,CAAC+C,KAAK,EAAE;MAG1B,IAAI/C,IAAI,CAACe,WAAW,EAAE;QAGpBa,KAAK,CAACrB,OAAO,GAAGyC,UAAU,CACxB;UAAA,OAAMhC,cAAc,CAAChB,IAAI,CAACe,WAAW,CAAC;QAAA,GACtC,EAAE,CAC0B;MAChC;IACF,CAAC,MAAM;MAULC,cAAc,CAAC,GAAG,CAAC;IACrB;IAEA,OAAO,YAAM;MACX,IAAIY,KAAK,CAACrB,OAAO,EAAE;QACjB0C,YAAY,CAACrB,KAAK,CAACrB,OAAO,CAAC;MAC7B;IACF,CAAC;EACH,CAAC,EAAE,CAACK,OAAO,EAAEZ,IAAI,CAAC+C,KAAK,EAAE/C,IAAI,CAACe,WAAW,CAAC,CAAC;EAE3ClC,KAAK,CAAC4D,SAAS,CAAC,YAAM;IAKpB,IAAItC,KAAK,IAAIS,OAAO,EAAE;MAEpBF,QAAQ,CAACgC,MAAM,CAAClC,OAAO,EAAE;QACvBmC,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAEzD,uBAAuB,GAAG2C,KAAK;QAEzCe,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ,CAAC,MAAM;MAEL;QACEpC,QAAQ,CAACgC,MAAM,CAAClC,OAAO,EAAE;UACvBmC,OAAO,EAAE,CAAC;UACVC,QAAQ,EAAExD,wBAAwB,GAAG0C,KAAK;UAE1Ce,eAAe,EAAE;QACnB,CAAC,CAAC,CAACC,KAAK,EAAE;MACZ;IACF;EACF,CAAC,EAAE,CAAClC,OAAO,EAAET,KAAK,EAAEK,OAAO,EAAEsB,KAAK,CAAC,CAAC;EAEpC,IAAMoB,uBAAuB,GAAIC,SAA3BD,uBAAuB,CAAIC,KAAwB,EAAK;IAC5D1B,aAAa,CAAC;MACZF,MAAM,EAAE4B,KAAK,CAACC,WAAW,CAACC,MAAM,CAAC9B,MAAM;MACvCD,KAAK,EAAE6B,KAAK,CAACC,WAAW,CAACC,MAAM,CAAC/B;IAClC,CAAC,CAAC;EACJ,CAAC;EAED,IAAMgC,wBAAwB,GAAIH,SAA5BG,wBAAwB,CAAIH,KAAwB,EAAK;IAC7DxB,cAAc,CAAC;MACbL,KAAK,EAAE6B,KAAK,CAACC,WAAW,CAACC,MAAM,CAAC/B,KAAK;MACrCC,MAAM,EAAE4B,KAAK,CAACC,WAAW,CAACC,MAAM,CAAC9B;IACnC,CAAC,CAAC;EACJ,CAAC;EAED,IAAMgC,WAAW,GAAIlB,SAAfkB,WAAW,CAAIlB,IAAS,EAAK;IAAA,IAAA,aAAA;IACjC,IAAI5C,QAAQ,IAAI,CAACI,QAAQ,EAAE;MACzB;IACF;IAEAgB,UAAU,CAAC,IAAI,CAAC;IAEhB,CAAA,aAAA,GAAA,IAAI,CAAC2C,OAAO,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,aAAA,CAAA,IAAA,CAAA,IAAI,EAAWnB,IAAI,CAAC;EACtB,CAAC;EAED,IAAMoB,UAAU,GAAIpB,SAAdoB,UAAU,CAAIpB,IAAY,EAAK;IAAA,IAAA,YAAA;IACnC,IAAI,CAACxC,QAAQ,EAAE;MACb;IACF;IAEAgB,UAAU,CAAC,KAAK,CAAC;IACjB,CAAA,YAAA,GAAA,IAAI,CAAC6C,MAAM,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAX,YAAA,CAAA,IAAA,CAAA,IAAI,EAAUrB,IAAI,CAAC;EACrB,CAAC;EAED,IAAMsB,gBAAgB,GAAIxD,SAApBwD,gBAAgB,CAAIxD,KAAa,EAAK;IAAA,IAAA,kBAAA;IAC1C,IAAI,CAACN,QAAQ,IAAIJ,QAAQ,EAAE;MACzB;IACF;IAEA,IAAI,CAACS,YAAY,EAAE;MAEjBgB,oBAAoB,CAACf,KAAK,CAAC;IAC7B;IACA,CAAA,kBAAA,GAAA,IAAI,CAACyD,YAAY,MAAA,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAjB,kBAAA,CAAA,IAAA,CAAA,IAAI,EAAgBzD,KAAK,CAAC;EAC5B,CAAC;EAED,IAAM0D,wBAAwB,GAAIC,SAA5BD,wBAAwB,CAAIC,CAAoB,EAAK;IACzD1C,cAAc,CAAC;MACbE,KAAK,EAAEwC,CAAC,CAACV,WAAW,CAACC,MAAM,CAAC/B,KAAK;MACjCC,MAAM,EAAEuC,CAAC,CAACV,WAAW,CAACC,MAAM,CAAC9B,MAAM;MACnCF,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC;EACD,IAAMmB,UAAU,GAAG,SAAbA,UAAU,GAAG;IAAA,IAAA,cAAA;IAAA,OAAA,CAAA,cAAA,GAAMX,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcK,KAAK,EAAE;EAAA,CAAA;EAE9C,4BAAwClC,IAAI,CAApC+D,qBAAqB;IAArBA,qBAAqB,sCAAG,GAAA;EAEhC,IAAIxE,IAAI,KAAK,UAAU,EAAE;IACvB,OACE,KAAA,CAAA,aAAA,CAAC,iBAAiB,EAAA,QAAA,CAAA;MAChB,KAAK,EAAEC,KAAM;MACb,QAAQ,EAAEC,QAAS;MACnB,KAAK,EAAEE,SAAU;MACjB,SAAS,EAAEC,SAAU;MACrB,QAAQ,EAAEC,QAAS;MACnB,MAAM,EAAEC;IAAO,CAAA,EACXE,IAAI,EAAA;MACR,KAAK,EAAEG,KAAM;MACb,WAAW,EAAE;QACXK,OAAO,EAAPA,OAAO;QACPd,KAAK,EAALA,KAAK;QACLkB,OAAO,EAAPA,OAAO;QACPG,WAAW,EAAXA,WAAW;QACXZ,KAAK,EAALA,KAAK;QACLgB,WAAW,EAAXA,WAAW;QACXK,UAAU,EAAVA,UAAU;QACVE,WAAAA,EAAAA;MACF,CAAE;MACF,QAAQ,EAAGzB,kBAAAA,GAAG,EAAK;QACjB4B,IAAI,CAACtB,OAAO,GAAGN,GAAG;MACpB,CAAE;MACF,OAAO,EAAEsD,WAAY;MACrB,UAAU,EAAEf,UAAW;MACvB,MAAM,EAAEiB,UAAW;MACnB,YAAY,EAAEE,gBAAiB;MAC/B,oBAAoB,EAAEE,wBAAyB;MAC/C,uBAAuB,EAAEX,uBAAwB;MACjD,wBAAwB,EAAEI,wBAAyB;MACnD,qBAAqB,EAAES;IAAsB,CAAA,CAAA,CAC7C;EAEN;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA,QAAA,CAAA;IACZ,KAAK,EAAEvE,KAAM;IACb,QAAQ,EAAEC,QAAS;IACnB,KAAK,EAAEE,SAAU;IACjB,SAAS,EAAEC,SAAU;IACrB,QAAQ,EAAEC,QAAS;IACnB,MAAM,EAAEC;EAAO,CAAA,EACXE,IAAI,EAAA;IACR,KAAK,EAAEG,KAAM;IACb,WAAW,EAAE;MACXK,OAAO,EAAPA,OAAO;MACPd,KAAK,EAALA,KAAK;MACLkB,OAAO,EAAPA,OAAO;MACPG,WAAW,EAAXA,WAAW;MACXZ,KAAK,EAALA,KAAK;MACLgB,WAAW,EAAXA,WAAW;MACXK,UAAU,EAAVA,UAAU;MACVE,WAAAA,EAAAA;IACF,CAAE;IACF,QAAQ,EAAGzB,kBAAAA,GAAG,EAAK;MACjB4B,IAAI,CAACtB,OAAO,GAAGN,GAAG;IACpB,CAAE;IACF,OAAO,EAAEsD,WAAY;IACrB,UAAU,EAAEf,UAAW;IACvB,MAAM,EAAEiB,UAAW;IACnB,YAAY,EAAEE,gBAAiB;IAC/B,oBAAoB,EAAEE,wBAAyB;IAC/C,uBAAuB,EAAEX,uBAAwB;IACjD,wBAAwB,EAAEI,wBAAyB;IACnD,qBAAqB,EAAES;EAAsB,CAAA,CAAA,CAC7C;AAEN,CAAC,CACqB;AAExB1E,SAAS,CAAC2E,IAAI,GAAGhF,aAAa;AAI9BK,SAAS,CAAC4E,KAAK,GAAGlF,cAAc;AAEhC,eAAeD,iBAAiB,CAACO,SAAS,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  StyleProp,\n  TextInput as NativeTextInput,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport TextInputAffix, {\n  Props as TextInputAffixProps,\n} from './Adornment/TextInputAffix';\nimport TextInputIcon, {\n  Props as TextInputIconProps,\n} from './Adornment/TextInputIcon';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputOutlined from './TextInputOutlined';\nimport type { RenderProps, TextInputLabelProp } from './types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeTextInput> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors?.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text or component to use for the floating label.\n   */\n  label?: TextInputLabelProp;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input.\n   */\n  selectionColor?: string;\n  /**\n   * Inactive underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Active underline color of the input.\n   */\n  activeUnderlineColor?: string;\n  /**\n   * Inactive outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Active outline color of the input.\n   */\n  activeOutlineColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Color of the text in the input.\n   */\n  textColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `height` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * @supported Available in v5.x\n   * Pass style to override the default style of outlined wrapper.\n   * Overrides style when mode is set to `outlined`\n   * Example: `borderRadius`, `borderColor`\n   */\n  outlineStyle?: StyleProp<ViewStyle>;\n  /**\n   * @supported Available in v5.x\n   * Pass style to override the default style of underlined wrapper.\n   * Overrides style when mode is set to `flat`\n   * Example: `borderRadius`, `borderColor`\n   */\n  underlineStyle?: StyleProp<ViewStyle>;\n};\n\ninterface CompoundedComponent\n  extends React.ForwardRefExoticComponent<\n    Props & React.RefAttributes<TextInputHandles>\n  > {\n  Icon: React.FunctionComponent<TextInputIconProps>;\n  Affix: React.FunctionComponent<Partial<TextInputAffixProps>>;\n}\n\ntype TextInputHandles = Pick<\n  NativeTextInput,\n  'focus' | 'clear' | 'blur' | 'isFocused' | 'setNativeProps'\n>;\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nconst TextInput = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      mode = 'flat',\n      dense = false,\n      disabled = false,\n      error: errorProp = false,\n      multiline = false,\n      editable = true,\n      render = (props: RenderProps) => <NativeTextInput {...props} />,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const isControlled = rest.value !== undefined;\n    const validInputValue = isControlled ? rest.value : rest.defaultValue;\n\n    const { current: labeled } = React.useRef<Animated.Value>(\n      new Animated.Value(validInputValue ? 0 : 1)\n    );\n    const { current: error } = React.useRef<Animated.Value>(\n      new Animated.Value(errorProp ? 1 : 0)\n    );\n    const [focused, setFocused] = React.useState<boolean>(false);\n    const [placeholder, setPlaceholder] = React.useState<string | undefined>(\n      ' '\n    );\n    const [uncontrolledValue, setUncontrolledValue] = React.useState<\n      string | undefined\n    >(validInputValue);\n    // Use value from props instead of local state when input is controlled\n    const value = isControlled ? rest.value : uncontrolledValue;\n\n    const [labelLayout, setLabelLayout] = React.useState<{\n      measured: boolean;\n      width: number;\n      height: number;\n    }>({\n      measured: false,\n      width: 0,\n      height: 0,\n    });\n    const [leftLayout, setLeftLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n    const [rightLayout, setRightLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n\n    const timer = React.useRef<NodeJS.Timeout | undefined>();\n\n    const root = React.useRef<NativeTextInput | undefined | null>();\n\n    const { scale } = rest.theme.animation;\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => root.current?.focus(),\n      clear: () => root.current?.clear(),\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      isFocused: () => root.current?.isFocused() || false,\n      blur: () => root.current?.blur(),\n      forceFocus: () => root.current?.focus(),\n    }));\n\n    React.useEffect(() => {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (errorProp) {\n        // show error\n        Animated.timing(error, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // hide error\n        {\n          Animated.timing(error, {\n            toValue: 0,\n            duration: BLUR_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [errorProp, scale, error]);\n\n    React.useEffect(() => {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (focused || !rest.label) {\n        // If the user wants to use the contextMenu, when changing the placeholder, the contextMenu is closed\n        // This is a workaround to mitigate this behavior in scenarios where the placeholder is not specified.\n        if (rest.placeholder) {\n          // Set the placeholder in a delay to offset the label animation\n          // If we show it immediately, they'll overlap and look ugly\n          timer.current = setTimeout(\n            () => setPlaceholder(rest.placeholder),\n            50\n          ) as unknown as NodeJS.Timeout;\n        }\n      } else {\n        // hidePlaceholder\n\n        // Issue: https://github.com/callstack/react-native-paper/issues/3138\n        // Description:   Changing the placeholder text value dynamically,\n        //                within multiline input on iOS, doesn't work properly –\n        //                the placeholder is not displayed initially.\n        // Root cause:    Placeholder initial value, which has length 0.\n        // More context:  The issue was also reproduced in react-native, using its own TextInput.\n        // Workaround:    Set an empty space character in the default value.\n        setPlaceholder(' ');\n      }\n\n      return () => {\n        if (timer.current) {\n          clearTimeout(timer.current);\n        }\n      };\n    }, [focused, rest.label, rest.placeholder]);\n\n    React.useEffect(() => {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      if (value || focused) {\n        // minimize label\n        Animated.timing(labeled, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // restore label\n        {\n          Animated.timing(labeled, {\n            toValue: 1,\n            duration: FOCUS_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [focused, value, labeled, scale]);\n\n    const onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setLeftLayout({\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      });\n    };\n\n    const onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setRightLayout({\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      });\n    };\n\n    const handleFocus = (args: any) => {\n      if (disabled || !editable) {\n        return;\n      }\n\n      setFocused(true);\n\n      rest.onFocus?.(args);\n    };\n\n    const handleBlur = (args: Object) => {\n      if (!editable) {\n        return;\n      }\n\n      setFocused(false);\n      rest.onBlur?.(args);\n    };\n\n    const handleChangeText = (value: string) => {\n      if (!editable || disabled) {\n        return;\n      }\n\n      if (!isControlled) {\n        // Keep track of value in local state when input is not controlled\n        setUncontrolledValue(value);\n      }\n      rest.onChangeText?.(value);\n    };\n\n    const handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n      setLabelLayout({\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      });\n    };\n    const forceFocus = () => root.current?.focus();\n\n    const { maxFontSizeMultiplier = 1.5 } = rest;\n\n    if (mode === 'outlined') {\n      return (\n        <TextInputOutlined\n          dense={dense}\n          disabled={disabled}\n          error={errorProp}\n          multiline={multiline}\n          editable={editable}\n          render={render}\n          {...rest}\n          value={value}\n          parentState={{\n            labeled,\n            error,\n            focused,\n            placeholder,\n            value,\n            labelLayout,\n            leftLayout,\n            rightLayout,\n          }}\n          innerRef={(ref) => {\n            root.current = ref;\n          }}\n          onFocus={handleFocus}\n          forceFocus={forceFocus}\n          onBlur={handleBlur}\n          onChangeText={handleChangeText}\n          onLayoutAnimatedText={handleLayoutAnimatedText}\n          onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n          onRightAffixLayoutChange={onRightAffixLayoutChange}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        />\n      );\n    }\n\n    return (\n      <TextInputFlat\n        dense={dense}\n        disabled={disabled}\n        error={errorProp}\n        multiline={multiline}\n        editable={editable}\n        render={render}\n        {...rest}\n        value={value}\n        parentState={{\n          labeled,\n          error,\n          focused,\n          placeholder,\n          value,\n          labelLayout,\n          leftLayout,\n          rightLayout,\n        }}\n        innerRef={(ref) => {\n          root.current = ref;\n        }}\n        onFocus={handleFocus}\n        forceFocus={forceFocus}\n        onBlur={handleBlur}\n        onChangeText={handleChangeText}\n        onLayoutAnimatedText={handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={onRightAffixLayoutChange}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      />\n    );\n  }\n) as CompoundedComponent;\n// @component ./Adornment/TextInputIcon.tsx\nTextInput.Icon = TextInputIcon;\n\n// @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\nTextInput.Affix = TextInputAffix;\n\nexport default withInternalTheme(TextInput);\n"]},"metadata":{},"sourceType":"module"}