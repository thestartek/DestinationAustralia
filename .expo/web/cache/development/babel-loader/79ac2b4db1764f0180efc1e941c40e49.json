{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { ListAccordionGroupContext } from \"./ListAccordionGroup\";\nimport { getAccordionColors } from \"./utils\";\nvar ListAccordion = function ListAccordion(_ref) {\n  var _theme$colors, _theme$colors2;\n  var left = _ref.left,\n    right = _ref.right,\n    title = _ref.title,\n    description = _ref.description,\n    children = _ref.children,\n    theme = _ref.theme,\n    titleStyle = _ref.titleStyle,\n    descriptionStyle = _ref.descriptionStyle,\n    _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n    titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n    _ref$descriptionNumbe = _ref.descriptionNumberOfLines,\n    descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,\n    style = _ref.style,\n    id = _ref.id,\n    testID = _ref.testID,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    expandedProp = _ref.expanded,\n    accessibilityLabel = _ref.accessibilityLabel;\n  var _React$useState = React.useState(expandedProp || false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    expanded = _React$useState2[0],\n    setExpanded = _React$useState2[1];\n  var handlePressAction = function handlePressAction(e) {\n    onPress === null || onPress === void 0 ? void 0 : onPress(e);\n    if (expandedProp === undefined) {\n      setExpanded(function (expanded) {\n        return !expanded;\n      });\n    }\n  };\n  var expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n  var groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n  }\n  var isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n  var _getAccordionColors = getAccordionColors({\n      theme: theme,\n      isExpanded: isExpanded\n    }),\n    titleColor = _getAccordionColors.titleColor,\n    descriptionColor = _getAccordionColors.descriptionColor,\n    titleTextColor = _getAccordionColors.titleTextColor,\n    rippleColor = _getAccordionColors.rippleColor;\n  var handlePress = groupContext && id !== undefined ? function () {\n    return groupContext.onAccordionPress(id);\n  } : handlePressAction;\n  return React.createElement(View, null, React.createElement(View, {\n    style: {\n      backgroundColor: theme === null || theme === void 0 ? void 0 : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.background\n    }\n  }, React.createElement(TouchableRipple, {\n    style: [styles.container, style],\n    onPress: handlePress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      expanded: isExpanded\n    },\n    accessibilityLabel: accessibilityLabel,\n    testID: testID,\n    borderless: true\n  }, React.createElement(View, {\n    style: styles.row,\n    pointerEvents: \"none\"\n  }, left ? left({\n    color: isExpanded ? (_theme$colors2 = theme.colors) === null || _theme$colors2 === void 0 ? void 0 : _theme$colors2.primary : descriptionColor\n  }) : null, React.createElement(View, {\n    style: [styles.item, styles.content]\n  }, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: titleNumberOfLines,\n    style: [styles.title, {\n      color: titleTextColor\n    }, titleStyle]\n  }, title), description ? React.createElement(Text, {\n    selectable: false,\n    numberOfLines: descriptionNumberOfLines,\n    style: [styles.description, {\n      color: descriptionColor\n    }, descriptionStyle]\n  }, description) : null), React.createElement(View, {\n    style: [styles.item, description ? styles.multiline : undefined]\n  }, right ? right({\n    isExpanded: isExpanded\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: isExpanded ? 'chevron-up' : 'chevron-down',\n    color: theme.isV3 ? descriptionColor : titleColor,\n    size: 24,\n    direction: I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'\n  }))))), isExpanded ? React.Children.map(children, function (child) {\n    if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n      return React.cloneElement(child, {\n        style: [styles.child, child.props.style]\n      });\n    }\n    return child;\n  }) : null);\n};\nListAccordion.displayName = 'List.Accordion';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withInternalTheme(ListAccordion);","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAAA;AAW9B,SAASC,iBAAiB;AAE1B,OAAOC,qBAAqB;AAC5B,OAAOC,eAAe;AACtB,OAAOC,IAAI;AACX,SAASC,yBAAyB;AAClC,SAASC,kBAAkB;AAwH3B,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CAAGC,MAkBT;EAAA;EAAA,IAjBXC,IAAI,GAiBED,KAjBNC,IAAI;IACJC,KAAK,GAgBCF,KAhBNE,KAAK;IACLC,KAAK,GAeCH,KAfNG,KAAK;IACLC,WAAW,GAcLJ,KAdNI,WAAW;IACXC,QAAQ,GAaFL,KAbNK,QAAQ;IACRC,KAAK,GAYCN,KAZNM,KAAK;IACLC,UAAU,GAWJP,KAXNO,UAAU;IACVC,gBAAgB,GAUVR,KAVNQ,gBAAgB;IAAA,wBAUVR,KATNS,kBAAkB;IAAlBA,kBAAkB,sCAAG,CAAC;IAAA,wBAShBT,KARNU,wBAAwB;IAAxBA,wBAAwB,sCAAG,CAAC;IAC5BC,KAAK,GAOCX,KAPNW,KAAK;IACLC,EAAE,GAMIZ,KANNY,EAAE;IACFC,MAAM,GAKAb,KALNa,MAAM;IACNC,OAAO,GAIDd,KAJNc,OAAO;IACPC,WAAW,GAGLf,KAHNe,WAAW;IACDC,YAAY,GAEhBhB,KAFNiB,QAAQ;IACRC,qBACMlB,KADNkB;EAEA,sBAAgC1B,KAAK,CAAC2B,QAAQ,CAC5CH,YAAY,IAAI,KAAK,CACtB;IAAA;IAFMC,QAAQ;IAAEG,WAAW;EAI5B,IAAMC,iBAAiB,GAAIC,SAArBD,iBAAiB,CAAIC,CAAwB,EAAK;IACtDR,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAGQ,CAAC,CAAC;IAEZ,IAAIN,YAAY,KAAKO,SAAS,EAAE;MAG9BH,WAAW,CAAEH,kBAAQ;QAAA,OAAK,CAACA,QAAQ;MAAA,EAAC;IACtC;EACF,CAAC;EAED,IAAMO,gBAAgB,GAAGR,YAAY,KAAKO,SAAS,GAAGP,YAAY,GAAGC,QAAQ;EAE7E,IAAMQ,YAAY,GAAGjC,KAAK,CAACkC,UAAU,CAAC7B,yBAAyB,CAAC;EAChE,IAAI4B,YAAY,KAAK,IAAI,IAAI,CAACb,EAAE,EAAE;IAChC,MAAM,IAAIe,KAAK,CACb,oFAAoF,CACrF;EACH;EACA,IAAMC,UAAU,GAAGH,YAAY,GAC3BA,YAAY,CAACI,UAAU,KAAKjB,EAAE,GAC9BY,gBAAgB;EAEpB,0BACE1B,kBAAkB,CAAC;MACjBQ,KAAK,EAALA,KAAK;MACLsB;IACF,CAAC,CAAC;IAJIE,UAAU,uBAAVA,UAAU;IAAEC,gBAAgB,uBAAhBA,gBAAgB;IAAEC,cAAc,uBAAdA,cAAc;IAAEC;EAMtD,IAAMC,WAAW,GACfT,YAAY,IAAIb,EAAE,KAAKW,SAAS,GAC5B;IAAA,OAAME,YAAY,CAACU,gBAAgB,CAACvB,EAAE,CAAC;EAAA,IACvCS,iBAAiB;EACvB,OACE7B,oBAAC4C,IAAI,QACH5C,oBAAC4C,IAAI;IAACzB,KAAK,EAAE;MAAE0B,eAAe,EAAE/B,KAAK,aAALA,KAAK,wCAALA,KAAK,CAAEgC,MAAM,kDAAbC,cAAeC;IAAW;EAAE,GAC1DhD,oBAACG,eAAe;IACdgB,KAAK,EAAE,CAAC8B,MAAM,CAACC,SAAS,EAAE/B,KAAK,CAAE;IACjCG,OAAO,EAAEoB,WAAY;IACrBnB,WAAW,EAAEA,WAAY;IACzBkB,WAAW,EAAEA,WAAY;IACzBU,iBAAiB,EAAC,QAAQ;IAC1BC,kBAAkB,EAAE;MAAE3B,QAAQ,EAAEW;IAAW,CAAE;IAC7CV,kBAAkB,EAAEA,kBAAmB;IACvCL,MAAM,EAAEA,MAAO;IACfgC,UAAU;EAAA,GAEVrD,oBAAC4C,IAAI;IAACzB,KAAK,EAAE8B,MAAM,CAACK,GAAI;IAACC,aAAa,EAAC;EAAM,GAC1C9C,IAAI,GACDA,IAAI,CAAC;IACH+C,KAAK,EAAEpB,UAAU,qBAAGtB,KAAK,CAACgC,MAAM,mDAAZW,eAAcC,OAAO,GAAGnB;EAC9C,CAAC,CAAC,GACF,IAAI,EACRvC,oBAAC4C,IAAI;IAACzB,KAAK,EAAE,CAAC8B,MAAM,CAACU,IAAI,EAAEV,MAAM,CAACW,OAAO;EAAE,GACzC5D,oBAACI,IAAI;IACHyD,UAAU,EAAE,KAAM;IAClBC,aAAa,EAAE7C,kBAAmB;IAClCE,KAAK,EAAE,CACL8B,MAAM,CAACtC,KAAK,EACZ;MACE6C,KAAK,EAAEhB;IACT,CAAC,EACDzB,UAAU;EACV,GAEDJ,KAAK,CACD,EACNC,WAAW,GACVZ,oBAACI,IAAI;IACHyD,UAAU,EAAE,KAAM;IAClBC,aAAa,EAAE5C,wBAAyB;IACxCC,KAAK,EAAE,CACL8B,MAAM,CAACrC,WAAW,EAClB;MACE4C,KAAK,EAAEjB;IACT,CAAC,EACDvB,gBAAgB;EAChB,GAEDJ,WAAW,CACP,GACL,IAAI,CACH,EACPZ,oBAAC4C,IAAI;IACHzB,KAAK,EAAE,CAAC8B,MAAM,CAACU,IAAI,EAAE/C,WAAW,GAAGqC,MAAM,CAACc,SAAS,GAAGhC,SAAS;EAAE,GAEhErB,KAAK,GACJA,KAAK,CAAC;IACJ0B,UAAU,EAAEA;EACd,CAAC,CAAC,GAEFpC,oBAACE,qBAAqB;IACpB8D,IAAI,EAAE5B,UAAU,GAAG,YAAY,GAAG,cAAe;IACjDoB,KAAK,EAAE1C,KAAK,CAACmD,IAAI,GAAG1B,gBAAgB,GAAGD,UAAW;IAClD4B,IAAI,EAAE,EAAG;IACTC,SAAS,EAAEC,WAAW,CAACC,YAAY,EAAE,CAACC,KAAK,GAAG,KAAK,GAAG;EAAM,EAE/D,CACI,CACF,CACS,CACb,EAENlC,UAAU,GACPpC,KAAK,CAACuE,QAAQ,CAACC,GAAG,CAAC3D,QAAQ,EAAG4D,eAAK,EAAK;IACtC,IACEhE,IAAI,IACJT,KAAK,CAAC0E,cAAc,CAACD,KAAK,CAAC,IAC3B,CAACA,KAAK,CAACE,KAAK,CAAClE,IAAI,IACjB,CAACgE,KAAK,CAACE,KAAK,CAACjE,KAAK,EAClB;MACA,OAAOV,KAAK,CAAC4E,YAAY,CAACH,KAAK,EAA6B;QAC1DtD,KAAK,EAAE,CAAC8B,MAAM,CAACwB,KAAK,EAAEA,KAAK,CAACE,KAAK,CAACxD,KAAK;MACzC,CAAC,CAAC;IACJ;IAEA,OAAOsD,KAAK;EACd,CAAC,CAAC,GACF,IAAI,CACH;AAEX,CAAC;AAEDlE,aAAa,CAACsE,WAAW,GAAG,gBAAgB;AAE5C,IAAM5B,MAAM,GAAG6B,UAAU,CAACC,MAAM,CAAC;EAC/B7B,SAAS,EAAE;IACT8B,OAAO,EAAE;EACX,CAAC;EACD1B,GAAG,EAAE;IACH2B,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;EACd,CAAC;EACDnB,SAAS,EAAE;IACToB,MAAM,EAAE,EAAE;IACVD,UAAU,EAAE,QAAQ;IACpBE,cAAc,EAAE;EAClB,CAAC;EACDzE,KAAK,EAAE;IACL0E,QAAQ,EAAE;EACZ,CAAC;EACDzE,WAAW,EAAE;IACXyE,QAAQ,EAAE;EACZ,CAAC;EACD1B,IAAI,EAAE;IACJ2B,MAAM,EAAE;EACV,CAAC;EACDb,KAAK,EAAE;IACLc,WAAW,EAAE;EACf,CAAC;EACD3B,OAAO,EAAE;IACP4B,IAAI,EAAE,CAAC;IACPJ,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAenF,iBAAiB,CAACM,aAAa,CAAC","names":["React","withInternalTheme","MaterialCommunityIcon","TouchableRipple","Text","ListAccordionGroupContext","getAccordionColors","ListAccordion","_ref","left","right","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expandedProp","expanded","accessibilityLabel","useState","setExpanded","handlePressAction","e","undefined","expandedInternal","groupContext","useContext","Error","isExpanded","expandedId","titleColor","descriptionColor","titleTextColor","rippleColor","handlePress","onAccordionPress","View","backgroundColor","colors","_theme$colors","background","styles","container","accessibilityRole","accessibilityState","borderless","row","pointerEvents","color","_theme$colors2","primary","item","content","selectable","numberOfLines","multiline","name","isV3","size","direction","I18nManager","getConstants","isRTL","Children","map","child","isValidElement","props","cloneElement","displayName","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"sources":["ListAccordion.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\nimport { getAccordionColors } from './utils';\n\nexport type Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the TouchableRipple. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n  accessibilityLabel,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = (e: GestureResponderEvent) => {\n    onPress?.(e);\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n\n  const { titleColor, descriptionColor, titleTextColor, rippleColor } =\n    getAccordionColors({\n      theme,\n      isExpanded,\n    });\n\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <View style={{ backgroundColor: theme?.colors?.background }}>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          rippleColor={rippleColor}\n          accessibilityRole=\"button\"\n          accessibilityState={{ expanded: isExpanded }}\n          accessibilityLabel={accessibilityLabel}\n          testID={testID}\n          borderless\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: isExpanded ? theme.colors?.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                selectable={false}\n                numberOfLines={titleNumberOfLines}\n                style={[\n                  styles.title,\n                  {\n                    color: titleTextColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description ? (\n                <Text\n                  selectable={false}\n                  numberOfLines={descriptionNumberOfLines}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              ) : null}\n            </View>\n            <View\n              style={[styles.item, description ? styles.multiline : undefined]}\n            >\n              {right ? (\n                right({\n                  isExpanded: isExpanded,\n                })\n              ) : (\n                <MaterialCommunityIcon\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                  color={theme.isV3 ? descriptionColor : titleColor}\n                  size={24}\n                  direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n                />\n              )}\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child as React.ReactElement<any>, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withInternalTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}