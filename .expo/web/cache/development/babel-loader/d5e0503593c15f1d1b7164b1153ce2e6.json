{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar AuthenticationToken = NativeModules.FBAuthenticationToken;\nvar FBAuthenticationToken = function () {\n  function FBAuthenticationToken(tokenMap) {\n    _classCallCheck(this, FBAuthenticationToken);\n    _defineProperty(this, \"authenticationToken\", void 0);\n    _defineProperty(this, \"nonce\", void 0);\n    _defineProperty(this, \"graphDomain\", void 0);\n    this.authenticationToken = tokenMap.authenticationToken;\n    this.nonce = tokenMap.nonce;\n    this.graphDomain = tokenMap.graphDomain;\n    Object.freeze(this);\n  }\n  _createClass(FBAuthenticationToken, null, [{\n    key: \"getAuthenticationTokenIOS\",\n    value: function getAuthenticationTokenIOS() {\n      if (Platform.OS === 'android') {\n        return Promise.resolve(null);\n      }\n      return new Promise(function (resolve) {\n        AuthenticationToken.getAuthenticationToken(function (tokenMap) {\n          if (tokenMap) {\n            resolve(new FBAuthenticationToken(tokenMap));\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    }\n  }]);\n  return FBAuthenticationToken;\n}();\nexport default FBAuthenticationToken;","map":{"version":3,"sources":["FBAuthenticationToken.ts"],"names":["AuthenticationToken","NativeModules","FBAuthenticationToken","constructor","tokenMap","authenticationToken","nonce","graphDomain","Object","freeze","getAuthenticationTokenIOS","Platform","OS","Promise","resolve","getAuthenticationToken"],"mappings":";;;;;;;;;;;;;;;;;AAKA,IAAMA,mBAAmB,GAAGC,aAAa,CAACC,qBAA1C;AAAA,IAWMA,qBAAN;EAgBEC,+BAAYC,QAAD,EAAmC;IAAA;IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;IAC5C,IAAA,CAAKC,mBAAL,GAA2BD,QAAQ,CAACC,mBAApC;IACA,IAAA,CAAKC,KAAL,GAAaF,QAAQ,CAACE,KAAtB;IACA,IAAA,CAAKC,WAAL,GAAmBH,QAAQ,CAACG,WAA5B;IACAC,MAAM,CAACC,MAAPD,CAAc,IAAdA,CAAAA;EACD;EAAA;IAAA;IAAA,OAKME,qCAA4B;MACjC,IAAIC,QAAQ,CAACC,EAATD,KAAgB,SAApB,EAA+B;QAC7B,OAAOE,OAAO,CAACC,OAARD,CAAgB,IAAhBA,CAAP;MACD;MACD,OAAO,IAAIA,OAAJ,CAA2CC,UAAAA,OAAD,EAAa;QAC5Dd,mBAAmB,CAACe,sBAApBf,CACGI,UAAAA,QAAD,EAAsC;UACpC,IAAIA,QAAJ,EAAc;YACZU,OAAO,CAAC,IAAIZ,qBAAJ,CAA0BE,QAA1B,CAAD,CAAPU;UACD,CAFD,MAEO;YACLA,OAAO,CAAC,IAAD,CAAPA;UACD;QACF,CAPHd,CAAAA;MASD,CAVM,CAAP;IAWD;EAAA;EAAA;AAAA;AAGH,eAAeE,qBAAf","sourcesContent":["/**\n * @format\n */\nimport {Platform, NativeModules} from 'react-native';\n\nconst AuthenticationToken = NativeModules.FBAuthenticationToken;\n\nexport type AuthenticationTokenMap = {\n  authenticationToken: string;\n  nonce: string;\n  graphDomain: string;\n};\n\n/**\n * Represents an immutable access token for using Facebook services.\n */\nclass FBAuthenticationToken {\n  /**\n     The raw token string from the authentication response\n    */\n  authenticationToken: string;\n\n  /**\n     The nonce from the decoded authentication response\n    */\n  nonce: string;\n\n  /**\n    The graph domain where the user is authenticated.\n   */\n  graphDomain: string;\n\n  constructor(tokenMap: AuthenticationTokenMap) {\n    this.authenticationToken = tokenMap.authenticationToken;\n    this.nonce = tokenMap.nonce;\n    this.graphDomain = tokenMap.graphDomain;\n    Object.freeze(this);\n  }\n\n  /**\n   * Getter for the authentication token\n   */\n  static getAuthenticationTokenIOS() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(null);\n    }\n    return new Promise<FBAuthenticationToken | null>((resolve) => {\n      AuthenticationToken.getAuthenticationToken(\n        (tokenMap: AuthenticationTokenMap) => {\n          if (tokenMap) {\n            resolve(new FBAuthenticationToken(tokenMap));\n          } else {\n            resolve(null);\n          }\n        },\n      );\n    });\n  }\n}\n\nexport default FBAuthenticationToken;\n"]},"metadata":{},"sourceType":"module"}