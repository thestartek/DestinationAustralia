{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nimport { vec } from \"./Vectors\";\nvar divide = Animated.divide,\n    sub = Animated.sub,\n    multiply = Animated.multiply,\n    add = Animated.add,\n    cos = Animated.cos,\n    sin = Animated.sin;\nexport var translateZ = function translateZ(perspective, z) {\n  return {\n    scale: divide(perspective, sub(perspective, z))\n  };\n};\nexport var translate = function translate(_ref) {\n  var translateX = _ref.x,\n      translateY = _ref.y;\n  return [{\n    translateX: translateX\n  }, {\n    translateY: translateY\n  }];\n};\nexport var transformOrigin = function transformOrigin(_ref2) {\n  var x = _ref2.x,\n      y = _ref2.y;\n\n  for (var _len = arguments.length, transformations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    transformations[_key - 1] = arguments[_key];\n  }\n\n  return [{\n    translateX: x\n  }, {\n    translateY: y\n  }].concat(transformations, [{\n    translateX: multiply(x, -1)\n  }, {\n    translateY: multiply(y, -1)\n  }]);\n};\nexport var rotateTranslation = function rotateTranslation(tr, rotate) {\n  return {\n    x: sub(multiply(tr.x, cos(rotate)), multiply(tr.y, sin(rotate))),\n    y: add(multiply(tr.x, sin(rotate)), multiply(tr.y, cos(rotate)))\n  };\n};\nexport var scaleTranslation = function scaleTranslation(tr, scale) {\n  return vec.multiply(tr, scale);\n};","map":{"version":3,"sources":["Transformations.ts"],"names":["divide","sub","multiply","add","cos","sin","Animated","translateZ","scale","translate","translateX","translateY","transformOrigin","x","y","transformations","rotateTranslation","tr","scaleTranslation","vec"],"mappings":"AAAA,OAAA,QAAA,MAAA,yBAAA;AAGA,SAAA,GAAA;AAGQA,IAAAA,M,GAAyCM,Q,CAAzCN,MAAAA;AAAAA,IAAQC,G,GAAiCK,Q,CAAjCL,GAARD;AAAAA,IAAaE,Q,GAA4BI,Q,CAA5BJ,QAAbF;AAAAA,IAAuBG,G,GAAkBG,Q,CAAlBH,GAAvBH;AAAAA,IAA4BI,G,GAAaE,Q,CAAbF,GAA5BJ;AAAAA,IAAiCK,G,GAAQC,Q,CAARD,GAAjCL;AAER,OAAO,IAAMO,UAAU,GAAVA,SAAAA,UAAAA,CAAa,WAAbA,EAAa,CAAbA,EAAa;EAAA,OAGpB;IAAEC,KAAK,EAAER,MAAM,CAAA,WAAA,EAAcC,GAAG,CAAA,WAAA,EAHZ,CAGY,CAAjB;EAAf,CAHoB;AAAnB,CAAA;AAKP,OAAO,IAAMQ,SAAS,GAATA,SAAAA,SAAAA,CAAY,IAAZA,EAAY;EAAA,IAAMC,UAAN,GAAA,IAAA,CAAA,CAAA;EAAA,IAAqBC,UAArB,GAAA,IAAA,CAAA,CAAA;EAAA,OAA8C,CACrE;IAAED,UAAU,EADyD;EACrE,CADqE,EAErE;IAAEC,UAAU,EAFW;EAEvB,CAFqE,CAA9C;AAAlB,CAAA;AAKP,OAAO,IAAMC,eAAe,GAAfA,SAAAA,eAAAA,CAAkB,KAAlBA,EAAkB;EAAA,IAC3BC,CAD2B,GAAA,KAAA,CAAA,CAAA;EAAA,IACxBC,CADwB,GAAA,KAAA,CAAA,CAAA;;EAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAE1BC,eAF0B,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;IAE1BA,eAF0B,CAAA,IAAA,GAAA,CAAA,CAE1BA,GAF0B,SAAA,CAAA,IAAA,CAE1BA;EAF0B;;EAAA,OAAA,CAI7B;IAAEL,UAAU,EAJiB;EAI7B,CAJ6B,EAK7B;IAAEC,UAAU,EALiB;EAK7B,CAL6B,EAAA,MAAA,CAAA,eAAA,EAAA,CAO7B;IAAED,UAAU,EAAER,QAAQ,CAAA,CAAA,EAAI,CAPG,CAOP;EAAtB,CAP6B,EAQ7B;IAAES,UAAU,EAAET,QAAQ,CAAA,CAAA,EAAI,CARG,CAQP;EAAtB,CAR6B,CAAA,CAAA;AAAxB,CAAA;AAWP,OAAO,IAAMc,iBAAiB,GAAjBA,SAAAA,iBAAAA,CAAoB,EAApBA,EAAoB,MAApBA,EAAoB;EAAA,OAG3B;IACJH,CAAC,EAAEZ,GAAG,CAACC,QAAQ,CAACe,EAAE,CAAH,CAAA,EAAOb,GAAG,CAAnB,MAAmB,CAAV,CAAT,EAA8BF,QAAQ,CAACe,EAAE,CAAH,CAAA,EAAOZ,GAAG,CADlD,MACkD,CAAV,CAAtC,CADF;IAEJS,CAAC,EAAEX,GAAG,CAACD,QAAQ,CAACe,EAAE,CAAH,CAAA,EAAOZ,GAAG,CAAnB,MAAmB,CAAV,CAAT,EAA8BH,QAAQ,CAACe,EAAE,CAAH,CAAA,EAAOb,GAAG,CALvB,MAKuB,CAAV,CAAtC;EAFF,CAH2B;AAA1B,CAAA;AAQP,OAAO,IAAMc,gBAAgB,GAAhBA,SAAAA,gBAAAA,CAAmB,EAAnBA,EAAmB,KAAnBA,EAAmB;EAAA,OAG3BC,GAAG,CAAHA,QAAAA,CAAAA,EAAAA,EAH2B,KAG3BA,CAH2B;AAAzB,CAAA","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport type { Vector } from \"./Vectors\";\nimport { vec } from \"./Vectors\";\nimport type { Transforms2d } from \"./Matrix3\";\n\nconst { divide, sub, multiply, add, cos, sin } = Animated;\n\nexport const translateZ = (\n  perspective: Animated.Adaptable<number>,\n  z: Animated.Adaptable<number>\n) => ({ scale: divide(perspective, sub(perspective, z)) });\n\nexport const translate = ({ x: translateX, y: translateY }: Vector) => [\n  { translateX },\n  { translateY },\n];\n\nexport const transformOrigin = (\n  { x, y }: Vector,\n  ...transformations: Transforms2d\n): Transforms2d => [\n  { translateX: x },\n  { translateY: y },\n  ...transformations,\n  { translateX: multiply(x, -1) },\n  { translateY: multiply(y, -1) },\n];\n\nexport const rotateTranslation = (\n  tr: Vector,\n  rotate: Animated.Adaptable<number>\n) => ({\n  x: sub(multiply(tr.x, cos(rotate)), multiply(tr.y, sin(rotate))),\n  y: add(multiply(tr.x, sin(rotate)), multiply(tr.y, cos(rotate))),\n});\n\nexport const scaleTranslation = (\n  tr: Vector,\n  scale: Animated.Adaptable<number>\n) => vec.multiply(tr, scale);\n"]},"metadata":{},"sourceType":"module"}