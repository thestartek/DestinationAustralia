{"ast":null,"code":"import { isDefined, isString } from \"./util/validate\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar Settings = NativeModules.FBSettings;\nexport default {\n  getAdvertiserTrackingEnabled: function getAdvertiserTrackingEnabled() {\n    if (Platform.OS === 'ios') {\n      return Settings.getAdvertiserTrackingEnabled();\n    } else {\n      return Promise.resolve(true);\n    }\n  },\n  setAdvertiserTrackingEnabled: function setAdvertiserTrackingEnabled(ATE) {\n    if (Platform.OS === 'ios') {\n      return Settings.setAdvertiserTrackingEnabled(ATE);\n    } else {\n      return Promise.resolve(false);\n    }\n  },\n  setDataProcessingOptions: function setDataProcessingOptions(options) {\n    var country = 0;\n    if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'number') {\n      country = arguments.length <= 1 ? undefined : arguments[1];\n    }\n    var state = 0;\n    if (typeof (arguments.length <= 2 ? undefined : arguments[2]) === 'number') {\n      state = arguments.length <= 2 ? undefined : arguments[2];\n    }\n    Settings.setDataProcessingOptions(options, country, state);\n  },\n  initializeSDK: function initializeSDK() {\n    Settings.initializeSDK();\n  },\n  setAppID: function setAppID(appID) {\n    if (!isDefined(appID) || !isString(appID) || appID.length === 0) {\n      throw new Error(\"setAppID expected 'appID' to be a non empty string\");\n    }\n    Settings.setAppID(appID);\n  }\n};","map":{"version":3,"sources":["FBSettings.ts"],"names":["isDefined","isString","Settings","NativeModules","FBSettings","getAdvertiserTrackingEnabled","Platform","OS","Promise","resolve","setAdvertiserTrackingEnabled","ATE","setDataProcessingOptions","options","country","state","initializeSDK","setAppID","appID","length","Error"],"mappings":"AASA,SAAQA,SAAR,EAAmBC,QAAnB;AAAA;AAAA;AAGA,IAAMC,QAAQ,GAAGC,aAAa,CAACC,UAA/B;AAEA,eAAe;EAKbC,4BAA4B,0CAAqB;IAC/C,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;MACzB,OAAOJ,QAAQ,CAACG,4BAATH,EAAP;IACD,CAFD,MAEO;MACL,OAAOM,OAAO,CAACC,OAARD,CAAgB,IAAhBA,CAAP;IACD;EACF,CAXY;EAgBbE,4BAA4B,wCAACC,GAAD,EAAiC;IAC3D,IAAIL,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;MACzB,OAAOJ,QAAQ,CAACQ,4BAATR,CAAsCS,GAAtCT,CAAP;IACD,CAFD,MAEO;MACL,OAAOM,OAAO,CAACC,OAARD,CAAgB,KAAhBA,CAAP;IACD;EACF,CAtBY;EA0BbI,wBAAwB,oCAACC,OAAD,EAAiD;IACvE,IAAIC,OAAO,GAAG,CAAd;IACA,IAAI,QAAA,SAAA,CAAA,MAAA,IAAA,CAAA,GAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,CAAA,KAAmB,QAAvB,EAAiC;MAC/BA,OAAO,GAAA,SAAA,CAAA,MAAA,IAAA,CAAA,GAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAPA;IACD;IACD,IAAIC,KAAK,GAAG,CAAZ;IACA,IAAI,QAAA,SAAA,CAAA,MAAA,IAAA,CAAA,GAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,CAAA,KAAmB,QAAvB,EAAiC;MAC/BA,KAAK,GAAA,SAAA,CAAA,MAAA,IAAA,CAAA,GAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAALA;IACD;IACDb,QAAQ,CAACU,wBAATV,CAAkCW,OAAlCX,EAA2CY,OAA3CZ,EAAoDa,KAApDb,CAAAA;EACD,CApCY;EAwCbc,aAAa,2BAAG;IACdd,QAAQ,CAACc,aAATd,EAAAA;EACD,CA1CY;EA8Cbe,QAAQ,oBAACC,KAAD,EAAgB;IACtB,IAAI,CAAClB,SAAS,CAACkB,KAAD,CAAV,IAAqB,CAACjB,QAAQ,CAACiB,KAAD,CAA9B,IAAyCA,KAAK,CAACC,MAAND,KAAiB,CAA9D,EAAiE;MAC/D,MAAM,IAAIE,KAAJ,CAAU,oDAAV,CAAN;IACD;IACDlB,QAAQ,CAACe,QAATf,CAAkBgB,KAAlBhB,CAAAA;EACD;AAnDY,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nimport {isDefined, isString} from './util/validate';\nimport {Platform, NativeModules} from 'react-native';\n\nconst Settings = NativeModules.FBSettings;\n\nexport default {\n  /**\n   * For iOS only, get AdvertiserTrackingEnabled status.\n   * @platform ios\n   */\n  getAdvertiserTrackingEnabled(): Promise<boolean> {\n    if (Platform.OS === 'ios') {\n      return Settings.getAdvertiserTrackingEnabled();\n    } else {\n      return Promise.resolve(true);\n    }\n  },\n  /**\n   * For iOS only, set AdvertiserTrackingEnabled status, only works in iOS 14 and above.\n   * @platform ios\n   */\n  setAdvertiserTrackingEnabled(ATE: boolean): Promise<boolean> {\n    if (Platform.OS === 'ios') {\n      return Settings.setAdvertiserTrackingEnabled(ATE);\n    } else {\n      return Promise.resolve(false);\n    }\n  },\n  /**\n   * Set data processing options\n   */\n  setDataProcessingOptions(options: Array<string>, ...args: Array<number>) {\n    let country = 0;\n    if (typeof args[0] === 'number') {\n      country = args[0];\n    }\n    let state = 0;\n    if (typeof args[1] === 'number') {\n      state = args[1];\n    }\n    Settings.setDataProcessingOptions(options, country, state);\n  },\n  /**\n   * Initialize the sdk\n   */\n  initializeSDK() {\n    Settings.initializeSDK();\n  },\n  /**\n   * Set app id\n   */\n  setAppID(appID: string) {\n    if (!isDefined(appID) || !isString(appID) || appID.length === 0) {\n      throw new Error(\"setAppID expected 'appID' to be a non empty string\");\n    }\n    Settings.setAppID(appID);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}