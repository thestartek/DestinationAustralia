{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nvar INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nvar REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\nvar _getFallbackInstallationId = function getFallbackInstallationId() {\n  var sessionInstallationId = uuidv4();\n  _getFallbackInstallationId = function getFallbackInstallationId() {\n    return sessionInstallationId;\n  };\n};\nexport default {\n  getInstallationIdAsync: function () {\n    var _getInstallationIdAsync = _asyncToGenerator(function* () {\n      var installationId;\n      try {\n        installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n        if (!installationId || typeof installationId !== 'string') {\n          installationId = uuidv4();\n          localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n        }\n      } catch (_unused) {\n        installationId = _getFallbackInstallationId();\n      }\n      return installationId;\n    });\n    function getInstallationIdAsync() {\n      return _getInstallationIdAsync.apply(this, arguments);\n    }\n    return getInstallationIdAsync;\n  }(),\n  getRegistrationInfoAsync: function () {\n    var _getRegistrationInfoAsync = _asyncToGenerator(function* () {\n      return localStorage.getItem(REGISTRATION_INFO_KEY);\n    });\n    function getRegistrationInfoAsync() {\n      return _getRegistrationInfoAsync.apply(this, arguments);\n    }\n    return getRegistrationInfoAsync;\n  }(),\n  setRegistrationInfoAsync: function () {\n    var _setRegistrationInfoAsync = _asyncToGenerator(function* (registrationInfo) {\n      try {\n        if (registrationInfo) {\n          localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n        } else {\n          localStorage.removeItem(REGISTRATION_INFO_KEY);\n        }\n      } catch (error) {\n        throw new CodedError('ERR_NOTIFICATIONS_STORAGE_ERROR', \"Could not modify localStorage to persist auto-registration information: \" + error);\n      }\n    });\n    function setRegistrationInfoAsync(_x) {\n      return _setRegistrationInfoAsync.apply(this, arguments);\n    }\n    return setRegistrationInfoAsync;\n  }(),\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {}\n};","map":{"version":3,"sources":["../src/ServerRegistrationModule.web.ts"],"names":[],"mappings":";AAAA,SAAS,UAAU,QAAQ,mBAAmB;AAC9C,SAAS,EAAE,IAAI,MAAM,QAAQ,MAAM;AAInC,IAAM,mBAAmB,GAAG,oCAAoC;AAChE,IAAM,qBAAqB,GAAG,sCAAsC;AAGpE,IAAI,0BAAyB,GAAG,qCAAK;EACnC,IAAM,qBAAqB,GAAG,MAAM,EAAE;EACtC,0BAAyB,GAAG;IAAA,OAAM,qBAAqB;EAAA;AACzD,CAAC;AAED,eAAe;EACb,sBAAsB;IAAA,gDAAE,aAAW;MACjC,IAAI,cAAc;MAElB,IAAI;QACF,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC;QAC1D,IAAI,CAAC,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;UACzD,cAAc,GAAG,MAAM,EAAE;UACzB,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,cAAc,CAAC;QAC1D;OACF,CAAC,gBAAM;QACN,cAAc,GAAG,0BAAyB,EAAE;MAC7C;MAED,OAAO,cAAc;IACvB,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EACD,wBAAwB;IAAA,kDAAE,aAAW;MACnC,OAAO,YAAY,CAAC,OAAO,CAAC,qBAAqB,CAAC;IACpD,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EACD,wBAAwB;IAAA,kDAAE,WAAO,gBAA+B,EAAI;MAClE,IAAI;QACF,IAAI,gBAAgB,EAAE;UACpB,YAAY,CAAC,OAAO,CAAC,qBAAqB,EAAE,gBAAgB,CAAC;SAC9D,MAAM;UACL,YAAY,CAAC,UAAU,CAAC,qBAAqB,CAAC;QAC/C;OACF,CAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,UAAU,CAClB,iCAAiC,+EAC0C,KAAK,CACjF;MACF;IACH,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EAED,WAAW,EAAE,uBAAK,CAAE,CAAC;EACrB,eAAe,EAAE,2BAAK,CAAE;CACG","sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ServerRegistrationModule } from './ServerRegistrationModule.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuidv4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  getRegistrationInfoAsync: async () => {\n    return localStorage.getItem(REGISTRATION_INFO_KEY);\n  },\n  setRegistrationInfoAsync: async (registrationInfo: string | null) => {\n    try {\n      if (registrationInfo) {\n        localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n      } else {\n        localStorage.removeItem(REGISTRATION_INFO_KEY);\n      }\n    } catch (error) {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_STORAGE_ERROR',\n        `Could not modify localStorage to persist auto-registration information: ${error}`\n      );\n    }\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as ServerRegistrationModule;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}