{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Constants from 'expo-constants';\nimport { CodedError, Platform, SyntheticPlatformEmitter } from 'expo-modules-core';\nexport default function getDevicePushTokenAsync() {\n  return _getDevicePushTokenAsync.apply(this, arguments);\n}\nfunction _getDevicePushTokenAsync() {\n  _getDevicePushTokenAsync = _asyncToGenerator(function* () {\n    var data = yield _subscribeDeviceToPushNotificationsAsync();\n    SyntheticPlatformEmitter.emit('onDevicePushToken', {\n      devicePushToken: data\n    });\n    return {\n      type: Platform.OS,\n      data: data\n    };\n  });\n  return _getDevicePushTokenAsync.apply(this, arguments);\n}\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError('ERR_UNAVAILABLE', 'The Web Notifications API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError('ERR_UNAVAILABLE', 'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED', \"Cannot use web notifications without permissions granted. Request permissions with \\\"expo-permissions\\\".\");\n  }\n}\nfunction _subscribeDeviceToPushNotificationsAsync() {\n  return _subscribeDeviceToPushNotificationsAsync2.apply(this, arguments);\n}\nfunction _subscribeDeviceToPushNotificationsAsync2() {\n  _subscribeDeviceToPushNotificationsAsync2 = _asyncToGenerator(function* () {\n    var _Constants$expoConfig, _Constants$expoConfig2, _Constants$expoConfig3, _Constants$expoConfig4, _Constants$expoConfig5, _Constants$expoConfig6;\n    var vapidPublicKey = (_Constants$expoConfig = Constants.expoConfig) == null ? void 0 : (_Constants$expoConfig2 = _Constants$expoConfig.notification) == null ? void 0 : _Constants$expoConfig2.vapidPublicKey;\n    if (!vapidPublicKey) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.');\n    }\n    var serviceWorkerPath = (_Constants$expoConfig3 = Constants.expoConfig) == null ? void 0 : (_Constants$expoConfig4 = _Constants$expoConfig3.notification) == null ? void 0 : _Constants$expoConfig4.serviceWorkerPath;\n    if (!serviceWorkerPath) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION', 'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.');\n    }\n    guardPermission();\n    var registration = null;\n    try {\n      registration = yield navigator.serviceWorker.register(serviceWorkerPath);\n    } catch (error) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', \"Could not register this device for push notifications because the service worker (\" + serviceWorkerPath + \") could not be registered: \" + error);\n    }\n    yield navigator.serviceWorker.ready;\n    if (!registration.active) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'Could not register this device for push notifications because the service worker is not active.');\n    }\n    var subscribeOptions = {\n      userVisibleOnly: true,\n      applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey)\n    };\n    var pushSubscription = null;\n    try {\n      pushSubscription = yield registration.pushManager.subscribe(subscribeOptions);\n    } catch (error) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + error + ')');\n    }\n    var pushSubscriptionJson = pushSubscription.toJSON();\n    var subscriptionObject = {\n      endpoint: pushSubscriptionJson.endpoint,\n      keys: {\n        p256dh: pushSubscriptionJson.keys.p256dh,\n        auth: pushSubscriptionJson.keys.auth\n      }\n    };\n    var notificationIcon = ((_Constants$expoConfig5 = (_Constants$expoConfig6 = Constants.expoConfig) == null ? void 0 : _Constants$expoConfig6.notification) != null ? _Constants$expoConfig5 : {}).icon;\n    yield registration.active.postMessage(JSON.stringify({\n      fromExpoWebClient: {\n        notificationIcon: notificationIcon\n      }\n    }));\n    return subscriptionObject;\n  });\n  return _subscribeDeviceToPushNotificationsAsync2.apply(this, arguments);\n}\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}","map":{"version":3,"sources":["../src/getDevicePushTokenAsync.web.ts"],"names":[],"mappings":";AAAA,OAAO,SAAS,MAAM,gBAAgB;AACtC,SAAS,UAAU,EAAE,QAAQ,EAAE,wBAAwB,QAAQ,mBAAmB;AAIlF,wBAA8B,uBAAuB;EAAA;AAAA;AAIpD;EAAA,6CAJc,aAAsC;IACnD,IAAM,IAAI,SAAS,wCAAwC,EAAE;IAC7D,wBAAwB,CAAC,IAAI,CAAC,mBAAmB,EAAE;MAAE,eAAe,EAAE;IAAI,CAAE,CAAC;IAC7E,OAAO;MAAE,IAAI,EAAE,QAAQ,CAAC,EAAE;MAAE,IAAI,EAAJ;IAAI,CAAE;EACpC,CAAC;EAAA;AAAA;AAED,SAAS,eAAe,GAAA;EACtB,IAAI,EAAE,cAAc,IAAI,MAAM,CAAC,EAAE;IAC/B,MAAM,IAAI,UAAU,CAClB,iBAAiB,EACjB,4DAA4D,CAC7D;EACF;EACD,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE;IAC5B,MAAM,IAAI,UAAU,CAClB,iBAAiB,EACjB,mKAAmK,CACpK;EACF;EACD,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,EAAE;IACzC,MAAM,IAAI,UAAU,CAClB,qCAAqC,6GAEtC;EACF;AACH;AAAC,SAEc,wCAAwC;EAAA;AAAA;AAAA;EAAA,8DAAvD,aAAuD;IAAA;IAErD,IAAM,cAAc,4BAAkB,SAAS,CAAC,UAAU,+CAApB,sBAAsB,YAAY,qBAAlC,uBAAoC,cAAc;IACxF,IAAI,CAAC,cAAc,EAAE;MACnB,MAAM,IAAI,UAAU,CAClB,2CAA2C,EAC3C,uKAAuK,CACxK;IACF;IAGD,IAAM,iBAAiB,6BAAG,SAAS,CAAC,UAAU,+CAApB,uBAAsB,YAAY,qBAAlC,uBAAoC,iBAAiB;IAC/E,IAAI,CAAC,iBAAiB,EAAE;MACtB,MAAM,IAAI,UAAU,CAClB,8CAA8C,EAC9C,qLAAqL,CACtL;IACF;IACD,eAAe,EAAE;IAEjB,IAAI,YAAY,GAAqC,IAAI;IACzD,IAAI;MACF,YAAY,SAAS,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,iBAAiB,CAAC;KACzE,CAAC,OAAO,KAAK,EAAE;MACd,MAAM,IAAI,UAAU,CAClB,4CAA4C,yFACyC,iBAAiB,mCAA8B,KAAK,CAC1I;IACF;IACD,MAAM,SAAS,CAAC,aAAa,CAAC,KAAK;IAEnC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;MACxB,MAAM,IAAI,UAAU,CAClB,4CAA4C,EAC5C,iGAAiG,CAClG;IACF;IAED,IAAM,gBAAgB,GAAG;MACvB,eAAe,EAAE,IAAI;MACrB,oBAAoB,EAAE,sBAAsB,CAAC,cAAc;KAC5D;IACD,IAAI,gBAAgB,GAA4B,IAAI;IACpD,IAAI;MACF,gBAAgB,SAAS,YAAY,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,CAAC;KAC9E,CAAC,OAAO,KAAK,EAAE;MACd,MAAM,IAAI,UAAU,CAClB,4CAA4C,EAC5C,yFAAyF,GACvF,KAAK,GACL,GAAG,CACN;IACF;IACD,IAAM,oBAAoB,GAAG,gBAAgB,CAAC,MAAM,EAAE;IAEtD,IAAM,kBAAkB,GAAG;MACzB,QAAQ,EAAE,oBAAoB,CAAC,QAAQ;MACvC,IAAI,EAAE;QACJ,MAAM,EAAE,oBAAoB,CAAC,IAAK,CAAC,MAAM;QACzC,IAAI,EAAE,oBAAoB,CAAC,IAAK,CAAC;MAClC;KACF;IAOD,IAAM,gBAAgB,GAAG,qDAAC,SAAS,CAAC,UAAU,qBAApB,uBAAsB,YAAY,qCAAI,CAAA,CAAE,EAAE,IAAI;IACxE,MAAM,YAAY,CAAC,MAAM,CAAC,WAAW,CACnC,IAAI,CAAC,SAAS,CAAC;MAAE,iBAAiB,EAAE;QAAE,gBAAgB,EAAhB;MAAgB;IAAE,CAAE,CAAC,CAC5D;IAED,OAAO,kBAAkB;EAC3B,CAAC;EAAA;AAAA;AAGD,SAAS,sBAAsB,CAAC,YAAoB,EAAA;EAClD,IAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAI,YAAY,CAAC,MAAM,GAAG,CAAE,IAAI,CAAC,CAAC;EAC/D,IAAM,MAAM,GAAG,CAAC,YAAY,GAAG,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAE7E,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;EACnC,IAAM,WAAW,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;EAElD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;IACvC,WAAW,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;EACvC;EACD,OAAO,WAAW;AACpB","sourcesContent":["import Constants from 'expo-constants';\nimport { CodedError, Platform, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  SyntheticPlatformEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  // @ts-expect-error: TODO: not on the schema\n  const vapidPublicKey: string | null = Constants.expoConfig?.notification?.vapidPublicKey;\n  if (!vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  // @ts-expect-error: TODO: not on the schema\n  const serviceWorkerPath = Constants.expoConfig?.notification?.serviceWorkerPath;\n  if (!serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(serviceWorkerPath);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      `Could not register this device for push notifications because the service worker (${serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.expoConfig?.notification ?? {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}