{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { isDefined, isNumber, isOneOf, isString } from \"./util/validate\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar AppEventsLogger = NativeModules.FBAppEventsLogger;\nvar _ref = (AppEventsLogger === null || AppEventsLogger === void 0 ? void 0 : AppEventsLogger.getConstants()) || {},\n  AppEvents = _ref.AppEvents,\n  AppEventParams = _ref.AppEventParams;\nexport default {\n  setFlushBehavior: function setFlushBehavior(flushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n  logEvent: function logEvent(eventName) {\n    var valueToSum = 0;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (typeof args[0] === 'number') {\n      valueToSum = Number(args.shift());\n    }\n    var parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n  logPurchase: function logPurchase(purchaseAmount, currencyCode, parameters) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n  logPushNotificationOpen: function logPushNotificationOpen(payload) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n  logProductItem: function logProductItem(itemID, availability, condition, description, imageLink, link, title, priceAmount, currency, gtin, mpn, brand, parameters) {\n    if (!isDefined(itemID) || !isString(itemID)) {\n      throw new Error(\"logProductItem expected 'itemID' to be a string\");\n    }\n    if (!isDefined(availability) || !isOneOf(availability, ['in_stock', 'out_of_stock', 'preorder', 'avaliable_for_order', 'discontinued'])) {\n      throw new Error(\"logProductItem expected 'availability' to be one of 'in_stock' | 'out_of_stock' | 'preorder' | 'avaliable_for_order' | 'discontinued'\");\n    }\n    if (!isDefined(condition) || !isOneOf(condition, ['new', 'refurbished', 'used'])) {\n      throw new Error(\"logProductItem expected 'condition' to be one of 'new' | 'refurbished' | 'used'\");\n    }\n    if (!isDefined(description) || !isString(description)) {\n      throw new Error(\"logProductItem expected 'description' to be a string\");\n    }\n    if (!isDefined(imageLink) || !isString(imageLink)) {\n      throw new Error(\"logProductItem expected 'imageLink' to be a string\");\n    }\n    if (!isDefined(link) || !isString(link)) {\n      throw new Error(\"logProductItem expected 'link' to be a string\");\n    }\n    if (!isDefined(title) || !isString(title)) {\n      throw new Error(\"logProductItem expected 'title' to be a string\");\n    }\n    if (!isDefined(priceAmount) || !isNumber(priceAmount)) {\n      throw new Error(\"logProductItem expected 'priceAmount' to be a number\");\n    }\n    if (!isDefined(currency) || !isString(currency)) {\n      throw new Error(\"logProductItem expected 'currency' to be a string\");\n    }\n    if (!isDefined(gtin) && !isDefined(mpn) && !isDefined(brand)) {\n      throw new Error('logProductItem expected either gtin, mpn or brand to be defined');\n    }\n    AppEventsLogger.logProductItem(itemID, availability, condition, description, imageLink, link, title, priceAmount, currency, gtin, mpn, brand, parameters);\n  },\n  flush: function flush() {\n    AppEventsLogger.flush();\n  },\n  setUserID: function setUserID(userID) {\n    AppEventsLogger.setUserID(userID);\n  },\n  clearUserID: function clearUserID() {\n    AppEventsLogger.clearUserID();\n  },\n  getUserID: function () {\n    var _getUserID = _asyncToGenerator(function* () {\n      return yield AppEventsLogger.getUserID();\n    });\n    function getUserID() {\n      return _getUserID.apply(this, arguments);\n    }\n    return getUserID;\n  }(),\n  getAnonymousID: function () {\n    var _getAnonymousID = _asyncToGenerator(function* () {\n      return yield AppEventsLogger.getAnonymousID();\n    });\n    function getAnonymousID() {\n      return _getAnonymousID.apply(this, arguments);\n    }\n    return getAnonymousID;\n  }(),\n  getAdvertiserID: function () {\n    var _getAdvertiserID = _asyncToGenerator(function* () {\n      return yield AppEventsLogger.getAdvertiserID();\n    });\n    function getAdvertiserID() {\n      return _getAdvertiserID.apply(this, arguments);\n    }\n    return getAdvertiserID;\n  }(),\n  getAttributionID: function () {\n    var _getAttributionID = _asyncToGenerator(function* () {\n      if (Platform.OS === 'ios') {\n        return null;\n      }\n      return yield AppEventsLogger.getAttributionID();\n    });\n    function getAttributionID() {\n      return _getAttributionID.apply(this, arguments);\n    }\n    return getAttributionID;\n  }(),\n  setUserData: function setUserData(userData) {\n    AppEventsLogger.setUserData(userData);\n  },\n  setPushNotificationsDeviceToken: function setPushNotificationsDeviceToken(deviceToken) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n  setPushNotificationsRegistrationId: function setPushNotificationsRegistrationId(registrationId) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n  AppEvents: AppEvents,\n  AppEventParams: AppEventParams\n};","map":{"version":3,"sources":["FBAppEventsLogger.ts"],"names":["isDefined","isNumber","isOneOf","isString","AppEventsLogger","NativeModules","FBAppEventsLogger","AppEvents","AppEventParams","getConstants","setFlushBehavior","flushBehavior","logEvent","eventName","args","valueToSum","Number","shift","parameters","logPurchase","purchaseAmount","currencyCode","logPushNotificationOpen","payload","logProductItem","itemID","availability","condition","description","imageLink","link","title","priceAmount","currency","gtin","mpn","brand","Error","flush","setUserID","userID","clearUserID","getUserID","getAnonymousID","getAdvertiserID","getAttributionID","Platform","OS","setUserData","userData","setPushNotificationsDeviceToken","deviceToken","setPushNotificationsRegistrationId","registrationId"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @format\n */\nimport {isDefined, isNumber, isOneOf, isString} from './util/validate';\nimport {NativeModules} from 'react-native';\nimport {Platform} from 'react-native';\n\nconst AppEventsLogger = NativeModules.FBAppEventsLogger;\n\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\nexport type AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\n\n/**\n * Specifies product availability for Product Catalog product item update\n */\nexport type ProductAvailability =\n  /**\n   * Item ships immediately\n   */\n  | 'in_stock'\n  /**\n   * No plan to restock\n   */\n  | 'out_of_stock'\n  /**\n   * Available in future\n   */\n  | 'preorder'\n  /**\n   * Ships in 1-2 weeks\n   */\n  | 'avaliable_for_order'\n  /**\n   * Discontinued\n   */\n  | 'discontinued';\n\n/**\n * Specifies product condition for Product Catalog product item update\n */\nexport type ProductCondition = 'new' | 'refurbished' | 'used';\n\nexport type Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\nexport type UserData = Readonly<{\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  dateOfBirth?: string;\n  gender?: 'm' | 'f';\n  city?: string;\n  state?: string;\n  zip?: string;\n  country?: string;\n}>;\n\nexport type AppEvent = {\n  AchievedLevel: string;\n  AdClick: string;\n  AdImpression: string;\n  AddedPaymentInfo: string;\n  AddedToCart: string;\n  AddedToWishlist: string;\n  CompletedRegistration: string;\n  CompletedTutorial: string;\n  Contact: string;\n  CustomizeProduct: string;\n  Donate: string;\n  FindLocation: string;\n  InitiatedCheckout: string;\n  Purchased: string;\n  Rated: string;\n  Searched: string;\n  SpentCredits: string;\n  Schedule: string;\n  StartTrial: string;\n  SubmitApplication: string;\n  Subscribe: string;\n  UnlockedAchievement: string;\n  ViewedContent: string;\n};\n\nexport type AppEventParam = {\n  AddType: string;\n  Content: string;\n  ContentID: string;\n  ContentType: string;\n  Currency: string;\n  Description: string;\n  Level: string;\n  NumItems: string;\n  MaxRatingValue: string;\n  OrderId: string;\n  PaymentInfoAvailable: string;\n  RegistrationMethod: string;\n  SearchString: string;\n  Success: string;\n  ValueNo: string;\n  ValueYes: string;\n};\n\nconst {AppEvents, AppEventParams} = AppEventsLogger?.getConstants() || {};\n\nexport default {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = Number(args.shift());\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload?: Record<string, string | number>) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Uploads product catalog product item as an app event\n   * @param itemID – Unique ID for the item. Can be a variant for a product. Max size is 100.\n   * @param availability – If item is in stock. Accepted values are: in stock - Item ships immediately out of stock - No plan to restock preorder - Available in future available for order - Ships in 1-2 weeks discontinued - Discontinued\n   * @param condition – Product condition: new, refurbished or used.\n   * @param description – Short text describing product. Max size is 5000.\n   * @param imageLink – Link to item image used in ad.\n   * @param link – Link to merchant's site where someone can buy the item.\n   * @param title – Title of item.\n   * @param priceAmount – Amount of purchase, in the currency specified by the 'currency' parameter. This value will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).\n   * @param currency – Currency used to specify the amount.\n   * @param gtin – Global Trade Item Number including UPC, EAN, JAN and ISBN\n   * @param mpn – Unique manufacture ID for product\n   * @param brand – Name of the brand Note: Either gtin, mpn or brand is required.\n   * @param parameters – Optional fields for deep link specification.\n   */\n  logProductItem(\n    itemID: string,\n    availability: ProductAvailability,\n    condition: ProductCondition,\n    description: string,\n    imageLink: string,\n    link: string,\n    title: string,\n    priceAmount: number,\n    currency: string,\n    gtin?: string,\n    mpn?: string,\n    brand?: string,\n    parameters?: Params,\n  ) {\n    if (!isDefined(itemID) || !isString(itemID)) {\n      throw new Error(\"logProductItem expected 'itemID' to be a string\");\n    }\n    if (\n      !isDefined(availability) ||\n      !isOneOf(availability, [\n        'in_stock',\n        'out_of_stock',\n        'preorder',\n        'avaliable_for_order',\n        'discontinued',\n      ])\n    ) {\n      throw new Error(\n        \"logProductItem expected 'availability' to be one of 'in_stock' | 'out_of_stock' | 'preorder' | 'avaliable_for_order' | 'discontinued'\",\n      );\n    }\n    if (\n      !isDefined(condition) ||\n      !isOneOf(condition, ['new', 'refurbished', 'used'])\n    ) {\n      throw new Error(\n        \"logProductItem expected 'condition' to be one of 'new' | 'refurbished' | 'used'\",\n      );\n    }\n    if (!isDefined(description) || !isString(description)) {\n      throw new Error(\"logProductItem expected 'description' to be a string\");\n    }\n    if (!isDefined(imageLink) || !isString(imageLink)) {\n      throw new Error(\"logProductItem expected 'imageLink' to be a string\");\n    }\n    if (!isDefined(link) || !isString(link)) {\n      throw new Error(\"logProductItem expected 'link' to be a string\");\n    }\n    if (!isDefined(title) || !isString(title)) {\n      throw new Error(\"logProductItem expected 'title' to be a string\");\n    }\n    if (!isDefined(priceAmount) || !isNumber(priceAmount)) {\n      throw new Error(\"logProductItem expected 'priceAmount' to be a number\");\n    }\n    if (!isDefined(currency) || !isString(currency)) {\n      throw new Error(\"logProductItem expected 'currency' to be a string\");\n    }\n    if (!isDefined(gtin) && !isDefined(mpn) && !isDefined(brand)) {\n      throw new Error(\n        'logProductItem expected either gtin, mpn or brand to be defined',\n      );\n    }\n\n    AppEventsLogger.logProductItem(\n      itemID,\n      availability,\n      condition,\n      description,\n      imageLink,\n      link,\n      title,\n      priceAmount,\n      currency,\n      gtin,\n      mpn,\n      brand,\n      parameters,\n    );\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until this method is called again with a null userId\n   */\n  setUserID(userID: string | null) {\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Clears the currently set user id.\n   * @deprecated use setUserID(null) instead\n   */\n  clearUserID() {\n    AppEventsLogger.clearUserID();\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<string | null> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Returns anonymous id or null if not set\n   */\n  async getAnonymousID(): Promise<string | null> {\n    return await AppEventsLogger.getAnonymousID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set\n   */\n  async getAdvertiserID(): Promise<string | null> {\n    return await AppEventsLogger.getAdvertiserID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set.\n   * @platform android\n   */\n  async getAttributionID(): Promise<string | null> {\n    if (Platform.OS === 'ios') {\n      return null;\n    }\n    return await AppEventsLogger.getAttributionID();\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n\n  /**\n   * Predefined event names for logging events common to many apps.\n   */\n  AppEvents,\n\n  /**\n   *  Predefined event name parameters for common additional information to accompany events logged through the `logEvent`.\n   */\n  AppEventParams,\n};\n"]},"metadata":{},"sourceType":"module"}