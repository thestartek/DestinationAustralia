{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport NotificationsEmitterModule from \"./NotificationsEmitterModule\";\nvar emitter = new EventEmitter(NotificationsEmitterModule);\nvar didReceiveNotificationEventName = 'onDidReceiveNotification';\nvar didDropNotificationsEventName = 'onNotificationsDeleted';\nvar didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\nexport var DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\nexport function addNotificationReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationEventName, listener);\n}\nexport function addNotificationsDroppedListener(listener) {\n  return emitter.addListener(didDropNotificationsEventName, listener);\n}\nexport function addNotificationResponseReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationResponseEventName, listener);\n}\nexport function removeNotificationSubscription(subscription) {\n  emitter.removeSubscription(subscription);\n}\nexport function getLastNotificationResponseAsync() {\n  return _getLastNotificationResponseAsync.apply(this, arguments);\n}\nfunction _getLastNotificationResponseAsync() {\n  _getLastNotificationResponseAsync = _asyncToGenerator(function* () {\n    if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n      throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n    }\n    return yield NotificationsEmitterModule.getLastNotificationResponseAsync();\n  });\n  return _getLastNotificationResponseAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/NotificationsEmitter.ts"],"names":[],"mappings":";AAAA,SAAS,YAAY,EAAgB,mBAAmB,QAAQ,mBAAmB;AAGnF,OAAO,0BAA0B;AAGjC,IAAM,OAAO,GAAG,IAAI,YAAY,CAAC,0BAA0B,CAAC;AAE5D,IAAM,+BAA+B,GAAG,0BAA0B;AAClE,IAAM,6BAA6B,GAAG,wBAAwB;AAC9D,IAAM,uCAAuC,GAAG,kCAAkC;AAElF,OAAO,IAAM,yBAAyB,GAAG,4CAA4C;AAErF,OAAM,SAAU,+BAA+B,CAC7C,QAAuC,EAAA;EAEvC,OAAO,OAAO,CAAC,WAAW,CAAe,+BAA+B,EAAE,QAAQ,CAAC;AACrF;AAEA,OAAM,SAAU,+BAA+B,CAAC,QAAoB,EAAA;EAClE,OAAO,OAAO,CAAC,WAAW,CAAO,6BAA6B,EAAE,QAAQ,CAAC;AAC3E;AAEA,OAAM,SAAU,uCAAuC,CACrD,QAA+C,EAAA;EAE/C,OAAO,OAAO,CAAC,WAAW,CACxB,uCAAuC,EACvC,QAAQ,CACT;AACH;AAEA,OAAM,SAAU,8BAA8B,CAAC,YAA0B,EAAA;EACvE,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC;AAC1C;AAEA,gBAAsB,gCAAgC;EAAA;AAAA;AAKrD;EAAA,sDALM,aAA+C;IACpD,IAAI,CAAC,0BAA0B,CAAC,gCAAgC,EAAE;MAChE,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,kCAAkC,CAAC;IACvF;IACD,aAAa,0BAA0B,CAAC,gCAAgC,EAAE;EAC5E,CAAC;EAAA;AAAA","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): Subscription {\n  return emitter.addListener<Notification>(didReceiveNotificationEventName, listener);\n}\n\nexport function addNotificationsDroppedListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): Subscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    listener\n  );\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  return await NotificationsEmitterModule.getLastNotificationResponseAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}