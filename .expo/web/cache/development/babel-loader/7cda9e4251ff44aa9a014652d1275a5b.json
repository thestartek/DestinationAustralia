{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { isString } from \"../common\";\nimport { MobileAds } from \"../MobileAds\";\nimport { validateAdRequestOptions } from \"../validateAdRequestOptions\";\nimport { MobileAd } from \"./MobileAd\";\nimport { AdEventType } from \"../AdEventType\";\nexport var RewardedAd = function (_MobileAd) {\n  _inherits(RewardedAd, _MobileAd);\n  var _super = _createSuper(RewardedAd);\n  function RewardedAd() {\n    _classCallCheck(this, RewardedAd);\n    return _super.apply(this, arguments);\n  }\n  _createClass(RewardedAd, [{\n    key: \"addAdEventsListener\",\n    value: function addAdEventsListener(listener) {\n      return this._addAdEventsListener(listener);\n    }\n  }, {\n    key: \"addAdEventListener\",\n    value: function addAdEventListener(type, listener) {\n      if (type === AdEventType.LOADED) {\n        throw new Error('RewardedAd.addAdEventListener(*) use RewardedAdEventType.LOADED instead of AdEventType.LOADED.');\n      }\n      return this._addAdEventListener(type, listener);\n    }\n  }], [{\n    key: \"createForAdRequest\",\n    value: function createForAdRequest(adUnitId, requestOptions) {\n      if (!isString(adUnitId)) {\n        throw new Error(\"RewardedAd.createForAdRequest(*) 'adUnitId' expected an string value.\");\n      }\n      var options = {};\n      try {\n        options = validateAdRequestOptions(requestOptions);\n      } catch (e) {\n        if (e instanceof Error) {\n          throw new Error(\"RewardedAd.createForAdRequest(_, *) \" + e.message + \".\");\n        }\n      }\n      var requestId = RewardedAd._rewardedRequest++;\n      return new RewardedAd('rewarded', MobileAds(), requestId, adUnitId, options);\n    }\n  }]);\n  return RewardedAd;\n}(MobileAd);\n_defineProperty(RewardedAd, \"_rewardedRequest\", 0);","map":{"version":3,"sources":["RewardedAd.ts"],"names":["isString","MobileAds","validateAdRequestOptions","MobileAd","AdEventType","RewardedAd","adUnitId","requestOptions","Error","options","e","message","requestId","_rewardedRequest","addAdEventsListener","listener","_addAdEventsListener","addAdEventListener","type","LOADED","_addAdEventListener"],"mappings":";;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,QAAQ;AACjB,SAASC,SAAS;AAClB,SAASC,wBAAwB;AACjC,SAASC,QAAQ;AACjB,SAASC,WAAW;AAmDpB,WAAaC,UAAU;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OA6CrBS,6BACEC,QAA6B,EACjB;MACZ,OAAO,IAAI,CAACC,oBAAoB,CAACD,QAAQ,CAAC;IAC5C;EAAA;IAAA;IAAA,OAEAE,4BACEC,IAAO,EACPH,QAA4B,EAC5B;MACA,IAAIG,IAAI,KAAKd,WAAW,CAACe,MAAM,EAAE;QAC/B,MAAM,IAAIX,KAAK,CACb,gGAAgG,CACjG;MACH;MACA,OAAO,IAAI,CAACY,mBAAmB,CAACF,IAAI,EAAEH,QAAQ,CAAC;IACjD;EAAA;IAAA;IAAA,OAlCA,4BAA0BT,QAAgB,EAAEC,cAA+B,EAAE;MAC3E,IAAI,CAACP,QAAQ,CAACM,QAAQ,CAAC,EAAE;QACvB,MAAM,IAAIE,KAAK,CAAC,uEAAuE,CAAC;MAC1F;MAEA,IAAIC,OAAO,GAAG,CAAC,CAAC;MAChB,IAAI;QACFA,OAAO,GAAGP,wBAAwB,CAACK,cAAc,CAAC;MACpD,CAAC,CAAC,OAAOG,CAAC,EAAE;QACV,IAAIA,CAAC,YAAYF,KAAK,EAAE;UACtB,MAAM,IAAIA,KAAK,0CAAwCE,CAAC,CAACC,OAAQ,OAAG;QACtE;MACF;MAEA,IAAMC,SAAS,GAAGP,UAAU,CAACQ,gBAAgB,EAAE;MAC/C,OAAO,IAAIR,UAAU,CAAC,UAAU,EAAEJ,SAAS,EAAE,EAAEW,SAAS,EAAEN,QAAQ,EAAEG,OAAO,CAAC;IAC9E;EAAA;EAAA;AAAA,EA3C8BN,QAAQ;AA8DvC,eAAA,CA9DYE,UAAU,EAAA,kBAAA,EACe,CAAC,CAAA","sourceRoot":"../../src","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '../common';\nimport { MobileAds } from '../MobileAds';\nimport { validateAdRequestOptions } from '../validateAdRequestOptions';\nimport { MobileAd } from './MobileAd';\nimport { AdEventType } from '../AdEventType';\n/**\n * A class for interacting and showing Rewarded Ads.\n *\n * An Rewarded advert can be pre-loaded and shown at a suitable point in your apps flow, such as at the end of a level\n * in a game. The content of a rewarded advert can be controlled via your Google Mobile Ads dashboard. Typically users are rewarded\n * after completing a specific advert action (e.g. watching a video or submitting an option via an interactive form).\n * Events (such as the user earning a reward or closing a rewarded advert early) are sent back for you to handle accordingly\n * within your application.\n *\n * #### Example\n *\n * First create a new Rewarded instance, passing in your Ad Unit ID from the Google Mobile Ads configuration console, and any additional\n * request options. The example below will present a test advert, and only request a non-personalized ad.\n *\n * ```js\n * import { RewardedAd, TestIds } from 'react-native-google-mobile-ads';\n *\n * const rewarded = RewardedAd.createForAdRequest(TestIds.REWARDED, {\n *     requestNonPersonalizedAdsOnly: true,\n * });\n *  ```\n *\n * Each advert needs to be loaded from Google Mobile Ads before being shown. It is recommended this is performed before the user\n * reaches the checkpoint to show the advert, so it's ready to go. Before loading the advert, we need to setup\n * event listeners to listen for updates from Google Mobile Ads, such as advert loaded or failed to load.\n *\n * Event types match the `AdEventType` or `RewardedAdEventType` interface. The potential user reward for rewarded\n * adverts are passed back to the event handler on advert load and when the user earns the reward.\n *\n * ```js\n * import { RewardedAdEventType } from 'react-native-google-mobile-ads';\n *\n * rewarded.addAdEventListener(RewardedAdEventType.LOADED. () => {\n *   rewarded.show();\n * });\n * rewarded.addAdEventListener(RewardedAdEventType.EARNED_REWARD. (reward) => {\n *   console.log('User earned reward of ', reward);\n * });\n *\n * rewarded.load();\n *  ```\n *\n * The rewarded advert will be presented to the user, and several more events can be triggered such as the user clicking the\n * advert, closing it or completing the action.\n */\nexport class RewardedAd extends MobileAd {\n  /**\n   * Creates a new RewardedAd instance.\n   *\n   * #### Example\n   *\n   * ```js\n   * import { RewardedAd, RewardedAdEventType, TestIds } from 'react-native-google-mobile-ads';\n   *\n   * const rewardedAd = await RewardedAd.createForAdRequest(TestIds.REWARDED, {\n   *   requestAgent: 'CoolAds',\n   * });\n   *\n   * rewarded.addAdEventListener(RewardedAdEventType.LOADED. () => {\n   *   rewarded.show();\n   * });\n   * rewarded.addAdEventListener(RewardedAdEventType.EARNED_REWARD. (reward) => {\n   *   console.log('User earned reward of ', reward);\n   * });\n   *\n   * rewardedAd.load();\n   * ```\n   *\n   * @param adUnitId The Ad Unit ID for the Rewarded Ad. You can find this on your Google Mobile Ads dashboard.\n   * @param requestOptions Optional RequestOptions used to load the ad.\n   */\n  static createForAdRequest(adUnitId, requestOptions) {\n    if (!isString(adUnitId)) {\n      throw new Error(\"RewardedAd.createForAdRequest(*) 'adUnitId' expected an string value.\");\n    }\n    let options = {};\n    try {\n      options = validateAdRequestOptions(requestOptions);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw new Error(`RewardedAd.createForAdRequest(_, *) ${e.message}.`);\n      }\n    }\n    const requestId = RewardedAd._rewardedRequest++;\n    return new RewardedAd('rewarded', MobileAds(), requestId, adUnitId, options);\n  }\n  addAdEventsListener(listener) {\n    return this._addAdEventsListener(listener);\n  }\n  addAdEventListener(type, listener) {\n    if (type === AdEventType.LOADED) {\n      throw new Error('RewardedAd.addAdEventListener(*) use RewardedAdEventType.LOADED instead of AdEventType.LOADED.');\n    }\n    return this._addAdEventListener(type, listener);\n  }\n}\n_defineProperty(RewardedAd, \"_rewardedRequest\", 0);\n//# sourceMappingURL=RewardedAd.js.map"]},"metadata":{},"sourceType":"module"}