{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { getConstants } from \"../helpers\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./enums\";\nimport TextInputAffix, { AffixAdornment } from \"./TextInputAffix\";\nimport TextInputIcon, { IconAdornment } from \"./TextInputIcon\";\nexport function getAdornmentConfig(_ref) {\n  var left = _ref.left,\n    right = _ref.right;\n  var adornmentConfig = [];\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n        adornment = _ref2.adornment;\n      if (adornment && React.isValidElement(adornment)) {\n        var type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n    leftAffixWidth = _ref3.leftAffixWidth,\n    rightAffixWidth = _ref3.rightAffixWidth,\n    paddingHorizontal = _ref3.paddingHorizontal,\n    _ref3$inputOffset = _ref3.inputOffset,\n    inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n    mode = _ref3.mode,\n    isV3 = _ref3.isV3;\n  var _getConstants = getConstants(isV3),\n    OUTLINED_INPUT_OFFSET = _getConstants.OUTLINED_INPUT_OFFSET,\n    ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref7;\n      var type = _ref4.type,\n        side = _ref4.side;\n      var isLeftSide = side === AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      var paddingKey = \"padding\" + captalize(side);\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === AdornmentType.Affix;\n      var marginKey = \"margin\" + captalize(side);\n      return _ref7 = {}, _defineProperty(_ref7, marginKey, isAffix ? 0 : offset), _defineProperty(_ref7, paddingKey, isAffix ? offset : inputOffset), _ref7;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\nvar TextInputAdornment = function TextInputAdornment(_ref5) {\n  var adornmentConfig = _ref5.adornmentConfig,\n    left = _ref5.left,\n    right = _ref5.right,\n    onAffixChange = _ref5.onAffixChange,\n    textStyle = _ref5.textStyle,\n    visible = _ref5.visible,\n    topPosition = _ref5.topPosition,\n    isTextInputFocused = _ref5.isTextInputFocused,\n    forceFocus = _ref5.forceFocus,\n    paddingHorizontal = _ref5.paddingHorizontal,\n    maxFontSizeMultiplier = _ref5.maxFontSizeMultiplier;\n  if (adornmentConfig.length) {\n    return React.createElement(React.Fragment, null, adornmentConfig.map(function (_ref6) {\n      var type = _ref6.type,\n        side = _ref6.side;\n      var inputAdornmentComponent;\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n      var commonProps = {\n        side: side,\n        testID: side + \"-\" + type + \"-adornment\",\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n      if (type === AdornmentType.Icon) {\n        return React.createElement(IconAdornment, _extends({}, commonProps, {\n          key: side,\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return React.createElement(AffixAdornment, _extends({}, commonProps, {\n          key: side,\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible,\n          maxFontSizeMultiplier: maxFontSizeMultiplier\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\nexport default TextInputAdornment;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["React","getConstants","AdornmentSide","AdornmentType","InputMode","TextInputAffix","AffixAdornment","TextInputIcon","IconAdornment","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","isV3","OUTLINED_INPUT_OFFSET","ADORNMENT_OFFSET","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","testID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\n\nimport { getConstants } from '../helpers';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n  isV3,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n  isV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  const { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                key={side}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                key={side}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}