{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"icon\", \"onPress\", \"forceTextInputFocus\", \"color\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../../core/theming\";\nimport IconButton from \"../../IconButton/IconButton\";\nimport { ICON_SIZE } from \"../constants\";\nimport { getConstants } from \"../helpers\";\nvar StyleContext = React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {},\n  testID: ''\n});\nvar IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n    topPosition = _ref.topPosition,\n    side = _ref.side,\n    isTextInputFocused = _ref.isTextInputFocused,\n    forceFocus = _ref.forceFocus,\n    testID = _ref.testID;\n  var _useInternalTheme = useInternalTheme(),\n    isV3 = _useInternalTheme.isV3;\n  var _getConstants = getConstants(isV3),\n    ICON_OFFSET = _getConstants.ICON_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus,\n    testID: testID\n  };\n  return React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var icon = _ref2.icon,\n    onPress = _ref2.onPress,\n    forceTextInputFocus = _ref2.forceTextInputFocus,\n    color = _ref2.color,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var _React$useContext = React.useContext(StyleContext),\n    style = _React$useContext.style,\n    isTextInputFocused = _React$useContext.isTextInputFocused,\n    forceFocus = _React$useContext.forceFocus,\n    testID = _React$useContext.testID;\n  var onPressWithFocusControl = React.useCallback(function (e) {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 ? void 0 : onPress(e);\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  var theme = useInternalTheme();\n  var iconColor = color;\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(IconButton, _extends({\n    icon: icon,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: typeof color === 'function' ? color(isTextInputFocused) : iconColor,\n    testID: testID\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\nexport { IconAdornment };","map":{"version":3,"sources":["TextInputIcon.tsx"],"names":["React","useInternalTheme","IconButton","ICON_SIZE","getConstants","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","icon","topPosition","side","isV3","ICON_OFFSET","top","contextState","TextInputIcon","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","e","theme","iconColor","disabled","colors","onSurface","onSurfaceVariant","text","styles","container","iconButton","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../../core/theming';\nimport type { $Omit, ThemeProp } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport IconButton from '../../IconButton/IconButton';\nimport { ICON_SIZE } from '../constants';\nimport { getConstants } from '../helpers';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * @renamed Renamed from 'name' to 'icon` in v5.x\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n  testID: string;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n  testID: '',\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus, testID }) => {\n  const { isV3 } = useInternalTheme();\n  const { ICON_OFFSET } = getConstants(isV3);\n\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus, testID };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon icon=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  icon,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus, testID } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(\n    (e: GestureResponderEvent) => {\n      if (forceTextInputFocus && !isTextInputFocused) {\n        forceFocus();\n      }\n\n      onPress?.(e);\n    },\n    [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]\n  );\n\n  const theme = useInternalTheme();\n\n  let iconColor = color;\n\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={icon}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        iconColor={\n          typeof color === 'function' ? color(isTextInputFocused) : iconColor\n        }\n        testID={testID}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module"}